/*********************************************************************************/
/*********************************************************************************/
/**********************			Author: Ibrahim Tarek		**********************/
/**********************			File: TIMERS_interface.h		**********************/
/**********************			Version: 1.00				**********************/
/*********************************************************************************/
/*********************************************************************************/

/**
 * @file TIMERS_interface.h
 * @author Ibrahim Tarek
 * @brief This file interfaces the TIMERS module functions.
 * @version 1.00
 */

#ifndef TIMERS_INTERFACE_H_
#define TIMERS_INTERFACE_H_


/*WGM Options*/
typedef enum
{
	NORMAL = 0,
	PHASE_CORR,
	CTC,
	FAST_PWM
}TIMER0_2_WGM_t;
#define TIMERS_u8NORMAL_MODE			0u
#define TIMERS_u8PHASE_CORRECT_PWM		1u
#define TIMERS_u8CTC_MODE				2u
#define TIMERS_u8FAST_PWM				3u



/*CompOutMode Options - non PWM mode*/
typedef enum
{
	OC0_DISCONNECTED = 0,
	TOG_OC0,
	CLR_OC0,
	SET_OC0,
	NON_INVERTED_PWM,
	INVERTED_PWM
}TIMER0_2_OC_MODE_t;

#define	TIMERS_u8OC0_DISCONNECTED		0u
#define TIMERS_u8TOG_OC0				1u
#define TIMERS_u8CLEAR_OC0				2u
#define TIMERS_u8SET_OC0				3u


/*CompOutMode Options - fast or phase correct PWM mode*/
/*
 * For fast PWM: NON_INVERTED -->> Clear OC0 on compare match, Set OC0 on Top.
 * 				 INVERTED 	  -->> Set OC0 on compare match, Clear OC0 on Top.
 *
 * For phase correct PWM: NON_INVERTED -->> Clear OC0 on compare match when up counting,
 * 											Set OC0 on compare match when down counting.
 * 				 		  INVERTED 	   -->> Set OC0 on compare match when up counting,
 * 											Clear OC0 on compare match when down counting.
 */
typedef enum
{
	NON_INVERTED = 2,
	INVERTED
}TIMER0_2_PWM_OC_MODE_t;

#define TIMERS_u8NON_INVERTED			2u
#define TIMERS_u8INVERTED				3u

typedef struct
{
	uint8 ClkSelect;
	TIMER0_2_WGM_t WGM;
	TIMER0_2_OC_MODE_t OCMode;
}TIMER0_2_CFG_t;

typedef struct
{
	uint8 ClkSelect;
	TIMER0_2_WGM_t WGM;
	TIMER0_2_NON_PWM_OC_MODE_t OCMode;
}TIMER_t;


/*ClkSelect Options*/
#define TIMER0_2_u8NO_CLK_SRC			0u
#define TIMER0_2_u8SYS_CLK_BY_1			1u
#define TIMER0_2_u8SYS_CLK_BY_8			2u
#define TIMER0_2_u8SYS_CLK_BY_64		3u
#define TIMER0_2_u8SYS_CLK_BY_265		4u
#define TIMER0_2_u8SYS_CLK_BY_1024		5u
#define TIMER0_2_u8EXT_CLK_FALLING		6u
#define TIMER0_2_u8EXT_CLK_RISING		7u



typedef enum
{
	TIMER0_OVF = 0,
	TIMER0_COMP,
	TIMER1_ICU
}TIMERS_Int_Src_t;


#define ICU_u8RISING_EDGE	0u
#define ICU_u8FALLING_EDGE	1u

uint8 TIMER0_voidInit(const TIMER0_2_CFG_t *Copy_pstTimerConfig);
uint8 TIMER1_voidInit(const TIMER_t *Copy_pstTimerConfig);
uint8 TIMER2_voidInit(const TIMER0_2_CFG_t *Copy_pstTimerConfig);

void TIMER0_voidSetCompValue(uint8 Copy_u8Value);

void TIMER1_voidInit(void);
void TIMER1_voidSetCompValue(uint16 Copy_u16Value);
void TIMER1_voidSetTimerValue(uint16 Copy_u16TimerValue);
uint16 TIMER1_u16GetValue(void);

void ICU_voidInit(void);
uint8 ICU_u8SetTriggerSrc(uint8 Copy_u8TriggerSrc);
void ICU_voidIntEnable(void);
void ICU_voidIntDisable(void);
uint16 ICU_u16GetInputCaptureValue(void);

uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void));

#endif
