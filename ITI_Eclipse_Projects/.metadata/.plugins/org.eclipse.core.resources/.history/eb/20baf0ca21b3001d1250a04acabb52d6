/*********************************************************************************/
/*********************************************************************************/
/**********************			Author: Ibrahim Tarek		**********************/
/**********************			File: CLCD_program.c		**********************/
/**********************			Version: 1.00				**********************/
/*********************************************************************************/
/*********************************************************************************/


#include "STD_TYPES.h"

#include "DIO_interface.h"

#include <util/delay.h>

#include "CLCD_interface.h"
#include "CLCD_cfg.h"
#include "CLCD_prv.h"

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);

	/*Set the command on data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Cmd);

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
}

void CLCD_voidSendData(char Copy_c8Data)
{

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);

	/*Set the data on data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_c8Data);

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);

	/*Delay*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
}

void CLCD_voidInit(void)
{
	/*Wait for more than 30ms after power on*/

	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
}

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
	uint8 Local_u8ErrorState = OK;

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
	}

	return Local_u8ErrorState;
}

void CLCD_voidSendNumber(uint32 Copy_u32Number)
{
	char Local_c8Digit;

	while(Copy_u32Number != 0)
	{
		Local_c8Digit = (char) Copy_u32Number % 10;
		Copy_u32Number = Copy_u32Number / 10;
		CLCD_voidSendData(Local_c8Digit + 48);
	}
}

