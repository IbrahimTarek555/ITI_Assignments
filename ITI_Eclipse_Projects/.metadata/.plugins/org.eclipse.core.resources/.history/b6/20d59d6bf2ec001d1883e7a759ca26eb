/*********************************************************************************/
/*********************************************************************************/
/**********************			Author: Ibrahim Tarek		**********************/
/**********************			File: ADC_program.c			**********************/
/**********************			Version: 1.00				**********************/
/*********************************************************************************/
/*********************************************************************************/

/**
 * @file ADC_program.c
 * @author Ibrahim Tarek
 * @brief This file implements the ADC module functions.
 * @version 1.00
 */

#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DEFINES.h"

#include "ADC_interface.h"
#include "ADC_config.h"
#include "ADC_private.h"
#include "ADC_register.h"


/**
 * @brief Function to initialize ADC with prebuild configuration.
 */
void ADC_voidInit(void)
{
	/*Reference Selection*/
#if	ADC_u8REF_VOLT == AREF_REF
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_u8REF_VOLT == AVCC_REF
	SET_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_u8REF_VOLT == INTERNAL_2560mV_REF
	SET_BIT(ADMUX,ADMUX_REFS0);
	SET_BIT(ADMUX,ADMUX_REFS1);

#else
#error Wrong ADC_u8REF_VOLT configuration option

#endif

	/*Left Adjust Result Selection*/
#if	ADC_u8RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX,ADMUX_ADLAR);

#elif ADC_u8RESOLUTION == TEN_BITS
	CLR_BIT(ADMUX,ADMUX_ADLAR);

#else
#error Wrong ADC_u8RESOLUTION configuration option

#endif

	/*ADC Interrupt Enable/Disable*/
#if ADC_u8INT_ENABLE == ENABLED
	SET_BIT(ADCSRA,ADCSRA_ADIE);

#elif ADC_u8INT_ENABLE == DISABLED
	CLR_BIT(ADCSRA,ADCSRA_ADIE);

#else
#error Wrong ADC_u8INT_ENABLE configuration option

#endif

	/*Prescaler Selection*/
	ADCSRA = ADCSRA & PRESCALER_MASK;
	ADCSRA = ADCSRA | ADC_u8PRESCALER_VALUE;

	/*Enable the ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
}


/**
 * @brief Function to get the reading of an ADC channel.
 * @param Copy_u8Channel The number of channel you want to read.
 * @return The Reading of the channel selected.
 */
uint16 ADC_u16GetChannelReading(uint8 Copy_u8Channel)
{
	/*Define variable*/
	uint16 Local_u16Reading = 0;

	/*Set the required channel*/
	ADMUX = ADMUX & CHANNEL_MASK;
	ADMUX = ADMUX | Copy_u8Channel;

	/*Start Conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);

	/*Polling until the interrupt flag rise*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF) == 0);

	/*Clear the conversion complete flag flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);

	/*Return the data*/
#if ADC_u8RESOLUTION == EIGHT_BITS
	return ADCH;

#elif ADC_u8RESOLUTION == TEN_BITS
	return ADC;

#else
#error Wrong ADC_u8RESOLUTION configuration option
#endif
}
