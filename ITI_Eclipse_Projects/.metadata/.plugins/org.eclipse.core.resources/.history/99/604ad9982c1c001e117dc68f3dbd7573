/*********************************************************************************/
/*********************************************************************************/
/**********************			Author: Ibrahim Tarek		**********************/
/**********************			File: EEPROM_program.c		**********************/
/**********************			Version: 1.00				**********************/
/*********************************************************************************/
/*********************************************************************************/

/**
 * @file EEPROM_program.c
 * @author Ibrahim Tarek
 * @brief This file implements the EEPROM sensor module functions.
 * @version 1.00
 */

#include "STD_TYPES.h"
#include "DEFINES.h"
#include "TWI_interface.h"

#include "DIO_interface.h"

#include <util/delay.h>

#include "EEPROM_config.h"
#include "EEPROM_private.h"
#include "EEPROM_interface.h"

uint8 EEPROM_u8WriteDataByte(uint16 Copy_u16LocationAddress, uint8 Copy_u8Data)
{
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
	TWI_ERROR_STATUS_t Local_u8ErrorFounder = NO_ERROR;

	/*Validate the address*/
	if(Copy_u16LocationAddress <= EEPROM_MAX_ADDRESS)
	{
		/*Form the slave address to call*/
		uint8 Local_u8SlaveAddressPacket = EEPROM_FIXED_ADDRESS | (EEPROM_A2_CONNECTION << 2u) | (uint8) (Copy_u16LocationAddress >> 8u);
		/*Start the communication*/
		Local_u8ErrorFounder = TWI_enSendStartCondition();
		if(Local_u8ErrorFounder != NO_ERROR)
		{
			DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_HIGH);
		}
		/*Send Write Request*/
		Local_u8ErrorFounder = TWI_enSendSlaveAddressWithWrite(Local_u8SlaveAddressPacket);
		if(Local_u8ErrorFounder != NO_ERROR)
		{
			DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_HIGH);
		}

		/*Send the location address through data byte message*/
		Local_u8ErrorFounder = TWI_enMasterWriteDataByte((uint8) Copy_u16LocationAddress);
//		if(Local_u8ErrorFounder != NO_ERROR)
//		{
//			DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_HIGH);
//		}

		/*Send the data byte message*/
		Local_u8ErrorFounder = TWI_enMasterWriteDataByte(Copy_u8Data);
//		if(Local_u8ErrorFounder != NO_ERROR)
//		{
//			DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_HIGH);
//		}

		/*Stop the communication*/
		TWI_enSendStopCondition();
		DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_HIGH);

		/*Wait for 10 millisecond for the EEPROM write cycle*/
		_delay_ms(10);
	}
	else
	{
		Local_u8ErrorState = NOK;
	}

	/*Return Error State*/
	return Local_u8ErrorState;
}

uint8 EEPROM_u8ReadDataByte(uint16 Copy_u16LocationAddress, uint8 *Copy_pu8Data)
{
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;

	/*Validate the address*/
	if(Copy_u16LocationAddress <= EEPROM_MAX_ADDRESS)
	{
		/*Form the slave address to call*/
		uint8 Local_u8SlaveAddressPacket = EEPROM_FIXED_ADDRESS | (EEPROM_A2_CONNECTION << 2u) | (uint8) (Copy_u16LocationAddress >> 8u);

		/*Start the communication*/
		TWI_enSendStartCondition();

		/*Send Write Request*/
		TWI_enSendSlaveAddressWithWrite(Local_u8SlaveAddressPacket);

		/*Send the location address through data byte message*/
		TWI_enMasterWriteDataByte((uint8) Copy_u16LocationAddress);

		/*Repeat the start condition to change the operation to read*/
		TWI_enSendRepeatedStart();

		/*Send read Request*/
		TWI_enSendSlaveAddressWithRead(Local_u8SlaveAddressPacket);

		/*Read the data byte*/
		TWI_enMasterReadDataByte(Copy_pu8Data);

		/*Stop the communication*/
		TWI_enSendStopCondition();
	}
	else
	{
		Local_u8ErrorState = NOK;
	}

	/*Return Error State*/
	return Local_u8ErrorState;
}

