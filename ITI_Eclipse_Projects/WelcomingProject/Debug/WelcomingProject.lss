
WelcomingProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003a62  00003af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080016a  0080016a  00003c00  2**0
                  ALLOC
  3 .stab         000039a8  00000000  00000000  00003c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bbe  00000000  00000000  000075a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009166  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009306  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000094f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b903  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000de60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e020  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e316  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__vector_4>
      14:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_5>
      18:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__vector_6>
      1c:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__vector_7>
      20:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__vector_8>
      24:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__vector_9>
      28:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__vector_10>
      2c:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__vector_13>
      38:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__vector_14>
      3c:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 0b 	call	0x178c	; 0x178c <main>
      8a:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	6b 83       	std	Y+3, r22	; 0x03
     e46:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
     e48:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	88 30       	cpi	r24, 0x08	; 8
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <DIO_u8SetPinDirection+0x24>
     e50:	f4 c0       	rjmp	.+488    	; 0x103a <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <DIO_u8SetPinDirection+0x2c>
     e58:	72 c0       	rjmp	.+228    	; 0xf3e <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	38 87       	std	Y+8, r19	; 0x08
     e62:	2f 83       	std	Y+7, r18	; 0x07
     e64:	8f 81       	ldd	r24, Y+7	; 0x07
     e66:	98 85       	ldd	r25, Y+8	; 0x08
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	91 05       	cpc	r25, r1
     e6c:	49 f1       	breq	.+82     	; 0xec0 <DIO_u8SetPinDirection+0x92>
     e6e:	2f 81       	ldd	r18, Y+7	; 0x07
     e70:	38 85       	ldd	r19, Y+8	; 0x08
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	2c f4       	brge	.+10     	; 0xe82 <DIO_u8SetPinDirection+0x54>
     e78:	8f 81       	ldd	r24, Y+7	; 0x07
     e7a:	98 85       	ldd	r25, Y+8	; 0x08
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	61 f0       	breq	.+24     	; 0xe98 <DIO_u8SetPinDirection+0x6a>
     e80:	5b c0       	rjmp	.+182    	; 0xf38 <DIO_u8SetPinDirection+0x10a>
     e82:	2f 81       	ldd	r18, Y+7	; 0x07
     e84:	38 85       	ldd	r19, Y+8	; 0x08
     e86:	22 30       	cpi	r18, 0x02	; 2
     e88:	31 05       	cpc	r19, r1
     e8a:	71 f1       	breq	.+92     	; 0xee8 <DIO_u8SetPinDirection+0xba>
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	91 05       	cpc	r25, r1
     e94:	e9 f1       	breq	.+122    	; 0xf10 <DIO_u8SetPinDirection+0xe2>
     e96:	50 c0       	rjmp	.+160    	; 0xf38 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
     e98:	aa e3       	ldi	r26, 0x3A	; 58
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e3       	ldi	r30, 0x3A	; 58
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_u8SetPinDirection+0x88>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_u8SetPinDirection+0x84>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	bf c0       	rjmp	.+382    	; 0x103e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
     ec0:	a7 e3       	ldi	r26, 0x37	; 55
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e3       	ldi	r30, 0x37	; 55
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_u8SetPinDirection+0xb0>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_u8SetPinDirection+0xac>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	ab c0       	rjmp	.+342    	; 0x103e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
     ee8:	a4 e3       	ldi	r26, 0x34	; 52
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e4 e3       	ldi	r30, 0x34	; 52
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_u8SetPinDirection+0xd8>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_u8SetPinDirection+0xd4>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	97 c0       	rjmp	.+302    	; 0x103e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_u8SetPinDirection+0x100>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_u8SetPinDirection+0xfc>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	83 c0       	rjmp	.+262    	; 0x103e <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	80 c0       	rjmp	.+256    	; 0x103e <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	88 23       	and	r24, r24
     f42:	09 f0       	breq	.+2      	; 0xf46 <DIO_u8SetPinDirection+0x118>
     f44:	77 c0       	rjmp	.+238    	; 0x1034 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3e 83       	std	Y+6, r19	; 0x06
     f4e:	2d 83       	std	Y+5, r18	; 0x05
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	59 f1       	breq	.+86     	; 0xfb0 <DIO_u8SetPinDirection+0x182>
     f5a:	2d 81       	ldd	r18, Y+5	; 0x05
     f5c:	3e 81       	ldd	r19, Y+6	; 0x06
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	2c f4       	brge	.+10     	; 0xf6e <DIO_u8SetPinDirection+0x140>
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f0       	breq	.+26     	; 0xf86 <DIO_u8SetPinDirection+0x158>
     f6c:	60 c0       	rjmp	.+192    	; 0x102e <DIO_u8SetPinDirection+0x200>
     f6e:	2d 81       	ldd	r18, Y+5	; 0x05
     f70:	3e 81       	ldd	r19, Y+6	; 0x06
     f72:	22 30       	cpi	r18, 0x02	; 2
     f74:	31 05       	cpc	r19, r1
     f76:	89 f1       	breq	.+98     	; 0xfda <DIO_u8SetPinDirection+0x1ac>
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	83 30       	cpi	r24, 0x03	; 3
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_u8SetPinDirection+0x156>
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <DIO_u8SetPinDirection+0x1d6>
     f84:	54 c0       	rjmp	.+168    	; 0x102e <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
     f86:	aa e3       	ldi	r26, 0x3A	; 58
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e3       	ldi	r30, 0x3A	; 58
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8SetPinDirection+0x176>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8SetPinDirection+0x172>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	47 c0       	rjmp	.+142    	; 0x103e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_u8SetPinDirection+0x1a0>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_u8SetPinDirection+0x19c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	32 c0       	rjmp	.+100    	; 0x103e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
     fda:	a4 e3       	ldi	r26, 0x34	; 52
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e4 e3       	ldi	r30, 0x34	; 52
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_u8SetPinDirection+0x1ca>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_u8SetPinDirection+0x1c6>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	1d c0       	rjmp	.+58     	; 0x103e <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    1004:	a1 e3       	ldi	r26, 0x31	; 49
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e1 e3       	ldi	r30, 0x31	; 49
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinDirection+0x1f4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinDirection+0x1f0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	08 c0       	rjmp	.+16     	; 0x103e <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	05 c0       	rjmp	.+10     	; 0x103e <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1040:	28 96       	adiw	r28, 0x08	; 8
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	28 97       	sbiw	r28, 0x08	; 8
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	8a 83       	std	Y+2, r24	; 0x02
    1068:	6b 83       	std	Y+3, r22	; 0x03
    106a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    106c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_u8SetPinValue+0x24>
    1074:	f4 c0       	rjmp	.+488    	; 0x125e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	09 f0       	breq	.+2      	; 0x107e <DIO_u8SetPinValue+0x2c>
    107c:	72 c0       	rjmp	.+228    	; 0x1162 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	38 87       	std	Y+8, r19	; 0x08
    1086:	2f 83       	std	Y+7, r18	; 0x07
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	49 f1       	breq	.+82     	; 0x10e4 <DIO_u8SetPinValue+0x92>
    1092:	2f 81       	ldd	r18, Y+7	; 0x07
    1094:	38 85       	ldd	r19, Y+8	; 0x08
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <DIO_u8SetPinValue+0x54>
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_u8SetPinValue+0x6a>
    10a4:	5b c0       	rjmp	.+182    	; 0x115c <DIO_u8SetPinValue+0x10a>
    10a6:	2f 81       	ldd	r18, Y+7	; 0x07
    10a8:	38 85       	ldd	r19, Y+8	; 0x08
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_u8SetPinValue+0xba>
    10b0:	8f 81       	ldd	r24, Y+7	; 0x07
    10b2:	98 85       	ldd	r25, Y+8	; 0x08
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_u8SetPinValue+0xe2>
    10ba:	50 c0       	rjmp	.+160    	; 0x115c <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_u8SetPinValue+0x88>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_u8SetPinValue+0x84>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	bf c0       	rjmp	.+382    	; 0x1262 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinValue+0xb0>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinValue+0xac>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	ab c0       	rjmp	.+342    	; 0x1262 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8SetPinValue+0xd8>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8SetPinValue+0xd4>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	97 c0       	rjmp	.+302    	; 0x1262 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_u8SetPinValue+0x100>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_u8SetPinValue+0xfc>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	83 c0       	rjmp	.+262    	; 0x1262 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	80 c0       	rjmp	.+256    	; 0x1262 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	88 23       	and	r24, r24
    1166:	09 f0       	breq	.+2      	; 0x116a <DIO_u8SetPinValue+0x118>
    1168:	77 c0       	rjmp	.+238    	; 0x1258 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3e 83       	std	Y+6, r19	; 0x06
    1172:	2d 83       	std	Y+5, r18	; 0x05
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	59 f1       	breq	.+86     	; 0x11d4 <DIO_u8SetPinValue+0x182>
    117e:	2d 81       	ldd	r18, Y+5	; 0x05
    1180:	3e 81       	ldd	r19, Y+6	; 0x06
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <DIO_u8SetPinValue+0x140>
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	69 f0       	breq	.+26     	; 0x11aa <DIO_u8SetPinValue+0x158>
    1190:	60 c0       	rjmp	.+192    	; 0x1252 <DIO_u8SetPinValue+0x200>
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	89 f1       	breq	.+98     	; 0x11fe <DIO_u8SetPinValue+0x1ac>
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <DIO_u8SetPinValue+0x156>
    11a6:	40 c0       	rjmp	.+128    	; 0x1228 <DIO_u8SetPinValue+0x1d6>
    11a8:	54 c0       	rjmp	.+168    	; 0x1252 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_u8SetPinValue+0x176>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_u8SetPinValue+0x172>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	47 c0       	rjmp	.+142    	; 0x1262 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    11d4:	a8 e3       	ldi	r26, 0x38	; 56
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e8 e3       	ldi	r30, 0x38	; 56
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8SetPinValue+0x1a0>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_u8SetPinValue+0x19c>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	32 c0       	rjmp	.+100    	; 0x1262 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    11fe:	a5 e3       	ldi	r26, 0x35	; 53
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e3       	ldi	r30, 0x35	; 53
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_u8SetPinValue+0x1ca>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_u8SetPinValue+0x1c6>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	1d c0       	rjmp	.+58     	; 0x1262 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    1228:	a2 e3       	ldi	r26, 0x32	; 50
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e2 e3       	ldi	r30, 0x32	; 50
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8SetPinValue+0x1f4>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8SetPinValue+0x1f0>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
}
    1264:	28 96       	adiw	r28, 0x08	; 8
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_u8TogglePinValue+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_u8TogglePinValue+0x8>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1288:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 30       	cpi	r24, 0x08	; 8
    128e:	08 f0       	brcs	.+2      	; 0x1292 <DIO_u8TogglePinValue+0x1c>
    1290:	72 c0       	rjmp	.+228    	; 0x1376 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3d 83       	std	Y+5, r19	; 0x05
    129a:	2c 83       	std	Y+4, r18	; 0x04
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	49 f1       	breq	.+82     	; 0x12f8 <DIO_u8TogglePinValue+0x82>
    12a6:	2c 81       	ldd	r18, Y+4	; 0x04
    12a8:	3d 81       	ldd	r19, Y+5	; 0x05
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	2c f4       	brge	.+10     	; 0x12ba <DIO_u8TogglePinValue+0x44>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	61 f0       	breq	.+24     	; 0x12d0 <DIO_u8TogglePinValue+0x5a>
    12b8:	5b c0       	rjmp	.+182    	; 0x1370 <DIO_u8TogglePinValue+0xfa>
    12ba:	2c 81       	ldd	r18, Y+4	; 0x04
    12bc:	3d 81       	ldd	r19, Y+5	; 0x05
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	71 f1       	breq	.+92     	; 0x1320 <DIO_u8TogglePinValue+0xaa>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	e9 f1       	breq	.+122    	; 0x1348 <DIO_u8TogglePinValue+0xd2>
    12ce:	50 c0       	rjmp	.+160    	; 0x1370 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    12d0:	ab e3       	ldi	r26, 0x3B	; 59
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	eb e3       	ldi	r30, 0x3B	; 59
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_u8TogglePinValue+0x78>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_u8TogglePinValue+0x74>
    12f2:	84 27       	eor	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	41 c0       	rjmp	.+130    	; 0x137a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    12f8:	a8 e3       	ldi	r26, 0x38	; 56
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e8 e3       	ldi	r30, 0x38	; 56
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8TogglePinValue+0xa0>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_u8TogglePinValue+0x9c>
    131a:	84 27       	eor	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	2d c0       	rjmp	.+90     	; 0x137a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1320:	a5 e3       	ldi	r26, 0x35	; 53
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_u8TogglePinValue+0xc8>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_u8TogglePinValue+0xc4>
    1342:	84 27       	eor	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	19 c0       	rjmp	.+50     	; 0x137a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    1348:	a2 e3       	ldi	r26, 0x32	; 50
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_u8TogglePinValue+0xf0>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_u8TogglePinValue+0xec>
    136a:	84 27       	eor	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	05 c0       	rjmp	.+10     	; 0x137a <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	27 97       	sbiw	r28, 0x07	; 7
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
    13a4:	5d 83       	std	Y+5, r21	; 0x05
    13a6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    13a8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <DIO_u8GetPinValue+0x26>
    13b0:	74 c0       	rjmp	.+232    	; 0x149a <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3f 83       	std	Y+7, r19	; 0x07
    13ba:	2e 83       	std	Y+6, r18	; 0x06
    13bc:	4e 81       	ldd	r20, Y+6	; 0x06
    13be:	5f 81       	ldd	r21, Y+7	; 0x07
    13c0:	41 30       	cpi	r20, 0x01	; 1
    13c2:	51 05       	cpc	r21, r1
    13c4:	59 f1       	breq	.+86     	; 0x141c <DIO_u8GetPinValue+0x90>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	91 05       	cpc	r25, r1
    13ce:	34 f4       	brge	.+12     	; 0x13dc <DIO_u8GetPinValue+0x50>
    13d0:	2e 81       	ldd	r18, Y+6	; 0x06
    13d2:	3f 81       	ldd	r19, Y+7	; 0x07
    13d4:	21 15       	cp	r18, r1
    13d6:	31 05       	cpc	r19, r1
    13d8:	69 f0       	breq	.+26     	; 0x13f4 <DIO_u8GetPinValue+0x68>
    13da:	5c c0       	rjmp	.+184    	; 0x1494 <DIO_u8GetPinValue+0x108>
    13dc:	4e 81       	ldd	r20, Y+6	; 0x06
    13de:	5f 81       	ldd	r21, Y+7	; 0x07
    13e0:	42 30       	cpi	r20, 0x02	; 2
    13e2:	51 05       	cpc	r21, r1
    13e4:	79 f1       	breq	.+94     	; 0x1444 <DIO_u8GetPinValue+0xb8>
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <DIO_u8GetPinValue+0x66>
    13f0:	3d c0       	rjmp	.+122    	; 0x146c <DIO_u8GetPinValue+0xe0>
    13f2:	50 c0       	rjmp	.+160    	; 0x1494 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    13f4:	e9 e3       	ldi	r30, 0x39	; 57
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8GetPinValue+0x80>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8GetPinValue+0x7c>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	ec 81       	ldd	r30, Y+4	; 0x04
    1416:	fd 81       	ldd	r31, Y+5	; 0x05
    1418:	80 83       	st	Z, r24
    141a:	41 c0       	rjmp	.+130    	; 0x149e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    141c:	e6 e3       	ldi	r30, 0x36	; 54
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8GetPinValue+0xa8>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8GetPinValue+0xa4>
    1438:	ca 01       	movw	r24, r20
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	ec 81       	ldd	r30, Y+4	; 0x04
    143e:	fd 81       	ldd	r31, Y+5	; 0x05
    1440:	80 83       	st	Z, r24
    1442:	2d c0       	rjmp	.+90     	; 0x149e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1444:	e3 e3       	ldi	r30, 0x33	; 51
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_u8GetPinValue+0xd0>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_u8GetPinValue+0xcc>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	ec 81       	ldd	r30, Y+4	; 0x04
    1466:	fd 81       	ldd	r31, Y+5	; 0x05
    1468:	80 83       	st	Z, r24
    146a:	19 c0       	rjmp	.+50     	; 0x149e <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    146c:	e0 e3       	ldi	r30, 0x30	; 48
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_u8GetPinValue+0xf8>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_u8GetPinValue+0xf4>
    1488:	ca 01       	movw	r24, r20
    148a:	81 70       	andi	r24, 0x01	; 1
    148c:	ec 81       	ldd	r30, Y+4	; 0x04
    148e:	fd 81       	ldd	r31, Y+5	; 0x05
    1490:	80 83       	st	Z, r24
    1492:	05 c0       	rjmp	.+10     	; 0x149e <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a0:	27 96       	adiw	r28, 0x07	; 7
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_u8SetPortDirection+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <DIO_u8SetPortDirection+0x8>
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    14c4:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3d 83       	std	Y+5, r19	; 0x05
    14ce:	2c 83       	std	Y+4, r18	; 0x04
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	d1 f0       	breq	.+52     	; 0x150e <DIO_u8SetPortDirection+0x5c>
    14da:	2c 81       	ldd	r18, Y+4	; 0x04
    14dc:	3d 81       	ldd	r19, Y+5	; 0x05
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f4       	brge	.+10     	; 0x14ee <DIO_u8SetPortDirection+0x3c>
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	9d 81       	ldd	r25, Y+5	; 0x05
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	61 f0       	breq	.+24     	; 0x1504 <DIO_u8SetPortDirection+0x52>
    14ec:	1f c0       	rjmp	.+62     	; 0x152c <DIO_u8SetPortDirection+0x7a>
    14ee:	2c 81       	ldd	r18, Y+4	; 0x04
    14f0:	3d 81       	ldd	r19, Y+5	; 0x05
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	81 f0       	breq	.+32     	; 0x1518 <DIO_u8SetPortDirection+0x66>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	81 f0       	breq	.+32     	; 0x1522 <DIO_u8SetPortDirection+0x70>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    1504:	ea e3       	ldi	r30, 0x3A	; 58
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	80 83       	st	Z, r24
    150c:	11 c0       	rjmp	.+34     	; 0x1530 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    150e:	e7 e3       	ldi	r30, 0x37	; 55
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	80 83       	st	Z, r24
    1516:	0c c0       	rjmp	.+24     	; 0x1530 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    1518:	e4 e3       	ldi	r30, 0x34	; 52
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	80 83       	st	Z, r24
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	80 83       	st	Z, r24
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <DIO_u8SetPortValue+0x6>
    1548:	00 d0       	rcall	.+0      	; 0x154a <DIO_u8SetPortValue+0x8>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1554:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3d 83       	std	Y+5, r19	; 0x05
    155e:	2c 83       	std	Y+4, r18	; 0x04
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	d1 f0       	breq	.+52     	; 0x159e <DIO_u8SetPortValue+0x5c>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	22 30       	cpi	r18, 0x02	; 2
    1570:	31 05       	cpc	r19, r1
    1572:	2c f4       	brge	.+10     	; 0x157e <DIO_u8SetPortValue+0x3c>
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	61 f0       	breq	.+24     	; 0x1594 <DIO_u8SetPortValue+0x52>
    157c:	1f c0       	rjmp	.+62     	; 0x15bc <DIO_u8SetPortValue+0x7a>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <DIO_u8SetPortValue+0x66>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	81 f0       	breq	.+32     	; 0x15b2 <DIO_u8SetPortValue+0x70>
    1592:	14 c0       	rjmp	.+40     	; 0x15bc <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    1594:	eb e3       	ldi	r30, 0x3B	; 59
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	80 83       	st	Z, r24
    159c:	11 c0       	rjmp	.+34     	; 0x15c0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    159e:	e8 e3       	ldi	r30, 0x38	; 56
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	80 83       	st	Z, r24
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    15a8:	e5 e3       	ldi	r30, 0x35	; 53
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	80 83       	st	Z, r24
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    15b2:	e2 e3       	ldi	r30, 0x32	; 50
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	80 83       	st	Z, r24
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    15da:	78 94       	sei
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    15ea:	f8 94       	cli
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <IR_enCheckState>:
#include "IR_private.h"
#include "IR_interface.h"


IR_REFLECT_STATE_t IR_enCheckState(IR_t *Copy_stSensorData)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <IR_enCheckState+0x6>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <IR_enCheckState+0x8>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
	IR_REFLECT_STATE_t Local_enReflectState;
	uint8 Local_u8PinState;

	DIO_u8GetPinValue(Copy_stSensorData -> Port, Copy_stSensorData -> Pin, &Local_u8PinState);
    1602:	eb 81       	ldd	r30, Y+3	; 0x03
    1604:	fc 81       	ldd	r31, Y+4	; 0x04
    1606:	80 81       	ld	r24, Z
    1608:	eb 81       	ldd	r30, Y+3	; 0x03
    160a:	fc 81       	ldd	r31, Y+4	; 0x04
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	9e 01       	movw	r18, r28
    1610:	2e 5f       	subi	r18, 0xFE	; 254
    1612:	3f 4f       	sbci	r19, 0xFF	; 255
    1614:	69 2f       	mov	r22, r25
    1616:	a9 01       	movw	r20, r18
    1618:	0e 94 c6 09 	call	0x138c	; 0x138c <DIO_u8GetPinValue>

	if(Local_u8PinState == DIO_u8PIN_HIGH)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	11 f4       	brne	.+4      	; 0x1626 <IR_enCheckState+0x34>
	{
		Local_enReflectState = REFLECTED;
    1622:	19 82       	std	Y+1, r1	; 0x01
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <IR_enCheckState+0x3e>
	}
	else if (Local_u8PinState == DIO_u8PIN_LOW)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 23       	and	r24, r24
    162a:	11 f4       	brne	.+4      	; 0x1630 <IR_enCheckState+0x3e>
	{
		Local_enReflectState = NOT_REFLECTED;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enReflectState;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <MOTOR_u8RotateCW>:
#include "MOTOR_private.h"
#include "MOTOR_interface.h"


uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <MOTOR_u8RotateCW+0x6>
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	9b 83       	std	Y+3, r25	; 0x03
    164e:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1650:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	9b 81       	ldd	r25, Y+3	; 0x03
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	a9 f0       	breq	.+42     	; 0x1684 <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_LOW);
    165a:	ea 81       	ldd	r30, Y+2	; 0x02
    165c:	fb 81       	ldd	r31, Y+3	; 0x03
    165e:	80 81       	ld	r24, Z
    1660:	ea 81       	ldd	r30, Y+2	; 0x02
    1662:	fb 81       	ldd	r31, Y+3	; 0x03
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	69 2f       	mov	r22, r25
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    166e:	ea 81       	ldd	r30, Y+2	; 0x02
    1670:	fb 81       	ldd	r31, Y+3	; 0x03
    1672:	80 81       	ld	r24, Z
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	92 81       	ldd	r25, Z+2	; 0x02
    167a:	69 2f       	mov	r22, r25
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <MOTOR_u8RotateCCW>:

uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <MOTOR_u8RotateCCW+0x6>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9b 83       	std	Y+3, r25	; 0x03
    16a4:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    16a6:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	a9 f0       	breq	.+42     	; 0x16da <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_LOW);
    16b0:	ea 81       	ldd	r30, Y+2	; 0x02
    16b2:	fb 81       	ldd	r31, Y+3	; 0x03
    16b4:	80 81       	ld	r24, Z
    16b6:	ea 81       	ldd	r30, Y+2	; 0x02
    16b8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ba:	92 81       	ldd	r25, Z+2	; 0x02
    16bc:	69 2f       	mov	r22, r25
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    16c4:	ea 81       	ldd	r30, Y+2	; 0x02
    16c6:	fb 81       	ldd	r31, Y+3	; 0x03
    16c8:	80 81       	ld	r24, Z
    16ca:	ea 81       	ldd	r30, Y+2	; 0x02
    16cc:	fb 81       	ldd	r31, Y+3	; 0x03
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	69 2f       	mov	r22, r25
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <MOTOR_u8Stop>:

uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pmotortMotorInfo)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <MOTOR_u8Stop+0x6>
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	9b 83       	std	Y+3, r25	; 0x03
    16fa:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    16fc:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	a9 f0       	breq	.+42     	; 0x1730 <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    1706:	ea 81       	ldd	r30, Y+2	; 0x02
    1708:	fb 81       	ldd	r31, Y+3	; 0x03
    170a:	80 81       	ld	r24, Z
    170c:	ea 81       	ldd	r30, Y+2	; 0x02
    170e:	fb 81       	ldd	r31, Y+3	; 0x03
    1710:	92 81       	ldd	r25, Z+2	; 0x02
    1712:	69 2f       	mov	r22, r25
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    171a:	ea 81       	ldd	r30, Y+2	; 0x02
    171c:	fb 81       	ldd	r31, Y+3	; 0x03
    171e:	80 81       	ld	r24, Z
    1720:	ea 81       	ldd	r30, Y+2	; 0x02
    1722:	fb 81       	ldd	r31, Y+3	; 0x03
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	69 2f       	mov	r22, r25
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1730:	82 e0       	ldi	r24, 0x02	; 2
    1732:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    174a:	ea e3       	ldi	r30, 0x3A	; 58
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	8c ef       	ldi	r24, 0xFC	; 252
    1750:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1752:	e7 e3       	ldi	r30, 0x37	; 55
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8f ef       	ldi	r24, 0xFF	; 255
    1758:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    175a:	e4 e3       	ldi	r30, 0x34	; 52
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1762:	e1 e3       	ldi	r30, 0x31	; 49
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	8e eb       	ldi	r24, 0xBE	; 190
    1768:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    176a:	eb e3       	ldi	r30, 0x3B	; 59
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	80 83       	st	Z, r24
	PORTB = PORTB_INITIAL_VALUE;
    1772:	e8 e3       	ldi	r30, 0x38	; 56
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1778:	e5 e3       	ldi	r30, 0x35	; 53
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    177e:	e2 e3       	ldi	r30, 0x32	; 50
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 83       	st	Z, r24
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <main>:
static uint8 Main_u8CarDirection;
static uint8 Main_u8MotorSpeed = 1u;

/*It is the main*/
void main(void)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <main+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <main+0x8>
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	/*Initialize needed peripherals*/
	PORT_voidInit();
    179a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <PORT_voidInit>
	USART_voidInit();
    179e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <USART_voidInit>

	/*Enable Global Interrupt*/
	GIE_voidEnable();
    17a2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <GIE_voidEnable>

	/*Initialize Timer 0*/
	TIMER0_2_CFG_t Local_stTimer0;
	Local_stTimer0.ClkSelect = TIMER0_u8SYS_CLK_BY_8;
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	89 83       	std	Y+1, r24	; 0x01
	Local_stTimer0.OCMode = OC_DISCONNECTED;
    17aa:	1b 82       	std	Y+3, r1	; 0x03
	Local_stTimer0.WGM = CTC;
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_u8Init(&Local_stTimer0);
    17b0:	ce 01       	movw	r24, r28
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <TIMER0_u8Init>
	TIMER0_voidSetCompValue(250);
    17b8:	8a ef       	ldi	r24, 0xFA	; 250
    17ba:	0e 94 28 15 	call	0x2a50	; 0x2a50 <TIMER0_voidSetCompValue>
	TIMERS_u8SetCallBack(TIMER0_COMP, Main_voidTimer0ISR);
    17be:	2a ee       	ldi	r18, 0xEA	; 234
    17c0:	3c e0       	ldi	r19, 0x0C	; 12
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	b9 01       	movw	r22, r18
    17c6:	0e 94 03 15 	call	0x2a06	; 0x2a06 <TIMERS_u8SetCallBack>
	TIMERS_u8IntDisable(TIMER0_COMP);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	0e 94 39 14 	call	0x2872	; 0x2872 <TIMERS_u8IntDisable>

	/*Initialize motors' pins*/
	Main_stMotor1.Pin1 = DIO_u8PIN0;
    17d0:	10 92 9d 01 	sts	0x019D, r1
	Main_stMotor1.Pin2 = DIO_u8PIN1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	80 93 9e 01 	sts	0x019E, r24
	Main_stMotor1.Port = DIO_u8PORTC;
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	80 93 9c 01 	sts	0x019C, r24

	Main_stMotor2.Pin1 = DIO_u8PIN2;
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	80 93 9a 01 	sts	0x019A, r24
	Main_stMotor2.Pin2 = DIO_u8PIN3;
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	80 93 9b 01 	sts	0x019B, r24
	Main_stMotor2.Port = DIO_u8PORTC;
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	80 93 99 01 	sts	0x0199, r24

	/*Super Loop*/
	while(1)
	{
		/*Receive Character message from usart with asynchronous function*/
		USART_u8ReceiveBufferAsynch(&Main_u8ReceivedData, 1, Main_voidReceiveNotificFunc);
    17f2:	8a e6       	ldi	r24, 0x6A	; 106
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	2a e3       	ldi	r18, 0x3A	; 58
    17f8:	3c e0       	ldi	r19, 0x0C	; 12
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	a9 01       	movw	r20, r18
    17fe:	0e 94 c8 19 	call	0x3390	; 0x3390 <USART_u8ReceiveBufferAsynch>

		/*Switch the char which received then take its corresponding order*/
		switch(Main_u8ReceivedData)
    1802:	80 91 6a 01 	lds	r24, 0x016A
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3d 83       	std	Y+5, r19	; 0x05
    180c:	2c 83       	std	Y+4, r18	; 0x04
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	9d 81       	ldd	r25, Y+5	; 0x05
    1812:	86 34       	cpi	r24, 0x46	; 70
    1814:	91 05       	cpc	r25, r1
    1816:	b1 f0       	breq	.+44     	; 0x1844 <main+0xb8>
    1818:	2c 81       	ldd	r18, Y+4	; 0x04
    181a:	3d 81       	ldd	r19, Y+5	; 0x05
    181c:	27 34       	cpi	r18, 0x47	; 71
    181e:	31 05       	cpc	r19, r1
    1820:	34 f4       	brge	.+12     	; 0x182e <main+0xa2>
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	82 34       	cpi	r24, 0x42	; 66
    1828:	91 05       	cpc	r25, r1
    182a:	91 f0       	breq	.+36     	; 0x1850 <main+0xc4>
    182c:	e2 cf       	rjmp	.-60     	; 0x17f2 <main+0x66>
    182e:	2c 81       	ldd	r18, Y+4	; 0x04
    1830:	3d 81       	ldd	r19, Y+5	; 0x05
    1832:	2c 34       	cpi	r18, 0x4C	; 76
    1834:	31 05       	cpc	r19, r1
    1836:	c1 f0       	breq	.+48     	; 0x1868 <main+0xdc>
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	9d 81       	ldd	r25, Y+5	; 0x05
    183c:	82 35       	cpi	r24, 0x52	; 82
    183e:	91 05       	cpc	r25, r1
    1840:	69 f0       	breq	.+26     	; 0x185c <main+0xd0>
    1842:	d7 cf       	rjmp	.-82     	; 0x17f2 <main+0x66>
		{
		case 'F':
			Main_voidMove('F', 50);
    1844:	86 e4       	ldi	r24, 0x46	; 70
    1846:	62 e3       	ldi	r22, 0x32	; 50
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	0e 94 41 0c 	call	0x1882	; 0x1882 <Main_voidMove>
    184e:	d1 cf       	rjmp	.-94     	; 0x17f2 <main+0x66>
			break;

		case 'B':
			Main_voidMove('B', 50);
    1850:	82 e4       	ldi	r24, 0x42	; 66
    1852:	62 e3       	ldi	r22, 0x32	; 50
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	0e 94 41 0c 	call	0x1882	; 0x1882 <Main_voidMove>
    185a:	cb cf       	rjmp	.-106    	; 0x17f2 <main+0x66>
			break;

		case 'R':
			Main_voidMove('R', 50);
    185c:	82 e5       	ldi	r24, 0x52	; 82
    185e:	62 e3       	ldi	r22, 0x32	; 50
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	0e 94 41 0c 	call	0x1882	; 0x1882 <Main_voidMove>
    1866:	c5 cf       	rjmp	.-118    	; 0x17f2 <main+0x66>
			break;

		case 'L':
			Main_voidMove('L', 50);
    1868:	8c e4       	ldi	r24, 0x4C	; 76
    186a:	62 e3       	ldi	r22, 0x32	; 50
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	0e 94 41 0c 	call	0x1882	; 0x1882 <Main_voidMove>
    1872:	bf cf       	rjmp	.-130    	; 0x17f2 <main+0x66>

00001874 <Main_voidReceiveNotificFunc>:



/*USART Receive ISR*/
void Main_voidReceiveNotificFunc(void)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	/*Do nothing*/
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <Main_voidMove>:

/*Function to move the car in all directions*/
void Main_voidMove(uint8 Copy_u8Direction, uint16 Copy_u16Duration)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	61 97       	sbiw	r28, 0x11	; 17
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	8f 87       	std	Y+15, r24	; 0x0f
    1898:	79 8b       	std	Y+17, r23	; 0x11
    189a:	68 8b       	std	Y+16, r22	; 0x10
	/*Send the direction to the timer ISR*/
	Main_u8CarDirection = Copy_u8Direction;
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	80 93 6c 01 	sts	0x016C, r24

	/*Enable the timer*/
	TIMERS_u8IntEnable(TIMER0_COMP);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	0e 94 b2 13 	call	0x2764	; 0x2764 <TIMERS_u8IntEnable>

	/*Delay for the step time*/
	_delay_ms(Copy_u16Duration);
    18a8:	88 89       	ldd	r24, Y+16	; 0x10
    18aa:	99 89       	ldd	r25, Y+17	; 0x11
    18ac:	cc 01       	movw	r24, r24
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8b 87       	std	Y+11, r24	; 0x0b
    18c0:	9c 87       	std	Y+12, r25	; 0x0c
    18c2:	ad 87       	std	Y+13, r26	; 0x0d
    18c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a ef       	ldi	r20, 0xFA	; 250
    18d4:	54 e4       	ldi	r21, 0x44	; 68
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8f 83       	std	Y+7, r24	; 0x07
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	a9 87       	std	Y+9, r26	; 0x09
    18e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <Main_voidMove+0x86>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <Main_voidMove+0x104>
	else if (__tmp > 65535)
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <Main_voidMove+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <Main_voidMove+0xe6>
    194a:	88 ec       	ldi	r24, 0xC8	; 200
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <Main_voidMove+0xd4>
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <Main_voidMove+0xc8>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <Main_voidMove+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <Main_voidMove+0x110>
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01

	/*Stop the vehicle*/
	Main_voidStop();
    199a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <Main_voidStop>
}
    199e:	61 96       	adiw	r28, 0x11	; 17
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <Main_voidStop>:

void Main_voidStop(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	/*Disable the timer*/
	TIMERS_u8IntDisable(TIMER0_COMP);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	0e 94 39 14 	call	0x2872	; 0x2872 <TIMERS_u8IntDisable>

	/*Stop the motors*/
	MOTOR_u8Stop(&Main_stMotor1);
    19be:	8c e9       	ldi	r24, 0x9C	; 156
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <MOTOR_u8Stop>
	MOTOR_u8Stop(&Main_stMotor2);
    19c6:	89 e9       	ldi	r24, 0x99	; 153
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 76 0b 	call	0x16ec	; 0x16ec <MOTOR_u8Stop>
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <Main_voidTimer0ISR>:

/*Timer 0 ISR*/
void Main_voidTimer0ISR()
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	/*Define variables*/
	static uint8 Local_u8Counter = 0u;

	/*Increment the counter of entering the ISR*/
	Local_u8Counter++;
    19dc:	80 91 6b 01 	lds	r24, 0x016B
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	80 93 6b 01 	sts	0x016B, r24

	/*Move the car according to the needed speed and direction*/
	if(Local_u8Counter == Main_u8MotorSpeed)
    19e6:	90 91 6b 01 	lds	r25, 0x016B
    19ea:	80 91 68 01 	lds	r24, 0x0168
    19ee:	98 17       	cp	r25, r24
    19f0:	a1 f5       	brne	.+104    	; 0x1a5a <Main_voidTimer0ISR+0x86>
	{
		if(Main_u8CarDirection == 'F')
    19f2:	80 91 6c 01 	lds	r24, 0x016C
    19f6:	86 34       	cpi	r24, 0x46	; 70
    19f8:	49 f4       	brne	.+18     	; 0x1a0c <Main_voidTimer0ISR+0x38>
		{
			MOTOR_u8RotateCCW(&Main_stMotor1);
    19fa:	8c e9       	ldi	r24, 0x9C	; 156
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	0e 94 4b 0b 	call	0x1696	; 0x1696 <MOTOR_u8RotateCCW>
			MOTOR_u8RotateCCW(&Main_stMotor2);
    1a02:	89 e9       	ldi	r24, 0x99	; 153
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 4b 0b 	call	0x1696	; 0x1696 <MOTOR_u8RotateCCW>
    1a0a:	35 c0       	rjmp	.+106    	; 0x1a76 <Main_voidTimer0ISR+0xa2>
		}
		else if(Main_u8CarDirection == 'B')
    1a0c:	80 91 6c 01 	lds	r24, 0x016C
    1a10:	82 34       	cpi	r24, 0x42	; 66
    1a12:	49 f4       	brne	.+18     	; 0x1a26 <Main_voidTimer0ISR+0x52>
		{
			MOTOR_u8RotateCW(&Main_stMotor1);
    1a14:	8c e9       	ldi	r24, 0x9C	; 156
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	0e 94 20 0b 	call	0x1640	; 0x1640 <MOTOR_u8RotateCW>
			MOTOR_u8RotateCW(&Main_stMotor2);
    1a1c:	89 e9       	ldi	r24, 0x99	; 153
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 20 0b 	call	0x1640	; 0x1640 <MOTOR_u8RotateCW>
    1a24:	28 c0       	rjmp	.+80     	; 0x1a76 <Main_voidTimer0ISR+0xa2>
		}
		else if(Main_u8CarDirection == 'R')
    1a26:	80 91 6c 01 	lds	r24, 0x016C
    1a2a:	82 35       	cpi	r24, 0x52	; 82
    1a2c:	49 f4       	brne	.+18     	; 0x1a40 <Main_voidTimer0ISR+0x6c>
		{
			MOTOR_u8RotateCW(&Main_stMotor2);
    1a2e:	89 e9       	ldi	r24, 0x99	; 153
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	0e 94 20 0b 	call	0x1640	; 0x1640 <MOTOR_u8RotateCW>
			MOTOR_u8RotateCCW(&Main_stMotor1);
    1a36:	8c e9       	ldi	r24, 0x9C	; 156
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <MOTOR_u8RotateCCW>
    1a3e:	1b c0       	rjmp	.+54     	; 0x1a76 <Main_voidTimer0ISR+0xa2>
		}
		else if(Main_u8CarDirection == 'L')
    1a40:	80 91 6c 01 	lds	r24, 0x016C
    1a44:	8c 34       	cpi	r24, 0x4C	; 76
    1a46:	b9 f4       	brne	.+46     	; 0x1a76 <Main_voidTimer0ISR+0xa2>
		{
			MOTOR_u8RotateCCW(&Main_stMotor2);
    1a48:	89 e9       	ldi	r24, 0x99	; 153
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <MOTOR_u8RotateCCW>
			MOTOR_u8RotateCW(&Main_stMotor1);
    1a50:	8c e9       	ldi	r24, 0x9C	; 156
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	0e 94 20 0b 	call	0x1640	; 0x1640 <MOTOR_u8RotateCW>
    1a58:	0e c0       	rjmp	.+28     	; 0x1a76 <Main_voidTimer0ISR+0xa2>
		}
	}

	/*Every period time stop the motors and zero the counter*/
	else if(Local_u8Counter == 20u)
    1a5a:	80 91 6b 01 	lds	r24, 0x016B
    1a5e:	84 31       	cpi	r24, 0x14	; 20
    1a60:	51 f4       	brne	.+20     	; 0x1a76 <Main_voidTimer0ISR+0xa2>
	{
		MOTOR_u8Stop(&Main_stMotor1);
    1a62:	8c e9       	ldi	r24, 0x9C	; 156
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	0e 94 76 0b 	call	0x16ec	; 0x16ec <MOTOR_u8Stop>
		MOTOR_u8Stop(&Main_stMotor2);
    1a6a:	89 e9       	ldi	r24, 0x99	; 153
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <MOTOR_u8Stop>
		Local_u8Counter = 0u;
    1a72:	10 92 6b 01 	sts	0x016B, r1
	}
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <TIMER0_u8Init>:
static void (* TIMERS_pvCallBackFuncArr[8])(void);

static uint8 TIMERS_u8StateArr[3] = {IDLE};

uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	27 97       	sbiw	r28, 0x07	; 7
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	9b 83       	std	Y+3, r25	; 0x03
    1a92:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1a94:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <TIMER0_u8Init+0x24>
    1a9e:	de c0       	rjmp	.+444    	; 0x1c5c <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    1aa0:	80 91 6d 01 	lds	r24, 0x016D
    1aa4:	88 23       	and	r24, r24
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <TIMER0_u8Init+0x2e>
    1aa8:	d6 c0       	rjmp	.+428    	; 0x1c56 <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	80 93 6d 01 	sts	0x016D, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab4:	81 81       	ldd	r24, Z+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3f 83       	std	Y+7, r19	; 0x07
    1abc:	2e 83       	std	Y+6, r18	; 0x06
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	21 f1       	breq	.+72     	; 0x1b10 <TIMER0_u8Init+0x94>
    1ac8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aca:	3f 81       	ldd	r19, Y+7	; 0x07
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <TIMER0_u8Init+0x60>
    1ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	61 f0       	breq	.+24     	; 0x1af2 <TIMER0_u8Init+0x76>
    1ada:	46 c0       	rjmp	.+140    	; 0x1b68 <TIMER0_u8Init+0xec>
    1adc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ade:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	21 f1       	breq	.+72     	; 0x1b2e <TIMER0_u8Init+0xb2>
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	91 05       	cpc	r25, r1
    1aee:	71 f1       	breq	.+92     	; 0x1b4c <TIMER0_u8Init+0xd0>
    1af0:	3b c0       	rjmp	.+118    	; 0x1b68 <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1af2:	a3 e5       	ldi	r26, 0x53	; 83
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e3 e5       	ldi	r30, 0x53	; 83
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 7b       	andi	r24, 0xBF	; 191
    1afe:	8c 93       	st	X, r24
    1b00:	a3 e5       	ldi	r26, 0x53	; 83
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e3 e5       	ldi	r30, 0x53	; 83
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	87 7f       	andi	r24, 0xF7	; 247
    1b0c:	8c 93       	st	X, r24
    1b0e:	2c c0       	rjmp	.+88     	; 0x1b68 <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1b10:	a3 e5       	ldi	r26, 0x53	; 83
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e3 e5       	ldi	r30, 0x53	; 83
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 64       	ori	r24, 0x40	; 64
    1b1c:	8c 93       	st	X, r24
    1b1e:	a3 e5       	ldi	r26, 0x53	; 83
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e3 e5       	ldi	r30, 0x53	; 83
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	87 7f       	andi	r24, 0xF7	; 247
    1b2a:	8c 93       	st	X, r24
    1b2c:	1d c0       	rjmp	.+58     	; 0x1b68 <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1b2e:	a3 e5       	ldi	r26, 0x53	; 83
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e3 e5       	ldi	r30, 0x53	; 83
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8f 7b       	andi	r24, 0xBF	; 191
    1b3a:	8c 93       	st	X, r24
    1b3c:	a3 e5       	ldi	r26, 0x53	; 83
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e3 e5       	ldi	r30, 0x53	; 83
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	88 60       	ori	r24, 0x08	; 8
    1b48:	8c 93       	st	X, r24
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1b4c:	a3 e5       	ldi	r26, 0x53	; 83
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e3 e5       	ldi	r30, 0x53	; 83
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	8c 93       	st	X, r24
    1b5a:	a3 e5       	ldi	r26, 0x53	; 83
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e3 e5       	ldi	r30, 0x53	; 83
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	88 60       	ori	r24, 0x08	; 8
    1b66:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    1b68:	a3 e5       	ldi	r26, 0x53	; 83
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e3 e5       	ldi	r30, 0x53	; 83
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7c       	andi	r24, 0xCF	; 207
    1b74:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    1b76:	ea 81       	ldd	r30, Y+2	; 0x02
    1b78:	fb 81       	ldd	r31, Y+3	; 0x03
    1b7a:	81 81       	ldd	r24, Z+1	; 0x01
    1b7c:	88 23       	and	r24, r24
    1b7e:	29 f0       	breq	.+10     	; 0x1b8a <TIMER0_u8Init+0x10e>
    1b80:	ea 81       	ldd	r30, Y+2	; 0x02
    1b82:	fb 81       	ldd	r31, Y+3	; 0x03
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	e1 f4       	brne	.+56     	; 0x1bc2 <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    1b8a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b8c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	84 30       	cpi	r24, 0x04	; 4
    1b92:	a0 f4       	brcc	.+40     	; 0x1bbc <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    1b94:	a3 e5       	ldi	r26, 0x53	; 83
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e3 e5       	ldi	r30, 0x53	; 83
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	82 95       	swap	r24
    1bac:	92 95       	swap	r25
    1bae:	90 7f       	andi	r25, 0xF0	; 240
    1bb0:	98 27       	eor	r25, r24
    1bb2:	80 7f       	andi	r24, 0xF0	; 240
    1bb4:	98 27       	eor	r25, r24
    1bb6:	82 2b       	or	r24, r18
    1bb8:	8c 93       	st	X, r24
    1bba:	3b c0       	rjmp	.+118    	; 0x1c32 <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	38 c0       	rjmp	.+112    	; 0x1c32 <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    1bc2:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc4:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc6:	81 81       	ldd	r24, Z+1	; 0x01
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	29 f0       	breq	.+10     	; 0x1bd6 <TIMER0_u8Init+0x15a>
    1bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    1bce:	fb 81       	ldd	r31, Y+3	; 0x03
    1bd0:	81 81       	ldd	r24, Z+1	; 0x01
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	71 f5       	brne	.+92     	; 0x1c32 <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    1bd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3d 83       	std	Y+5, r19	; 0x05
    1be2:	2c 83       	std	Y+4, r18	; 0x04
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	91 05       	cpc	r25, r1
    1bec:	81 f0       	breq	.+32     	; 0x1c0e <TIMER0_u8Init+0x192>
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	25 30       	cpi	r18, 0x05	; 5
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	99 f0       	breq	.+38     	; 0x1c1e <TIMER0_u8Init+0x1a2>
    1bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	b9 f4       	brne	.+46     	; 0x1c2e <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    1c00:	e3 e5       	ldi	r30, 0x53	; 83
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	a3 e5       	ldi	r26, 0x53	; 83
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	8c 91       	ld	r24, X
    1c0a:	80 83       	st	Z, r24
    1c0c:	12 c0       	rjmp	.+36     	; 0x1c32 <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    1c0e:	a3 e5       	ldi	r26, 0x53	; 83
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e3 e5       	ldi	r30, 0x53	; 83
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 62       	ori	r24, 0x20	; 32
    1c1a:	8c 93       	st	X, r24
    1c1c:	0a c0       	rjmp	.+20     	; 0x1c32 <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    1c1e:	a3 e5       	ldi	r26, 0x53	; 83
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e3 e5       	ldi	r30, 0x53	; 83
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 63       	ori	r24, 0x30	; 48
    1c2a:	8c 93       	st	X, r24
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    1c32:	a3 e5       	ldi	r26, 0x53	; 83
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e3 e5       	ldi	r30, 0x53	; 83
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 7f       	andi	r24, 0xF8	; 248
    1c3e:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    1c40:	a3 e5       	ldi	r26, 0x53	; 83
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e3 e5       	ldi	r30, 0x53	; 83
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	90 81       	ld	r25, Z
    1c4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4e:	80 81       	ld	r24, Z
    1c50:	89 2b       	or	r24, r25
    1c52:	8c 93       	st	X, r24
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1c56:	84 e0       	ldi	r24, 0x04	; 4
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	27 96       	adiw	r28, 0x07	; 7
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <TIMER1_u8Init>:
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	29 97       	sbiw	r28, 0x09	; 9
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	9b 83       	std	Y+3, r25	; 0x03
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1c8c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <TIMER1_u8Init+0x24>
    1c96:	71 c1       	rjmp	.+738    	; 0x1f7a <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    1c98:	80 91 6e 01 	lds	r24, 0x016E
    1c9c:	88 23       	and	r24, r24
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <TIMER1_u8Init+0x2e>
    1ca0:	69 c1       	rjmp	.+722    	; 0x1f74 <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	80 93 6e 01 	sts	0x016E, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    1ca8:	af e4       	ldi	r26, 0x4F	; 79
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ef e4       	ldi	r30, 0x4F	; 79
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8c 7f       	andi	r24, 0xFC	; 252
    1cb4:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    1cb6:	ae e4       	ldi	r26, 0x4E	; 78
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	87 7e       	andi	r24, 0xE7	; 231
    1cc2:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    1cc4:	af e4       	ldi	r26, 0x4F	; 79
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ef e4       	ldi	r30, 0x4F	; 79
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	98 2f       	mov	r25, r24
    1cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd4:	81 81       	ldd	r24, Z+1	; 0x01
    1cd6:	83 70       	andi	r24, 0x03	; 3
    1cd8:	89 2b       	or	r24, r25
    1cda:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    1cdc:	ae e4       	ldi	r26, 0x4E	; 78
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ee e4       	ldi	r30, 0x4E	; 78
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cea:	fb 81       	ldd	r31, Y+3	; 0x03
    1cec:	81 81       	ldd	r24, Z+1	; 0x01
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	83 70       	andi	r24, 0x03	; 3
    1cf8:	90 70       	andi	r25, 0x00	; 0
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	82 2b       	or	r24, r18
    1d08:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d0e:	81 81       	ldd	r24, Z+1	; 0x01
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	39 87       	std	Y+9, r19	; 0x09
    1d16:	28 87       	std	Y+8, r18	; 0x08
    1d18:	88 85       	ldd	r24, Y+8	; 0x08
    1d1a:	99 85       	ldd	r25, Y+9	; 0x09
    1d1c:	8c 30       	cpi	r24, 0x0C	; 12
    1d1e:	91 05       	cpc	r25, r1
    1d20:	b4 f4       	brge	.+44     	; 0x1d4e <TIMER1_u8Init+0xda>
    1d22:	28 85       	ldd	r18, Y+8	; 0x08
    1d24:	39 85       	ldd	r19, Y+9	; 0x09
    1d26:	25 30       	cpi	r18, 0x05	; 5
    1d28:	31 05       	cpc	r19, r1
    1d2a:	0c f0       	brlt	.+2      	; 0x1d2e <TIMER1_u8Init+0xba>
    1d2c:	70 c0       	rjmp	.+224    	; 0x1e0e <TIMER1_u8Init+0x19a>
    1d2e:	88 85       	ldd	r24, Y+8	; 0x08
    1d30:	99 85       	ldd	r25, Y+9	; 0x09
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	91 05       	cpc	r25, r1
    1d36:	c4 f4       	brge	.+48     	; 0x1d68 <TIMER1_u8Init+0xf4>
    1d38:	28 85       	ldd	r18, Y+8	; 0x08
    1d3a:	39 85       	ldd	r19, Y+9	; 0x09
    1d3c:	21 30       	cpi	r18, 0x01	; 1
    1d3e:	31 05       	cpc	r19, r1
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <TIMER1_u8Init+0xd0>
    1d42:	65 c0       	rjmp	.+202    	; 0x1e0e <TIMER1_u8Init+0x19a>
    1d44:	88 85       	ldd	r24, Y+8	; 0x08
    1d46:	99 85       	ldd	r25, Y+9	; 0x09
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	71 f0       	breq	.+28     	; 0x1d68 <TIMER1_u8Init+0xf4>
    1d4c:	ff c0       	rjmp	.+510    	; 0x1f4c <TIMER1_u8Init+0x2d8>
    1d4e:	28 85       	ldd	r18, Y+8	; 0x08
    1d50:	39 85       	ldd	r19, Y+9	; 0x09
    1d52:	2c 30       	cpi	r18, 0x0C	; 12
    1d54:	31 05       	cpc	r19, r1
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <TIMER1_u8Init+0xf4>
    1d58:	88 85       	ldd	r24, Y+8	; 0x08
    1d5a:	99 85       	ldd	r25, Y+9	; 0x09
    1d5c:	0e 97       	sbiw	r24, 0x0e	; 14
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	91 05       	cpc	r25, r1
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <TIMER1_u8Init+0xf2>
    1d64:	f3 c0       	rjmp	.+486    	; 0x1f4c <TIMER1_u8Init+0x2d8>
    1d66:	53 c0       	rjmp	.+166    	; 0x1e0e <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    1d68:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	f0 f4       	brcc	.+60     	; 0x1dae <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    1d72:	af e4       	ldi	r26, 0x4F	; 79
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	ef e4       	ldi	r30, 0x4F	; 79
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 73       	andi	r24, 0x3F	; 63
    1d7e:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    1d80:	af e4       	ldi	r26, 0x4F	; 79
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ef e4       	ldi	r30, 0x4F	; 79
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	00 24       	eor	r0, r0
    1d98:	96 95       	lsr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	07 94       	ror	r0
    1d9e:	96 95       	lsr	r25
    1da0:	87 95       	ror	r24
    1da2:	07 94       	ror	r0
    1da4:	98 2f       	mov	r25, r24
    1da6:	80 2d       	mov	r24, r0
    1da8:	82 2b       	or	r24, r18
    1daa:	8c 93       	st	X, r24
    1dac:	07 c0       	rjmp	.+14     	; 0x1dbc <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    1dae:	ea 81       	ldd	r30, Y+2	; 0x02
    1db0:	fb 81       	ldd	r31, Y+3	; 0x03
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	86 30       	cpi	r24, 0x06	; 6
    1db6:	11 f0       	breq	.+4      	; 0x1dbc <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    1dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1dc0:	83 81       	ldd	r24, Z+3	; 0x03
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	d8 f4       	brcc	.+54     	; 0x1dfc <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    1dc6:	af e4       	ldi	r26, 0x4F	; 79
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ef e4       	ldi	r30, 0x4F	; 79
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 7c       	andi	r24, 0xCF	; 207
    1dd2:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    1dd4:	af e4       	ldi	r26, 0x4F	; 79
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	ef e4       	ldi	r30, 0x4F	; 79
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	28 2f       	mov	r18, r24
    1de0:	ea 81       	ldd	r30, Y+2	; 0x02
    1de2:	fb 81       	ldd	r31, Y+3	; 0x03
    1de4:	83 81       	ldd	r24, Z+3	; 0x03
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	82 95       	swap	r24
    1dec:	92 95       	swap	r25
    1dee:	90 7f       	andi	r25, 0xF0	; 240
    1df0:	98 27       	eor	r25, r24
    1df2:	80 7f       	andi	r24, 0xF0	; 240
    1df4:	98 27       	eor	r25, r24
    1df6:	82 2b       	or	r24, r18
    1df8:	8c 93       	st	X, r24
    1dfa:	aa c0       	rjmp	.+340    	; 0x1f50 <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    1dfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1e00:	83 81       	ldd	r24, Z+3	; 0x03
    1e02:	86 30       	cpi	r24, 0x06	; 6
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <TIMER1_u8Init+0x194>
    1e06:	a4 c0       	rjmp	.+328    	; 0x1f50 <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	a1 c0       	rjmp	.+322    	; 0x1f50 <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    1e0e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e10:	fb 81       	ldd	r31, Y+3	; 0x03
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3f 83       	std	Y+7, r19	; 0x07
    1e1a:	2e 83       	std	Y+6, r18	; 0x06
    1e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	91 05       	cpc	r25, r1
    1e24:	19 f1       	breq	.+70     	; 0x1e6c <TIMER1_u8Init+0x1f8>
    1e26:	2e 81       	ldd	r18, Y+6	; 0x06
    1e28:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2a:	25 30       	cpi	r18, 0x05	; 5
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <TIMER1_u8Init+0x1c6>
    1e30:	8e 81       	ldd	r24, Y+6	; 0x06
    1e32:	9f 81       	ldd	r25, Y+7	; 0x07
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <TIMER1_u8Init+0x1dc>
    1e38:	37 c0       	rjmp	.+110    	; 0x1ea8 <TIMER1_u8Init+0x234>
    1e3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e3e:	25 30       	cpi	r18, 0x05	; 5
    1e40:	31 05       	cpc	r19, r1
    1e42:	19 f1       	breq	.+70     	; 0x1e8a <TIMER1_u8Init+0x216>
    1e44:	8e 81       	ldd	r24, Y+6	; 0x06
    1e46:	9f 81       	ldd	r25, Y+7	; 0x07
    1e48:	86 30       	cpi	r24, 0x06	; 6
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	79 f1       	breq	.+94     	; 0x1eac <TIMER1_u8Init+0x238>
    1e4e:	2c c0       	rjmp	.+88     	; 0x1ea8 <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    1e50:	af e4       	ldi	r26, 0x4F	; 79
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	ef e4       	ldi	r30, 0x4F	; 79
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8f 73       	andi	r24, 0x3F	; 63
    1e5c:	8c 93       	st	X, r24
    1e5e:	af e4       	ldi	r26, 0x4F	; 79
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	ef e4       	ldi	r30, 0x4F	; 79
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	8c 93       	st	X, r24
    1e6a:	20 c0       	rjmp	.+64     	; 0x1eac <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    1e6c:	af e4       	ldi	r26, 0x4F	; 79
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	ef e4       	ldi	r30, 0x4F	; 79
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8f 73       	andi	r24, 0x3F	; 63
    1e78:	8c 93       	st	X, r24
    1e7a:	af e4       	ldi	r26, 0x4F	; 79
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	ef e4       	ldi	r30, 0x4F	; 79
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	80 68       	ori	r24, 0x80	; 128
    1e86:	8c 93       	st	X, r24
    1e88:	11 c0       	rjmp	.+34     	; 0x1eac <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    1e8a:	af e4       	ldi	r26, 0x4F	; 79
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	ef e4       	ldi	r30, 0x4F	; 79
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8f 73       	andi	r24, 0x3F	; 63
    1e96:	8c 93       	st	X, r24
    1e98:	af e4       	ldi	r26, 0x4F	; 79
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	ef e4       	ldi	r30, 0x4F	; 79
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 6c       	ori	r24, 0xC0	; 192
    1ea4:	8c 93       	st	X, r24
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    1eac:	ea 81       	ldd	r30, Y+2	; 0x02
    1eae:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb0:	83 81       	ldd	r24, Z+3	; 0x03
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	3d 83       	std	Y+5, r19	; 0x05
    1eb8:	2c 83       	std	Y+4, r18	; 0x04
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	84 30       	cpi	r24, 0x04	; 4
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	19 f1       	breq	.+70     	; 0x1f0a <TIMER1_u8Init+0x296>
    1ec4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec8:	25 30       	cpi	r18, 0x05	; 5
    1eca:	31 05       	cpc	r19, r1
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <TIMER1_u8Init+0x264>
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	61 f0       	breq	.+24     	; 0x1eee <TIMER1_u8Init+0x27a>
    1ed6:	37 c0       	rjmp	.+110    	; 0x1f46 <TIMER1_u8Init+0x2d2>
    1ed8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eda:	3d 81       	ldd	r19, Y+5	; 0x05
    1edc:	25 30       	cpi	r18, 0x05	; 5
    1ede:	31 05       	cpc	r19, r1
    1ee0:	19 f1       	breq	.+70     	; 0x1f28 <TIMER1_u8Init+0x2b4>
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	86 30       	cpi	r24, 0x06	; 6
    1ee8:	91 05       	cpc	r25, r1
    1eea:	91 f1       	breq	.+100    	; 0x1f50 <TIMER1_u8Init+0x2dc>
    1eec:	2c c0       	rjmp	.+88     	; 0x1f46 <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    1eee:	af e4       	ldi	r26, 0x4F	; 79
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ef e4       	ldi	r30, 0x4F	; 79
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 7c       	andi	r24, 0xCF	; 207
    1efa:	8c 93       	st	X, r24
    1efc:	af e4       	ldi	r26, 0x4F	; 79
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	ef e4       	ldi	r30, 0x4F	; 79
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8c 93       	st	X, r24
    1f08:	23 c0       	rjmp	.+70     	; 0x1f50 <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    1f0a:	af e4       	ldi	r26, 0x4F	; 79
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	ef e4       	ldi	r30, 0x4F	; 79
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8f 7c       	andi	r24, 0xCF	; 207
    1f16:	8c 93       	st	X, r24
    1f18:	af e4       	ldi	r26, 0x4F	; 79
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	ef e4       	ldi	r30, 0x4F	; 79
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	80 62       	ori	r24, 0x20	; 32
    1f24:	8c 93       	st	X, r24
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    1f28:	af e4       	ldi	r26, 0x4F	; 79
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ef e4       	ldi	r30, 0x4F	; 79
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 7c       	andi	r24, 0xCF	; 207
    1f34:	8c 93       	st	X, r24
    1f36:	af e4       	ldi	r26, 0x4F	; 79
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	ef e4       	ldi	r30, 0x4F	; 79
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 63       	ori	r24, 0x30	; 48
    1f42:	8c 93       	st	X, r24
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    1f50:	ae e4       	ldi	r26, 0x4E	; 78
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ee e4       	ldi	r30, 0x4E	; 78
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 7f       	andi	r24, 0xF8	; 248
    1f5c:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    1f5e:	ae e4       	ldi	r26, 0x4E	; 78
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	ee e4       	ldi	r30, 0x4E	; 78
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	90 81       	ld	r25, Z
    1f68:	ea 81       	ldd	r30, Y+2	; 0x02
    1f6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f6c:	80 81       	ld	r24, Z
    1f6e:	89 2b       	or	r24, r25
    1f70:	8c 93       	st	X, r24
    1f72:	05 c0       	rjmp	.+10     	; 0x1f7e <TIMER1_u8Init+0x30a>
//			OCR1A = 1000;
//			OCR1B = 2000;
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f80:	29 96       	adiw	r28, 0x09	; 9
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <TIMER2_u8Init>:
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	27 97       	sbiw	r28, 0x07	; 7
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1faa:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <TIMER2_u8Init+0x24>
    1fb4:	de c0       	rjmp	.+444    	; 0x2172 <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    1fb6:	80 91 6f 01 	lds	r24, 0x016F
    1fba:	88 23       	and	r24, r24
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <TIMER2_u8Init+0x2e>
    1fbe:	d6 c0       	rjmp	.+428    	; 0x216c <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 6f 01 	sts	0x016F, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1fc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fca:	81 81       	ldd	r24, Z+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	3f 83       	std	Y+7, r19	; 0x07
    1fd2:	2e 83       	std	Y+6, r18	; 0x06
    1fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	91 05       	cpc	r25, r1
    1fdc:	21 f1       	breq	.+72     	; 0x2026 <TIMER2_u8Init+0x94>
    1fde:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <TIMER2_u8Init+0x60>
    1fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fea:	9f 81       	ldd	r25, Y+7	; 0x07
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	61 f0       	breq	.+24     	; 0x2008 <TIMER2_u8Init+0x76>
    1ff0:	46 c0       	rjmp	.+140    	; 0x207e <TIMER2_u8Init+0xec>
    1ff2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	21 f1       	breq	.+72     	; 0x2044 <TIMER2_u8Init+0xb2>
    1ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	91 05       	cpc	r25, r1
    2004:	71 f1       	breq	.+92     	; 0x2062 <TIMER2_u8Init+0xd0>
    2006:	3b c0       	rjmp	.+118    	; 0x207e <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2008:	a5 e4       	ldi	r26, 0x45	; 69
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e5 e4       	ldi	r30, 0x45	; 69
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	8f 7b       	andi	r24, 0xBF	; 191
    2014:	8c 93       	st	X, r24
    2016:	a5 e4       	ldi	r26, 0x45	; 69
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e5 e4       	ldi	r30, 0x45	; 69
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	87 7f       	andi	r24, 0xF7	; 247
    2022:	8c 93       	st	X, r24
    2024:	2c c0       	rjmp	.+88     	; 0x207e <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2026:	a5 e4       	ldi	r26, 0x45	; 69
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e4       	ldi	r30, 0x45	; 69
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 64       	ori	r24, 0x40	; 64
    2032:	8c 93       	st	X, r24
    2034:	a5 e4       	ldi	r26, 0x45	; 69
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e5 e4       	ldi	r30, 0x45	; 69
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	87 7f       	andi	r24, 0xF7	; 247
    2040:	8c 93       	st	X, r24
    2042:	1d c0       	rjmp	.+58     	; 0x207e <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2044:	a5 e4       	ldi	r26, 0x45	; 69
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e5 e4       	ldi	r30, 0x45	; 69
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	8f 7b       	andi	r24, 0xBF	; 191
    2050:	8c 93       	st	X, r24
    2052:	a5 e4       	ldi	r26, 0x45	; 69
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e5 e4       	ldi	r30, 0x45	; 69
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 60       	ori	r24, 0x08	; 8
    205e:	8c 93       	st	X, r24
    2060:	0e c0       	rjmp	.+28     	; 0x207e <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2062:	a5 e4       	ldi	r26, 0x45	; 69
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e5 e4       	ldi	r30, 0x45	; 69
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	80 64       	ori	r24, 0x40	; 64
    206e:	8c 93       	st	X, r24
    2070:	a5 e4       	ldi	r26, 0x45	; 69
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e5 e4       	ldi	r30, 0x45	; 69
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	88 60       	ori	r24, 0x08	; 8
    207c:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    207e:	a5 e4       	ldi	r26, 0x45	; 69
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e5 e4       	ldi	r30, 0x45	; 69
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8f 7c       	andi	r24, 0xCF	; 207
    208a:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    208c:	ea 81       	ldd	r30, Y+2	; 0x02
    208e:	fb 81       	ldd	r31, Y+3	; 0x03
    2090:	81 81       	ldd	r24, Z+1	; 0x01
    2092:	88 23       	and	r24, r24
    2094:	29 f0       	breq	.+10     	; 0x20a0 <TIMER2_u8Init+0x10e>
    2096:	ea 81       	ldd	r30, Y+2	; 0x02
    2098:	fb 81       	ldd	r31, Y+3	; 0x03
    209a:	81 81       	ldd	r24, Z+1	; 0x01
    209c:	82 30       	cpi	r24, 0x02	; 2
    209e:	e1 f4       	brne	.+56     	; 0x20d8 <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    20a0:	ea 81       	ldd	r30, Y+2	; 0x02
    20a2:	fb 81       	ldd	r31, Y+3	; 0x03
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	a0 f4       	brcc	.+40     	; 0x20d2 <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    20aa:	a5 e4       	ldi	r26, 0x45	; 69
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e5 e4       	ldi	r30, 0x45	; 69
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	28 2f       	mov	r18, r24
    20b6:	ea 81       	ldd	r30, Y+2	; 0x02
    20b8:	fb 81       	ldd	r31, Y+3	; 0x03
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	82 95       	swap	r24
    20c2:	92 95       	swap	r25
    20c4:	90 7f       	andi	r25, 0xF0	; 240
    20c6:	98 27       	eor	r25, r24
    20c8:	80 7f       	andi	r24, 0xF0	; 240
    20ca:	98 27       	eor	r25, r24
    20cc:	82 2b       	or	r24, r18
    20ce:	8c 93       	st	X, r24
    20d0:	3b c0       	rjmp	.+118    	; 0x2148 <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	38 c0       	rjmp	.+112    	; 0x2148 <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    20d8:	ea 81       	ldd	r30, Y+2	; 0x02
    20da:	fb 81       	ldd	r31, Y+3	; 0x03
    20dc:	81 81       	ldd	r24, Z+1	; 0x01
    20de:	83 30       	cpi	r24, 0x03	; 3
    20e0:	29 f0       	breq	.+10     	; 0x20ec <TIMER2_u8Init+0x15a>
    20e2:	ea 81       	ldd	r30, Y+2	; 0x02
    20e4:	fb 81       	ldd	r31, Y+3	; 0x03
    20e6:	81 81       	ldd	r24, Z+1	; 0x01
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	71 f5       	brne	.+92     	; 0x2148 <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    20ec:	ea 81       	ldd	r30, Y+2	; 0x02
    20ee:	fb 81       	ldd	r31, Y+3	; 0x03
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3d 83       	std	Y+5, r19	; 0x05
    20f8:	2c 83       	std	Y+4, r18	; 0x04
    20fa:	8c 81       	ldd	r24, Y+4	; 0x04
    20fc:	9d 81       	ldd	r25, Y+5	; 0x05
    20fe:	84 30       	cpi	r24, 0x04	; 4
    2100:	91 05       	cpc	r25, r1
    2102:	81 f0       	breq	.+32     	; 0x2124 <TIMER2_u8Init+0x192>
    2104:	2c 81       	ldd	r18, Y+4	; 0x04
    2106:	3d 81       	ldd	r19, Y+5	; 0x05
    2108:	25 30       	cpi	r18, 0x05	; 5
    210a:	31 05       	cpc	r19, r1
    210c:	99 f0       	breq	.+38     	; 0x2134 <TIMER2_u8Init+0x1a2>
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	b9 f4       	brne	.+46     	; 0x2144 <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    2116:	e5 e4       	ldi	r30, 0x45	; 69
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	a5 e4       	ldi	r26, 0x45	; 69
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	8c 91       	ld	r24, X
    2120:	80 83       	st	Z, r24
    2122:	12 c0       	rjmp	.+36     	; 0x2148 <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    2124:	a5 e4       	ldi	r26, 0x45	; 69
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e5 e4       	ldi	r30, 0x45	; 69
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 62       	ori	r24, 0x20	; 32
    2130:	8c 93       	st	X, r24
    2132:	0a c0       	rjmp	.+20     	; 0x2148 <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    2134:	a5 e4       	ldi	r26, 0x45	; 69
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e5 e4       	ldi	r30, 0x45	; 69
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 63       	ori	r24, 0x30	; 48
    2140:	8c 93       	st	X, r24
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    2148:	a5 e4       	ldi	r26, 0x45	; 69
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e5 e4       	ldi	r30, 0x45	; 69
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 7f       	andi	r24, 0xF8	; 248
    2154:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2156:	a5 e4       	ldi	r26, 0x45	; 69
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e4       	ldi	r30, 0x45	; 69
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	90 81       	ld	r25, Z
    2160:	ea 81       	ldd	r30, Y+2	; 0x02
    2162:	fb 81       	ldd	r31, Y+3	; 0x03
    2164:	80 81       	ld	r24, Z
    2166:	89 2b       	or	r24, r25
    2168:	8c 93       	st	X, r24
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    216c:	84 e0       	ldi	r24, 0x04	; 4
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
}
    2178:	27 96       	adiw	r28, 0x07	; 7
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <TIMER0_u8SetCompOutMode>:



uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <TIMER0_u8SetCompOutMode+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <TIMER0_u8SetCompOutMode+0x8>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <TIMER0_u8SetCompOutMode+0xa>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
    219c:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    219e:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	09 f4       	brne	.+2      	; 0x21aa <TIMER0_u8SetCompOutMode+0x20>
    21a8:	60 c0       	rjmp	.+192    	; 0x226a <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    21aa:	a3 e5       	ldi	r26, 0x53	; 83
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e3 e5       	ldi	r30, 0x53	; 83
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	8f 7c       	andi	r24, 0xCF	; 207
    21b6:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    21b8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ba:	fb 81       	ldd	r31, Y+3	; 0x03
    21bc:	81 81       	ldd	r24, Z+1	; 0x01
    21be:	88 23       	and	r24, r24
    21c0:	29 f0       	breq	.+10     	; 0x21cc <TIMER0_u8SetCompOutMode+0x42>
    21c2:	ea 81       	ldd	r30, Y+2	; 0x02
    21c4:	fb 81       	ldd	r31, Y+3	; 0x03
    21c6:	81 81       	ldd	r24, Z+1	; 0x01
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	c1 f4       	brne	.+48     	; 0x21fc <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	84 30       	cpi	r24, 0x04	; 4
    21d0:	90 f4       	brcc	.+36     	; 0x21f6 <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    21d2:	a3 e5       	ldi	r26, 0x53	; 83
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e3 e5       	ldi	r30, 0x53	; 83
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	28 2f       	mov	r18, r24
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	82 95       	swap	r24
    21e6:	92 95       	swap	r25
    21e8:	90 7f       	andi	r25, 0xF0	; 240
    21ea:	98 27       	eor	r25, r24
    21ec:	80 7f       	andi	r24, 0xF0	; 240
    21ee:	98 27       	eor	r25, r24
    21f0:	82 2b       	or	r24, r18
    21f2:	8c 93       	st	X, r24
    21f4:	3c c0       	rjmp	.+120    	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	39 c0       	rjmp	.+114    	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    21fc:	ea 81       	ldd	r30, Y+2	; 0x02
    21fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2200:	81 81       	ldd	r24, Z+1	; 0x01
    2202:	83 30       	cpi	r24, 0x03	; 3
    2204:	29 f0       	breq	.+10     	; 0x2210 <TIMER0_u8SetCompOutMode+0x86>
    2206:	ea 81       	ldd	r30, Y+2	; 0x02
    2208:	fb 81       	ldd	r31, Y+3	; 0x03
    220a:	81 81       	ldd	r24, Z+1	; 0x01
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	79 f5       	brne	.+94     	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3e 83       	std	Y+6, r19	; 0x06
    2218:	2d 83       	std	Y+5, r18	; 0x05
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	84 30       	cpi	r24, 0x04	; 4
    2220:	91 05       	cpc	r25, r1
    2222:	81 f0       	breq	.+32     	; 0x2244 <TIMER0_u8SetCompOutMode+0xba>
    2224:	2d 81       	ldd	r18, Y+5	; 0x05
    2226:	3e 81       	ldd	r19, Y+6	; 0x06
    2228:	25 30       	cpi	r18, 0x05	; 5
    222a:	31 05       	cpc	r19, r1
    222c:	99 f0       	breq	.+38     	; 0x2254 <TIMER0_u8SetCompOutMode+0xca>
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	b9 f4       	brne	.+46     	; 0x2264 <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    2236:	e3 e5       	ldi	r30, 0x53	; 83
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	8c 91       	ld	r24, X
    2240:	80 83       	st	Z, r24
    2242:	15 c0       	rjmp	.+42     	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    2244:	a3 e5       	ldi	r26, 0x53	; 83
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e3 e5       	ldi	r30, 0x53	; 83
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	80 62       	ori	r24, 0x20	; 32
    2250:	8c 93       	st	X, r24
    2252:	0d c0       	rjmp	.+26     	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    2254:	a3 e5       	ldi	r26, 0x53	; 83
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e3 e5       	ldi	r30, 0x53	; 83
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 63       	ori	r24, 0x30	; 48
    2260:	8c 93       	st	X, r24
    2262:	05 c0       	rjmp	.+10     	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	02 c0       	rjmp	.+4      	; 0x226e <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2270:	26 96       	adiw	r28, 0x06	; 6
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <TIMER1_u8SetCompOutModeChA>:
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	28 97       	sbiw	r28, 0x08	; 8
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	9b 83       	std	Y+3, r25	; 0x03
    2298:	8a 83       	std	Y+2, r24	; 0x02
    229a:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    229c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <TIMER1_u8SetCompOutModeChA+0x26>
    22a6:	a5 c0       	rjmp	.+330    	; 0x23f2 <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    22a8:	ea 81       	ldd	r30, Y+2	; 0x02
    22aa:	fb 81       	ldd	r31, Y+3	; 0x03
    22ac:	81 81       	ldd	r24, Z+1	; 0x01
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	38 87       	std	Y+8, r19	; 0x08
    22b4:	2f 83       	std	Y+7, r18	; 0x07
    22b6:	8f 81       	ldd	r24, Y+7	; 0x07
    22b8:	98 85       	ldd	r25, Y+8	; 0x08
    22ba:	8c 30       	cpi	r24, 0x0C	; 12
    22bc:	91 05       	cpc	r25, r1
    22be:	ac f4       	brge	.+42     	; 0x22ea <TIMER1_u8SetCompOutModeChA+0x68>
    22c0:	2f 81       	ldd	r18, Y+7	; 0x07
    22c2:	38 85       	ldd	r19, Y+8	; 0x08
    22c4:	25 30       	cpi	r18, 0x05	; 5
    22c6:	31 05       	cpc	r19, r1
    22c8:	0c f0       	brlt	.+2      	; 0x22cc <TIMER1_u8SetCompOutModeChA+0x4a>
    22ca:	42 c0       	rjmp	.+132    	; 0x2350 <TIMER1_u8SetCompOutModeChA+0xce>
    22cc:	8f 81       	ldd	r24, Y+7	; 0x07
    22ce:	98 85       	ldd	r25, Y+8	; 0x08
    22d0:	84 30       	cpi	r24, 0x04	; 4
    22d2:	91 05       	cpc	r25, r1
    22d4:	bc f4       	brge	.+46     	; 0x2304 <TIMER1_u8SetCompOutModeChA+0x82>
    22d6:	2f 81       	ldd	r18, Y+7	; 0x07
    22d8:	38 85       	ldd	r19, Y+8	; 0x08
    22da:	21 30       	cpi	r18, 0x01	; 1
    22dc:	31 05       	cpc	r19, r1
    22de:	c4 f5       	brge	.+112    	; 0x2350 <TIMER1_u8SetCompOutModeChA+0xce>
    22e0:	8f 81       	ldd	r24, Y+7	; 0x07
    22e2:	98 85       	ldd	r25, Y+8	; 0x08
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	71 f0       	breq	.+28     	; 0x2304 <TIMER1_u8SetCompOutModeChA+0x82>
    22e8:	81 c0       	rjmp	.+258    	; 0x23ec <TIMER1_u8SetCompOutModeChA+0x16a>
    22ea:	2f 81       	ldd	r18, Y+7	; 0x07
    22ec:	38 85       	ldd	r19, Y+8	; 0x08
    22ee:	2c 30       	cpi	r18, 0x0C	; 12
    22f0:	31 05       	cpc	r19, r1
    22f2:	41 f0       	breq	.+16     	; 0x2304 <TIMER1_u8SetCompOutModeChA+0x82>
    22f4:	8f 81       	ldd	r24, Y+7	; 0x07
    22f6:	98 85       	ldd	r25, Y+8	; 0x08
    22f8:	0e 97       	sbiw	r24, 0x0e	; 14
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	91 05       	cpc	r25, r1
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <TIMER1_u8SetCompOutModeChA+0x80>
    2300:	75 c0       	rjmp	.+234    	; 0x23ec <TIMER1_u8SetCompOutModeChA+0x16a>
    2302:	26 c0       	rjmp	.+76     	; 0x2350 <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	e0 f4       	brcc	.+56     	; 0x2342 <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    230a:	af e4       	ldi	r26, 0x4F	; 79
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8f 73       	andi	r24, 0x3F	; 63
    2316:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    2318:	af e4       	ldi	r26, 0x4F	; 79
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ef e4       	ldi	r30, 0x4F	; 79
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	28 2f       	mov	r18, r24
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	88 2f       	mov	r24, r24
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	00 24       	eor	r0, r0
    232c:	96 95       	lsr	r25
    232e:	87 95       	ror	r24
    2330:	07 94       	ror	r0
    2332:	96 95       	lsr	r25
    2334:	87 95       	ror	r24
    2336:	07 94       	ror	r0
    2338:	98 2f       	mov	r25, r24
    233a:	80 2d       	mov	r24, r0
    233c:	82 2b       	or	r24, r18
    233e:	8c 93       	st	X, r24
    2340:	5a c0       	rjmp	.+180    	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    2342:	8c 81       	ldd	r24, Y+4	; 0x04
    2344:	86 30       	cpi	r24, 0x06	; 6
    2346:	09 f4       	brne	.+2      	; 0x234a <TIMER1_u8SetCompOutModeChA+0xc8>
    2348:	56 c0       	rjmp	.+172    	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	53 c0       	rjmp	.+166    	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    2350:	8c 81       	ldd	r24, Y+4	; 0x04
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3e 83       	std	Y+6, r19	; 0x06
    2358:	2d 83       	std	Y+5, r18	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	84 30       	cpi	r24, 0x04	; 4
    2360:	91 05       	cpc	r25, r1
    2362:	19 f1       	breq	.+70     	; 0x23aa <TIMER1_u8SetCompOutModeChA+0x128>
    2364:	2d 81       	ldd	r18, Y+5	; 0x05
    2366:	3e 81       	ldd	r19, Y+6	; 0x06
    2368:	25 30       	cpi	r18, 0x05	; 5
    236a:	31 05       	cpc	r19, r1
    236c:	2c f4       	brge	.+10     	; 0x2378 <TIMER1_u8SetCompOutModeChA+0xf6>
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	61 f0       	breq	.+24     	; 0x238e <TIMER1_u8SetCompOutModeChA+0x10c>
    2376:	37 c0       	rjmp	.+110    	; 0x23e6 <TIMER1_u8SetCompOutModeChA+0x164>
    2378:	2d 81       	ldd	r18, Y+5	; 0x05
    237a:	3e 81       	ldd	r19, Y+6	; 0x06
    237c:	25 30       	cpi	r18, 0x05	; 5
    237e:	31 05       	cpc	r19, r1
    2380:	19 f1       	breq	.+70     	; 0x23c8 <TIMER1_u8SetCompOutModeChA+0x146>
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	86 30       	cpi	r24, 0x06	; 6
    2388:	91 05       	cpc	r25, r1
    238a:	a9 f1       	breq	.+106    	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
    238c:	2c c0       	rjmp	.+88     	; 0x23e6 <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    238e:	af e4       	ldi	r26, 0x4F	; 79
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	ef e4       	ldi	r30, 0x4F	; 79
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8f 73       	andi	r24, 0x3F	; 63
    239a:	8c 93       	st	X, r24
    239c:	af e4       	ldi	r26, 0x4F	; 79
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	ef e4       	ldi	r30, 0x4F	; 79
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8c 93       	st	X, r24
    23a8:	26 c0       	rjmp	.+76     	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    23aa:	af e4       	ldi	r26, 0x4F	; 79
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ef e4       	ldi	r30, 0x4F	; 79
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8f 73       	andi	r24, 0x3F	; 63
    23b6:	8c 93       	st	X, r24
    23b8:	af e4       	ldi	r26, 0x4F	; 79
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ef e4       	ldi	r30, 0x4F	; 79
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 68       	ori	r24, 0x80	; 128
    23c4:	8c 93       	st	X, r24
    23c6:	17 c0       	rjmp	.+46     	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    23c8:	af e4       	ldi	r26, 0x4F	; 79
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ef e4       	ldi	r30, 0x4F	; 79
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 73       	andi	r24, 0x3F	; 63
    23d4:	8c 93       	st	X, r24
    23d6:	af e4       	ldi	r26, 0x4F	; 79
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	ef e4       	ldi	r30, 0x4F	; 79
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 6c       	ori	r24, 0xC0	; 192
    23e2:	8c 93       	st	X, r24
    23e4:	08 c0       	rjmp	.+16     	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f8:	28 96       	adiw	r28, 0x08	; 8
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <TIMER1_u8SetCompOutModeChB>:
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	28 97       	sbiw	r28, 0x08	; 8
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	9b 83       	std	Y+3, r25	; 0x03
    2420:	8a 83       	std	Y+2, r24	; 0x02
    2422:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2424:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	9b 81       	ldd	r25, Y+3	; 0x03
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	09 f4       	brne	.+2      	; 0x2430 <TIMER1_u8SetCompOutModeChB+0x26>
    242e:	a2 c0       	rjmp	.+324    	; 0x2574 <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    2430:	ea 81       	ldd	r30, Y+2	; 0x02
    2432:	fb 81       	ldd	r31, Y+3	; 0x03
    2434:	81 81       	ldd	r24, Z+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	38 87       	std	Y+8, r19	; 0x08
    243c:	2f 83       	std	Y+7, r18	; 0x07
    243e:	8f 81       	ldd	r24, Y+7	; 0x07
    2440:	98 85       	ldd	r25, Y+8	; 0x08
    2442:	8c 30       	cpi	r24, 0x0C	; 12
    2444:	91 05       	cpc	r25, r1
    2446:	ac f4       	brge	.+42     	; 0x2472 <TIMER1_u8SetCompOutModeChB+0x68>
    2448:	2f 81       	ldd	r18, Y+7	; 0x07
    244a:	38 85       	ldd	r19, Y+8	; 0x08
    244c:	25 30       	cpi	r18, 0x05	; 5
    244e:	31 05       	cpc	r19, r1
    2450:	0c f0       	brlt	.+2      	; 0x2454 <TIMER1_u8SetCompOutModeChB+0x4a>
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <TIMER1_u8SetCompOutModeChB+0xc8>
    2454:	8f 81       	ldd	r24, Y+7	; 0x07
    2456:	98 85       	ldd	r25, Y+8	; 0x08
    2458:	84 30       	cpi	r24, 0x04	; 4
    245a:	91 05       	cpc	r25, r1
    245c:	bc f4       	brge	.+46     	; 0x248c <TIMER1_u8SetCompOutModeChB+0x82>
    245e:	2f 81       	ldd	r18, Y+7	; 0x07
    2460:	38 85       	ldd	r19, Y+8	; 0x08
    2462:	21 30       	cpi	r18, 0x01	; 1
    2464:	31 05       	cpc	r19, r1
    2466:	ac f5       	brge	.+106    	; 0x24d2 <TIMER1_u8SetCompOutModeChB+0xc8>
    2468:	8f 81       	ldd	r24, Y+7	; 0x07
    246a:	98 85       	ldd	r25, Y+8	; 0x08
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	71 f0       	breq	.+28     	; 0x248c <TIMER1_u8SetCompOutModeChB+0x82>
    2470:	7e c0       	rjmp	.+252    	; 0x256e <TIMER1_u8SetCompOutModeChB+0x164>
    2472:	2f 81       	ldd	r18, Y+7	; 0x07
    2474:	38 85       	ldd	r19, Y+8	; 0x08
    2476:	2c 30       	cpi	r18, 0x0C	; 12
    2478:	31 05       	cpc	r19, r1
    247a:	41 f0       	breq	.+16     	; 0x248c <TIMER1_u8SetCompOutModeChB+0x82>
    247c:	8f 81       	ldd	r24, Y+7	; 0x07
    247e:	98 85       	ldd	r25, Y+8	; 0x08
    2480:	0e 97       	sbiw	r24, 0x0e	; 14
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	91 05       	cpc	r25, r1
    2486:	08 f0       	brcs	.+2      	; 0x248a <TIMER1_u8SetCompOutModeChB+0x80>
    2488:	72 c0       	rjmp	.+228    	; 0x256e <TIMER1_u8SetCompOutModeChB+0x164>
    248a:	23 c0       	rjmp	.+70     	; 0x24d2 <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    248c:	8c 81       	ldd	r24, Y+4	; 0x04
    248e:	84 30       	cpi	r24, 0x04	; 4
    2490:	c8 f4       	brcc	.+50     	; 0x24c4 <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    2492:	af e4       	ldi	r26, 0x4F	; 79
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	8f 7c       	andi	r24, 0xCF	; 207
    249e:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    24a0:	af e4       	ldi	r26, 0x4F	; 79
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ef e4       	ldi	r30, 0x4F	; 79
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	28 2f       	mov	r18, r24
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	82 95       	swap	r24
    24b4:	92 95       	swap	r25
    24b6:	90 7f       	andi	r25, 0xF0	; 240
    24b8:	98 27       	eor	r25, r24
    24ba:	80 7f       	andi	r24, 0xF0	; 240
    24bc:	98 27       	eor	r25, r24
    24be:	82 2b       	or	r24, r18
    24c0:	8c 93       	st	X, r24
    24c2:	5a c0       	rjmp	.+180    	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	86 30       	cpi	r24, 0x06	; 6
    24c8:	09 f4       	brne	.+2      	; 0x24cc <TIMER1_u8SetCompOutModeChB+0xc2>
    24ca:	56 c0       	rjmp	.+172    	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	53 c0       	rjmp	.+166    	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    24d2:	8c 81       	ldd	r24, Y+4	; 0x04
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	3e 83       	std	Y+6, r19	; 0x06
    24da:	2d 83       	std	Y+5, r18	; 0x05
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	9e 81       	ldd	r25, Y+6	; 0x06
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	91 05       	cpc	r25, r1
    24e4:	19 f1       	breq	.+70     	; 0x252c <TIMER1_u8SetCompOutModeChB+0x122>
    24e6:	2d 81       	ldd	r18, Y+5	; 0x05
    24e8:	3e 81       	ldd	r19, Y+6	; 0x06
    24ea:	25 30       	cpi	r18, 0x05	; 5
    24ec:	31 05       	cpc	r19, r1
    24ee:	2c f4       	brge	.+10     	; 0x24fa <TIMER1_u8SetCompOutModeChB+0xf0>
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	61 f0       	breq	.+24     	; 0x2510 <TIMER1_u8SetCompOutModeChB+0x106>
    24f8:	37 c0       	rjmp	.+110    	; 0x2568 <TIMER1_u8SetCompOutModeChB+0x15e>
    24fa:	2d 81       	ldd	r18, Y+5	; 0x05
    24fc:	3e 81       	ldd	r19, Y+6	; 0x06
    24fe:	25 30       	cpi	r18, 0x05	; 5
    2500:	31 05       	cpc	r19, r1
    2502:	19 f1       	breq	.+70     	; 0x254a <TIMER1_u8SetCompOutModeChB+0x140>
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	86 30       	cpi	r24, 0x06	; 6
    250a:	91 05       	cpc	r25, r1
    250c:	a9 f1       	breq	.+106    	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
    250e:	2c c0       	rjmp	.+88     	; 0x2568 <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    2510:	af e4       	ldi	r26, 0x4F	; 79
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ef e4       	ldi	r30, 0x4F	; 79
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8f 7c       	andi	r24, 0xCF	; 207
    251c:	8c 93       	st	X, r24
    251e:	af e4       	ldi	r26, 0x4F	; 79
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	ef e4       	ldi	r30, 0x4F	; 79
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8c 93       	st	X, r24
    252a:	26 c0       	rjmp	.+76     	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    252c:	af e4       	ldi	r26, 0x4F	; 79
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	ef e4       	ldi	r30, 0x4F	; 79
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	8f 7c       	andi	r24, 0xCF	; 207
    2538:	8c 93       	st	X, r24
    253a:	af e4       	ldi	r26, 0x4F	; 79
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	ef e4       	ldi	r30, 0x4F	; 79
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	80 62       	ori	r24, 0x20	; 32
    2546:	8c 93       	st	X, r24
    2548:	17 c0       	rjmp	.+46     	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    254a:	af e4       	ldi	r26, 0x4F	; 79
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	ef e4       	ldi	r30, 0x4F	; 79
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 7c       	andi	r24, 0xCF	; 207
    2556:	8c 93       	st	X, r24
    2558:	af e4       	ldi	r26, 0x4F	; 79
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ef e4       	ldi	r30, 0x4F	; 79
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	80 63       	ori	r24, 0x30	; 48
    2564:	8c 93       	st	X, r24
    2566:	08 c0       	rjmp	.+16     	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
}
    257a:	28 96       	adiw	r28, 0x08	; 8
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <TIMER2_u8SetCompOutMode>:
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	28 97       	sbiw	r28, 0x08	; 8
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	9b 83       	std	Y+3, r25	; 0x03
    25a2:	8a 83       	std	Y+2, r24	; 0x02
    25a4:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    25a6:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <TIMER2_u8SetCompOutMode+0x26>
    25b0:	cd c0       	rjmp	.+410    	; 0x274c <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    25b2:	ea 81       	ldd	r30, Y+2	; 0x02
    25b4:	fb 81       	ldd	r31, Y+3	; 0x03
    25b6:	81 81       	ldd	r24, Z+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	38 87       	std	Y+8, r19	; 0x08
    25be:	2f 83       	std	Y+7, r18	; 0x07
    25c0:	8f 81       	ldd	r24, Y+7	; 0x07
    25c2:	98 85       	ldd	r25, Y+8	; 0x08
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	91 05       	cpc	r25, r1
    25c8:	21 f1       	breq	.+72     	; 0x2612 <TIMER2_u8SetCompOutMode+0x86>
    25ca:	2f 81       	ldd	r18, Y+7	; 0x07
    25cc:	38 85       	ldd	r19, Y+8	; 0x08
    25ce:	22 30       	cpi	r18, 0x02	; 2
    25d0:	31 05       	cpc	r19, r1
    25d2:	2c f4       	brge	.+10     	; 0x25de <TIMER2_u8SetCompOutMode+0x52>
    25d4:	8f 81       	ldd	r24, Y+7	; 0x07
    25d6:	98 85       	ldd	r25, Y+8	; 0x08
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	61 f0       	breq	.+24     	; 0x25f4 <TIMER2_u8SetCompOutMode+0x68>
    25dc:	46 c0       	rjmp	.+140    	; 0x266a <TIMER2_u8SetCompOutMode+0xde>
    25de:	2f 81       	ldd	r18, Y+7	; 0x07
    25e0:	38 85       	ldd	r19, Y+8	; 0x08
    25e2:	22 30       	cpi	r18, 0x02	; 2
    25e4:	31 05       	cpc	r19, r1
    25e6:	21 f1       	breq	.+72     	; 0x2630 <TIMER2_u8SetCompOutMode+0xa4>
    25e8:	8f 81       	ldd	r24, Y+7	; 0x07
    25ea:	98 85       	ldd	r25, Y+8	; 0x08
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	91 05       	cpc	r25, r1
    25f0:	71 f1       	breq	.+92     	; 0x264e <TIMER2_u8SetCompOutMode+0xc2>
    25f2:	3b c0       	rjmp	.+118    	; 0x266a <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    25f4:	a5 e4       	ldi	r26, 0x45	; 69
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e5 e4       	ldi	r30, 0x45	; 69
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 7b       	andi	r24, 0xBF	; 191
    2600:	8c 93       	st	X, r24
    2602:	a5 e4       	ldi	r26, 0x45	; 69
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e5 e4       	ldi	r30, 0x45	; 69
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	87 7f       	andi	r24, 0xF7	; 247
    260e:	8c 93       	st	X, r24
    2610:	2c c0       	rjmp	.+88     	; 0x266a <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2612:	a5 e4       	ldi	r26, 0x45	; 69
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e5 e4       	ldi	r30, 0x45	; 69
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	80 64       	ori	r24, 0x40	; 64
    261e:	8c 93       	st	X, r24
    2620:	a5 e4       	ldi	r26, 0x45	; 69
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e5 e4       	ldi	r30, 0x45	; 69
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	87 7f       	andi	r24, 0xF7	; 247
    262c:	8c 93       	st	X, r24
    262e:	1d c0       	rjmp	.+58     	; 0x266a <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2630:	a5 e4       	ldi	r26, 0x45	; 69
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e5 e4       	ldi	r30, 0x45	; 69
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	8f 7b       	andi	r24, 0xBF	; 191
    263c:	8c 93       	st	X, r24
    263e:	a5 e4       	ldi	r26, 0x45	; 69
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e4       	ldi	r30, 0x45	; 69
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	88 60       	ori	r24, 0x08	; 8
    264a:	8c 93       	st	X, r24
    264c:	0e c0       	rjmp	.+28     	; 0x266a <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    264e:	a5 e4       	ldi	r26, 0x45	; 69
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e5 e4       	ldi	r30, 0x45	; 69
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	80 64       	ori	r24, 0x40	; 64
    265a:	8c 93       	st	X, r24
    265c:	a5 e4       	ldi	r26, 0x45	; 69
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e5 e4       	ldi	r30, 0x45	; 69
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	88 60       	ori	r24, 0x08	; 8
    2668:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    266a:	a5 e4       	ldi	r26, 0x45	; 69
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e5 e4       	ldi	r30, 0x45	; 69
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	8f 7c       	andi	r24, 0xCF	; 207
    2676:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2678:	ea 81       	ldd	r30, Y+2	; 0x02
    267a:	fb 81       	ldd	r31, Y+3	; 0x03
    267c:	81 81       	ldd	r24, Z+1	; 0x01
    267e:	88 23       	and	r24, r24
    2680:	29 f0       	breq	.+10     	; 0x268c <TIMER2_u8SetCompOutMode+0x100>
    2682:	ea 81       	ldd	r30, Y+2	; 0x02
    2684:	fb 81       	ldd	r31, Y+3	; 0x03
    2686:	81 81       	ldd	r24, Z+1	; 0x01
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	c1 f4       	brne	.+48     	; 0x26bc <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	84 30       	cpi	r24, 0x04	; 4
    2690:	90 f4       	brcc	.+36     	; 0x26b6 <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    2692:	a5 e4       	ldi	r26, 0x45	; 69
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e5 e4       	ldi	r30, 0x45	; 69
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	28 2f       	mov	r18, r24
    269e:	8c 81       	ldd	r24, Y+4	; 0x04
    26a0:	88 2f       	mov	r24, r24
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	82 95       	swap	r24
    26a6:	92 95       	swap	r25
    26a8:	90 7f       	andi	r25, 0xF0	; 240
    26aa:	98 27       	eor	r25, r24
    26ac:	80 7f       	andi	r24, 0xF0	; 240
    26ae:	98 27       	eor	r25, r24
    26b0:	82 2b       	or	r24, r18
    26b2:	8c 93       	st	X, r24
    26b4:	39 c0       	rjmp	.+114    	; 0x2728 <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	36 c0       	rjmp	.+108    	; 0x2728 <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    26bc:	ea 81       	ldd	r30, Y+2	; 0x02
    26be:	fb 81       	ldd	r31, Y+3	; 0x03
    26c0:	81 81       	ldd	r24, Z+1	; 0x01
    26c2:	83 30       	cpi	r24, 0x03	; 3
    26c4:	29 f0       	breq	.+10     	; 0x26d0 <TIMER2_u8SetCompOutMode+0x144>
    26c6:	ea 81       	ldd	r30, Y+2	; 0x02
    26c8:	fb 81       	ldd	r31, Y+3	; 0x03
    26ca:	81 81       	ldd	r24, Z+1	; 0x01
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	61 f5       	brne	.+88     	; 0x2728 <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	3e 83       	std	Y+6, r19	; 0x06
    26d8:	2d 83       	std	Y+5, r18	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	84 30       	cpi	r24, 0x04	; 4
    26e0:	91 05       	cpc	r25, r1
    26e2:	81 f0       	breq	.+32     	; 0x2704 <TIMER2_u8SetCompOutMode+0x178>
    26e4:	2d 81       	ldd	r18, Y+5	; 0x05
    26e6:	3e 81       	ldd	r19, Y+6	; 0x06
    26e8:	25 30       	cpi	r18, 0x05	; 5
    26ea:	31 05       	cpc	r19, r1
    26ec:	99 f0       	breq	.+38     	; 0x2714 <TIMER2_u8SetCompOutMode+0x188>
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	b9 f4       	brne	.+46     	; 0x2724 <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    26f6:	e5 e4       	ldi	r30, 0x45	; 69
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	a5 e4       	ldi	r26, 0x45	; 69
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	8c 91       	ld	r24, X
    2700:	80 83       	st	Z, r24
    2702:	12 c0       	rjmp	.+36     	; 0x2728 <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    2704:	a5 e4       	ldi	r26, 0x45	; 69
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e5 e4       	ldi	r30, 0x45	; 69
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	80 62       	ori	r24, 0x20	; 32
    2710:	8c 93       	st	X, r24
    2712:	0a c0       	rjmp	.+20     	; 0x2728 <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    2714:	a5 e4       	ldi	r26, 0x45	; 69
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e5 e4       	ldi	r30, 0x45	; 69
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	80 63       	ori	r24, 0x30	; 48
    2720:	8c 93       	st	X, r24
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    2728:	a5 e4       	ldi	r26, 0x45	; 69
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e5 e4       	ldi	r30, 0x45	; 69
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	88 7f       	andi	r24, 0xF8	; 248
    2734:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2736:	a5 e4       	ldi	r26, 0x45	; 69
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e5 e4       	ldi	r30, 0x45	; 69
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	90 81       	ld	r25, Z
    2740:	ea 81       	ldd	r30, Y+2	; 0x02
    2742:	fb 81       	ldd	r31, Y+3	; 0x03
    2744:	80 81       	ld	r24, Z
    2746:	89 2b       	or	r24, r25
    2748:	8c 93       	st	X, r24
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    274c:	82 e0       	ldi	r24, 0x02	; 2
    274e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
}
    2752:	28 96       	adiw	r28, 0x08	; 8
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <TIMERS_u8IntEnable>:



uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <TIMERS_u8IntEnable+0x6>
    276a:	00 d0       	rcall	.+0      	; 0x276c <TIMERS_u8IntEnable+0x8>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2772:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	3c 83       	std	Y+4, r19	; 0x04
    277c:	2b 83       	std	Y+3, r18	; 0x03
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	83 30       	cpi	r24, 0x03	; 3
    2784:	91 05       	cpc	r25, r1
    2786:	09 f4       	brne	.+2      	; 0x278a <TIMERS_u8IntEnable+0x26>
    2788:	42 c0       	rjmp	.+132    	; 0x280e <TIMERS_u8IntEnable+0xaa>
    278a:	2b 81       	ldd	r18, Y+3	; 0x03
    278c:	3c 81       	ldd	r19, Y+4	; 0x04
    278e:	24 30       	cpi	r18, 0x04	; 4
    2790:	31 05       	cpc	r19, r1
    2792:	7c f4       	brge	.+30     	; 0x27b2 <TIMERS_u8IntEnable+0x4e>
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	91 05       	cpc	r25, r1
    279c:	41 f1       	breq	.+80     	; 0x27ee <TIMERS_u8IntEnable+0x8a>
    279e:	2b 81       	ldd	r18, Y+3	; 0x03
    27a0:	3c 81       	ldd	r19, Y+4	; 0x04
    27a2:	22 30       	cpi	r18, 0x02	; 2
    27a4:	31 05       	cpc	r19, r1
    27a6:	5c f5       	brge	.+86     	; 0x27fe <TIMERS_u8IntEnable+0x9a>
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	b9 f0       	breq	.+46     	; 0x27de <TIMERS_u8IntEnable+0x7a>
    27b0:	56 c0       	rjmp	.+172    	; 0x285e <TIMERS_u8IntEnable+0xfa>
    27b2:	2b 81       	ldd	r18, Y+3	; 0x03
    27b4:	3c 81       	ldd	r19, Y+4	; 0x04
    27b6:	25 30       	cpi	r18, 0x05	; 5
    27b8:	31 05       	cpc	r19, r1
    27ba:	c9 f1       	breq	.+114    	; 0x282e <TIMERS_u8IntEnable+0xca>
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	85 30       	cpi	r24, 0x05	; 5
    27c2:	91 05       	cpc	r25, r1
    27c4:	64 f1       	brlt	.+88     	; 0x281e <TIMERS_u8IntEnable+0xba>
    27c6:	2b 81       	ldd	r18, Y+3	; 0x03
    27c8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ca:	26 30       	cpi	r18, 0x06	; 6
    27cc:	31 05       	cpc	r19, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <TIMERS_u8IntEnable+0x6e>
    27d0:	3e c0       	rjmp	.+124    	; 0x284e <TIMERS_u8IntEnable+0xea>
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	87 30       	cpi	r24, 0x07	; 7
    27d8:	91 05       	cpc	r25, r1
    27da:	89 f1       	breq	.+98     	; 0x283e <TIMERS_u8IntEnable+0xda>
    27dc:	40 c0       	rjmp	.+128    	; 0x285e <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    27de:	a9 e5       	ldi	r26, 0x59	; 89
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e9 e5       	ldi	r30, 0x59	; 89
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	81 60       	ori	r24, 0x01	; 1
    27ea:	8c 93       	st	X, r24
    27ec:	3a c0       	rjmp	.+116    	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    27ee:	a9 e5       	ldi	r26, 0x59	; 89
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e9 e5       	ldi	r30, 0x59	; 89
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	82 60       	ori	r24, 0x02	; 2
    27fa:	8c 93       	st	X, r24
    27fc:	32 c0       	rjmp	.+100    	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    27fe:	a9 e5       	ldi	r26, 0x59	; 89
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e9 e5       	ldi	r30, 0x59	; 89
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	84 60       	ori	r24, 0x04	; 4
    280a:	8c 93       	st	X, r24
    280c:	2a c0       	rjmp	.+84     	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    280e:	a9 e5       	ldi	r26, 0x59	; 89
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e9 e5       	ldi	r30, 0x59	; 89
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 61       	ori	r24, 0x10	; 16
    281a:	8c 93       	st	X, r24
    281c:	22 c0       	rjmp	.+68     	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    281e:	a9 e5       	ldi	r26, 0x59	; 89
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e9 e5       	ldi	r30, 0x59	; 89
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	88 60       	ori	r24, 0x08	; 8
    282a:	8c 93       	st	X, r24
    282c:	1a c0       	rjmp	.+52     	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    282e:	a9 e5       	ldi	r26, 0x59	; 89
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e9 e5       	ldi	r30, 0x59	; 89
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 62       	ori	r24, 0x20	; 32
    283a:	8c 93       	st	X, r24
    283c:	12 c0       	rjmp	.+36     	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    283e:	a9 e5       	ldi	r26, 0x59	; 89
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e9 e5       	ldi	r30, 0x59	; 89
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	80 68       	ori	r24, 0x80	; 128
    284a:	8c 93       	st	X, r24
    284c:	0a c0       	rjmp	.+20     	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    284e:	a9 e5       	ldi	r26, 0x59	; 89
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e9 e5       	ldi	r30, 0x59	; 89
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 64       	ori	r24, 0x40	; 64
    285a:	8c 93       	st	X, r24
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <TIMERS_u8IntDisable>:
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	00 d0       	rcall	.+0      	; 0x2878 <TIMERS_u8IntDisable+0x6>
    2878:	00 d0       	rcall	.+0      	; 0x287a <TIMERS_u8IntDisable+0x8>
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2880:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	3c 83       	std	Y+4, r19	; 0x04
    288a:	2b 83       	std	Y+3, r18	; 0x03
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	83 30       	cpi	r24, 0x03	; 3
    2892:	91 05       	cpc	r25, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <TIMERS_u8IntDisable+0x26>
    2896:	42 c0       	rjmp	.+132    	; 0x291c <TIMERS_u8IntDisable+0xaa>
    2898:	2b 81       	ldd	r18, Y+3	; 0x03
    289a:	3c 81       	ldd	r19, Y+4	; 0x04
    289c:	24 30       	cpi	r18, 0x04	; 4
    289e:	31 05       	cpc	r19, r1
    28a0:	7c f4       	brge	.+30     	; 0x28c0 <TIMERS_u8IntDisable+0x4e>
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	9c 81       	ldd	r25, Y+4	; 0x04
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	91 05       	cpc	r25, r1
    28aa:	41 f1       	breq	.+80     	; 0x28fc <TIMERS_u8IntDisable+0x8a>
    28ac:	2b 81       	ldd	r18, Y+3	; 0x03
    28ae:	3c 81       	ldd	r19, Y+4	; 0x04
    28b0:	22 30       	cpi	r18, 0x02	; 2
    28b2:	31 05       	cpc	r19, r1
    28b4:	5c f5       	brge	.+86     	; 0x290c <TIMERS_u8IntDisable+0x9a>
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	b9 f0       	breq	.+46     	; 0x28ec <TIMERS_u8IntDisable+0x7a>
    28be:	56 c0       	rjmp	.+172    	; 0x296c <TIMERS_u8IntDisable+0xfa>
    28c0:	2b 81       	ldd	r18, Y+3	; 0x03
    28c2:	3c 81       	ldd	r19, Y+4	; 0x04
    28c4:	25 30       	cpi	r18, 0x05	; 5
    28c6:	31 05       	cpc	r19, r1
    28c8:	c9 f1       	breq	.+114    	; 0x293c <TIMERS_u8IntDisable+0xca>
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	85 30       	cpi	r24, 0x05	; 5
    28d0:	91 05       	cpc	r25, r1
    28d2:	64 f1       	brlt	.+88     	; 0x292c <TIMERS_u8IntDisable+0xba>
    28d4:	2b 81       	ldd	r18, Y+3	; 0x03
    28d6:	3c 81       	ldd	r19, Y+4	; 0x04
    28d8:	26 30       	cpi	r18, 0x06	; 6
    28da:	31 05       	cpc	r19, r1
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <TIMERS_u8IntDisable+0x6e>
    28de:	3e c0       	rjmp	.+124    	; 0x295c <TIMERS_u8IntDisable+0xea>
    28e0:	8b 81       	ldd	r24, Y+3	; 0x03
    28e2:	9c 81       	ldd	r25, Y+4	; 0x04
    28e4:	87 30       	cpi	r24, 0x07	; 7
    28e6:	91 05       	cpc	r25, r1
    28e8:	89 f1       	breq	.+98     	; 0x294c <TIMERS_u8IntDisable+0xda>
    28ea:	40 c0       	rjmp	.+128    	; 0x296c <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    28ec:	a9 e5       	ldi	r26, 0x59	; 89
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e9 e5       	ldi	r30, 0x59	; 89
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	8e 7f       	andi	r24, 0xFE	; 254
    28f8:	8c 93       	st	X, r24
    28fa:	3a c0       	rjmp	.+116    	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    28fc:	a9 e5       	ldi	r26, 0x59	; 89
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e9 e5       	ldi	r30, 0x59	; 89
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8d 7f       	andi	r24, 0xFD	; 253
    2908:	8c 93       	st	X, r24
    290a:	32 c0       	rjmp	.+100    	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    290c:	a9 e5       	ldi	r26, 0x59	; 89
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e9 e5       	ldi	r30, 0x59	; 89
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	8b 7f       	andi	r24, 0xFB	; 251
    2918:	8c 93       	st	X, r24
    291a:	2a c0       	rjmp	.+84     	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    291c:	a9 e5       	ldi	r26, 0x59	; 89
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e9 e5       	ldi	r30, 0x59	; 89
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8f 7e       	andi	r24, 0xEF	; 239
    2928:	8c 93       	st	X, r24
    292a:	22 c0       	rjmp	.+68     	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    292c:	a9 e5       	ldi	r26, 0x59	; 89
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e9 e5       	ldi	r30, 0x59	; 89
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	87 7f       	andi	r24, 0xF7	; 247
    2938:	8c 93       	st	X, r24
    293a:	1a c0       	rjmp	.+52     	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    293c:	a9 e5       	ldi	r26, 0x59	; 89
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e9 e5       	ldi	r30, 0x59	; 89
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8f 7d       	andi	r24, 0xDF	; 223
    2948:	8c 93       	st	X, r24
    294a:	12 c0       	rjmp	.+36     	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    294c:	a9 e5       	ldi	r26, 0x59	; 89
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e9 e5       	ldi	r30, 0x59	; 89
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	8f 77       	andi	r24, 0x7F	; 127
    2958:	8c 93       	st	X, r24
    295a:	0a c0       	rjmp	.+20     	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    295c:	a9 e5       	ldi	r26, 0x59	; 89
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e9 e5       	ldi	r30, 0x59	; 89
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	8f 7b       	andi	r24, 0xBF	; 191
    2968:	8c 93       	st	X, r24
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2970:	89 81       	ldd	r24, Y+1	; 0x01
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <TIMERS_u8Disable>:

uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	00 d0       	rcall	.+0      	; 0x2986 <TIMERS_u8Disable+0x6>
    2986:	00 d0       	rcall	.+0      	; 0x2988 <TIMERS_u8Disable+0x8>
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    298e:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	3c 83       	std	Y+4, r19	; 0x04
    2998:	2b 83       	std	Y+3, r18	; 0x03
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	81 30       	cpi	r24, 0x01	; 1
    29a0:	91 05       	cpc	r25, r1
    29a2:	99 f0       	breq	.+38     	; 0x29ca <TIMERS_u8Disable+0x4a>
    29a4:	2b 81       	ldd	r18, Y+3	; 0x03
    29a6:	3c 81       	ldd	r19, Y+4	; 0x04
    29a8:	22 30       	cpi	r18, 0x02	; 2
    29aa:	31 05       	cpc	r19, r1
    29ac:	c1 f0       	breq	.+48     	; 0x29de <TIMERS_u8Disable+0x5e>
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	f1 f4       	brne	.+60     	; 0x29f2 <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    29b6:	10 92 6d 01 	sts	0x016D, r1
    29ba:	a3 e5       	ldi	r26, 0x53	; 83
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e3 e5       	ldi	r30, 0x53	; 83
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	88 7f       	andi	r24, 0xF8	; 248
    29c6:	8c 93       	st	X, r24
    29c8:	16 c0       	rjmp	.+44     	; 0x29f6 <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    29ca:	10 92 6e 01 	sts	0x016E, r1
    29ce:	ae e4       	ldi	r26, 0x4E	; 78
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	ee e4       	ldi	r30, 0x4E	; 78
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	88 7f       	andi	r24, 0xF8	; 248
    29da:	8c 93       	st	X, r24
    29dc:	0c c0       	rjmp	.+24     	; 0x29f6 <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    29de:	10 92 6f 01 	sts	0x016F, r1
    29e2:	a5 e4       	ldi	r26, 0x45	; 69
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e5 e4       	ldi	r30, 0x45	; 69
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	88 7f       	andi	r24, 0xF8	; 248
    29ee:	8c 93       	st	X, r24
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <TIMERS_u8SetCallBack>:
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <TIMERS_u8SetCallBack+0x6>
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <TIMERS_u8SetCallBack+0x8>
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	7c 83       	std	Y+4, r23	; 0x04
    2a16:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2a18:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	69 f0       	breq	.+26     	; 0x2a3c <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e0 59       	subi	r30, 0x90	; 144
    2a30:	fe 4f       	sbci	r31, 0xFE	; 254
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <TIMER0_voidSetCompValue>:



void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	0f 92       	push	r0
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    2a5c:	ec e5       	ldi	r30, 0x5C	; 92
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	80 83       	st	Z, r24
}
    2a64:	0f 90       	pop	r0
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <TIMER0_voidSetOvfValue>:
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	0f 92       	push	r0
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    2a78:	e2 e5       	ldi	r30, 0x52	; 82
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	80 83       	st	Z, r24
}
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <TIMER0_u8GetTimerValue>:
uint8 TIMER0_u8GetTimerValue(void)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    2a90:	e2 e5       	ldi	r30, 0x52	; 82
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
}
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <TIMER2_voidSetCompValue>:



void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	0f 92       	push	r0
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    2aa8:	e3 e4       	ldi	r30, 0x43	; 67
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	80 83       	st	Z, r24
}
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <TIMER2_voidSetOvfValue>:
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	0f 92       	push	r0
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    2ac4:	e4 e4       	ldi	r30, 0x44	; 68
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	80 83       	st	Z, r24
}
    2acc:	0f 90       	pop	r0
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <TIMER2_u8GetTimerValue>:
uint8 TIMER2_u8GetTimerValue(void)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    2adc:	e4 e4       	ldi	r30, 0x44	; 68
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
}
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <TIMER1_voidSetCompValueChA>:



void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <TIMER1_voidSetCompValueChA+0x6>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    2af6:	ea e4       	ldi	r30, 0x4A	; 74
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	9a 81       	ldd	r25, Y+2	; 0x02
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
}
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <TIMER1_voidSetCompValueChB>:
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <TIMER1_voidSetCompValueChB+0x6>
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    2b1a:	e8 e4       	ldi	r30, 0x48	; 72
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <TIMER1_voidSetOvfValue>:
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <TIMER1_voidSetOvfValue+0x6>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    2b3e:	ec e4       	ldi	r30, 0x4C	; 76
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
}
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <TIMER1_voidSetInputCaptValue>:
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <TIMER1_voidSetInputCaptValue+0x6>
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    2b62:	e6 e4       	ldi	r30, 0x46	; 70
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
}
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <TIMER1_u16GetTimerValue>:
uint16 TIMER1_u16GetTimerValue(void)
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    2b80:	ec e4       	ldi	r30, 0x4C	; 76
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <TIMER1_u16GetInputCaptValue>:
uint16 TIMER1_u16GetInputCaptValue(void)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    2b96:	e6 e4       	ldi	r30, 0x46	; 70
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <TIMER1_u8SetInputCaptTriggerSrc>:
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2bb2:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	3c 83       	std	Y+4, r19	; 0x04
    2bbc:	2b 83       	std	Y+3, r18	; 0x03
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    2bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bca:	21 30       	cpi	r18, 0x01	; 1
    2bcc:	31 05       	cpc	r19, r1
    2bce:	49 f0       	breq	.+18     	; 0x2be2 <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    2bd0:	10 c0       	rjmp	.+32     	; 0x2bf2 <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    2bd2:	ae e4       	ldi	r26, 0x4E	; 78
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	ee e4       	ldi	r30, 0x4E	; 78
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 64       	ori	r24, 0x40	; 64
    2bde:	8c 93       	st	X, r24
    2be0:	0a c0       	rjmp	.+20     	; 0x2bf6 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    2be2:	ae e4       	ldi	r26, 0x4E	; 78
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	ee e4       	ldi	r30, 0x4E	; 78
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	8f 7b       	andi	r24, 0xBF	; 191
    2bee:	8c 93       	st	X, r24
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <WDT_voidEnable>:



void WDT_voidEnable(void)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    2c0e:	a1 e4       	ldi	r26, 0x41	; 65
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e1 e4       	ldi	r30, 0x41	; 65
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	88 60       	ori	r24, 0x08	; 8
    2c1a:	8c 93       	st	X, r24
}
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <WDT_voidDisable>:
void WDT_voidDisable(void)
{
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    2c2a:	a1 e4       	ldi	r26, 0x41	; 65
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e1 e4       	ldi	r30, 0x41	; 65
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	88 61       	ori	r24, 0x18	; 24
    2c36:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    2c38:	a1 e4       	ldi	r26, 0x41	; 65
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e1 e4       	ldi	r30, 0x41	; 65
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	87 7f       	andi	r24, 0xF7	; 247
    2c44:	8c 93       	st	X, r24
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <WDT_u8SetTime>:
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <WDT_u8SetTime+0x6>
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    2c58:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	88 30       	cpi	r24, 0x08	; 8
    2c5e:	80 f4       	brcc	.+32     	; 0x2c80 <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    2c60:	a1 e4       	ldi	r26, 0x41	; 65
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e1 e4       	ldi	r30, 0x41	; 65
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	88 7f       	andi	r24, 0xF8	; 248
    2c6c:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    2c6e:	a1 e4       	ldi	r26, 0x41	; 65
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e1 e4       	ldi	r30, 0x41	; 65
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	90 81       	ld	r25, Z
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	89 2b       	or	r24, r25
    2c7c:	8c 93       	st	X, r24
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <__vector_11>:


/*Timer/Counter 0 OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    2cba:	80 91 70 01 	lds	r24, 0x0170
    2cbe:	90 91 71 01 	lds	r25, 0x0171
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	29 f0       	breq	.+10     	; 0x2cd0 <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    2cc6:	e0 91 70 01 	lds	r30, 0x0170
    2cca:	f0 91 71 01 	lds	r31, 0x0171
    2cce:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	ff 91       	pop	r31
    2cd6:	ef 91       	pop	r30
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	9f 91       	pop	r25
    2cde:	8f 91       	pop	r24
    2ce0:	7f 91       	pop	r23
    2ce2:	6f 91       	pop	r22
    2ce4:	5f 91       	pop	r21
    2ce6:	4f 91       	pop	r20
    2ce8:	3f 91       	pop	r19
    2cea:	2f 91       	pop	r18
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <__vector_10>:

/*Timer/Counter 0 Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    2cf6:	1f 92       	push	r1
    2cf8:	0f 92       	push	r0
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	0f 92       	push	r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	2f 93       	push	r18
    2d02:	3f 93       	push	r19
    2d04:	4f 93       	push	r20
    2d06:	5f 93       	push	r21
    2d08:	6f 93       	push	r22
    2d0a:	7f 93       	push	r23
    2d0c:	8f 93       	push	r24
    2d0e:	9f 93       	push	r25
    2d10:	af 93       	push	r26
    2d12:	bf 93       	push	r27
    2d14:	ef 93       	push	r30
    2d16:	ff 93       	push	r31
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    2d20:	80 91 72 01 	lds	r24, 0x0172
    2d24:	90 91 73 01 	lds	r25, 0x0173
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	29 f0       	breq	.+10     	; 0x2d36 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    2d2c:	e0 91 72 01 	lds	r30, 0x0172
    2d30:	f0 91 73 01 	lds	r31, 0x0173
    2d34:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	ff 91       	pop	r31
    2d3c:	ef 91       	pop	r30
    2d3e:	bf 91       	pop	r27
    2d40:	af 91       	pop	r26
    2d42:	9f 91       	pop	r25
    2d44:	8f 91       	pop	r24
    2d46:	7f 91       	pop	r23
    2d48:	6f 91       	pop	r22
    2d4a:	5f 91       	pop	r21
    2d4c:	4f 91       	pop	r20
    2d4e:	3f 91       	pop	r19
    2d50:	2f 91       	pop	r18
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	0f 90       	pop	r0
    2d58:	1f 90       	pop	r1
    2d5a:	18 95       	reti

00002d5c <__vector_9>:

/*Timer/Counter 1 OverFlow Event ISR*/
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    2d5c:	1f 92       	push	r1
    2d5e:	0f 92       	push	r0
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	0f 92       	push	r0
    2d64:	11 24       	eor	r1, r1
    2d66:	2f 93       	push	r18
    2d68:	3f 93       	push	r19
    2d6a:	4f 93       	push	r20
    2d6c:	5f 93       	push	r21
    2d6e:	6f 93       	push	r22
    2d70:	7f 93       	push	r23
    2d72:	8f 93       	push	r24
    2d74:	9f 93       	push	r25
    2d76:	af 93       	push	r26
    2d78:	bf 93       	push	r27
    2d7a:	ef 93       	push	r30
    2d7c:	ff 93       	push	r31
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    2d86:	80 91 74 01 	lds	r24, 0x0174
    2d8a:	90 91 75 01 	lds	r25, 0x0175
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	29 f0       	breq	.+10     	; 0x2d9c <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    2d92:	e0 91 74 01 	lds	r30, 0x0174
    2d96:	f0 91 75 01 	lds	r31, 0x0175
    2d9a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	ff 91       	pop	r31
    2da2:	ef 91       	pop	r30
    2da4:	bf 91       	pop	r27
    2da6:	af 91       	pop	r26
    2da8:	9f 91       	pop	r25
    2daa:	8f 91       	pop	r24
    2dac:	7f 91       	pop	r23
    2dae:	6f 91       	pop	r22
    2db0:	5f 91       	pop	r21
    2db2:	4f 91       	pop	r20
    2db4:	3f 91       	pop	r19
    2db6:	2f 91       	pop	r18
    2db8:	0f 90       	pop	r0
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	0f 90       	pop	r0
    2dbe:	1f 90       	pop	r1
    2dc0:	18 95       	reti

00002dc2 <__vector_8>:

/*Timer/Counter 1 Channel B Compare Match Event ISR*/
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    2dc2:	1f 92       	push	r1
    2dc4:	0f 92       	push	r0
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	0f 92       	push	r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	2f 93       	push	r18
    2dce:	3f 93       	push	r19
    2dd0:	4f 93       	push	r20
    2dd2:	5f 93       	push	r21
    2dd4:	6f 93       	push	r22
    2dd6:	7f 93       	push	r23
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    2dec:	80 91 78 01 	lds	r24, 0x0178
    2df0:	90 91 79 01 	lds	r25, 0x0179
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	29 f0       	breq	.+10     	; 0x2e02 <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    2df8:	e0 91 78 01 	lds	r30, 0x0178
    2dfc:	f0 91 79 01 	lds	r31, 0x0179
    2e00:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	ff 91       	pop	r31
    2e08:	ef 91       	pop	r30
    2e0a:	bf 91       	pop	r27
    2e0c:	af 91       	pop	r26
    2e0e:	9f 91       	pop	r25
    2e10:	8f 91       	pop	r24
    2e12:	7f 91       	pop	r23
    2e14:	6f 91       	pop	r22
    2e16:	5f 91       	pop	r21
    2e18:	4f 91       	pop	r20
    2e1a:	3f 91       	pop	r19
    2e1c:	2f 91       	pop	r18
    2e1e:	0f 90       	pop	r0
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	0f 90       	pop	r0
    2e24:	1f 90       	pop	r1
    2e26:	18 95       	reti

00002e28 <__vector_7>:

/*Timer/Counter 1 Channel A Compare Match Event ISR*/
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    2e28:	1f 92       	push	r1
    2e2a:	0f 92       	push	r0
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	0f 92       	push	r0
    2e30:	11 24       	eor	r1, r1
    2e32:	2f 93       	push	r18
    2e34:	3f 93       	push	r19
    2e36:	4f 93       	push	r20
    2e38:	5f 93       	push	r21
    2e3a:	6f 93       	push	r22
    2e3c:	7f 93       	push	r23
    2e3e:	8f 93       	push	r24
    2e40:	9f 93       	push	r25
    2e42:	af 93       	push	r26
    2e44:	bf 93       	push	r27
    2e46:	ef 93       	push	r30
    2e48:	ff 93       	push	r31
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    2e52:	80 91 76 01 	lds	r24, 0x0176
    2e56:	90 91 77 01 	lds	r25, 0x0177
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	29 f0       	breq	.+10     	; 0x2e68 <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    2e5e:	e0 91 76 01 	lds	r30, 0x0176
    2e62:	f0 91 77 01 	lds	r31, 0x0177
    2e66:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	ff 91       	pop	r31
    2e6e:	ef 91       	pop	r30
    2e70:	bf 91       	pop	r27
    2e72:	af 91       	pop	r26
    2e74:	9f 91       	pop	r25
    2e76:	8f 91       	pop	r24
    2e78:	7f 91       	pop	r23
    2e7a:	6f 91       	pop	r22
    2e7c:	5f 91       	pop	r21
    2e7e:	4f 91       	pop	r20
    2e80:	3f 91       	pop	r19
    2e82:	2f 91       	pop	r18
    2e84:	0f 90       	pop	r0
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	0f 90       	pop	r0
    2e8a:	1f 90       	pop	r1
    2e8c:	18 95       	reti

00002e8e <__vector_6>:

/*Timer/Counter 1 Input Capture Event ISR*/
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    2e8e:	1f 92       	push	r1
    2e90:	0f 92       	push	r0
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	0f 92       	push	r0
    2e96:	11 24       	eor	r1, r1
    2e98:	2f 93       	push	r18
    2e9a:	3f 93       	push	r19
    2e9c:	4f 93       	push	r20
    2e9e:	5f 93       	push	r21
    2ea0:	6f 93       	push	r22
    2ea2:	7f 93       	push	r23
    2ea4:	8f 93       	push	r24
    2ea6:	9f 93       	push	r25
    2ea8:	af 93       	push	r26
    2eaa:	bf 93       	push	r27
    2eac:	ef 93       	push	r30
    2eae:	ff 93       	push	r31
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    2eb8:	80 91 7a 01 	lds	r24, 0x017A
    2ebc:	90 91 7b 01 	lds	r25, 0x017B
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	29 f0       	breq	.+10     	; 0x2ece <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    2ec4:	e0 91 7a 01 	lds	r30, 0x017A
    2ec8:	f0 91 7b 01 	lds	r31, 0x017B
    2ecc:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	ff 91       	pop	r31
    2ed4:	ef 91       	pop	r30
    2ed6:	bf 91       	pop	r27
    2ed8:	af 91       	pop	r26
    2eda:	9f 91       	pop	r25
    2edc:	8f 91       	pop	r24
    2ede:	7f 91       	pop	r23
    2ee0:	6f 91       	pop	r22
    2ee2:	5f 91       	pop	r21
    2ee4:	4f 91       	pop	r20
    2ee6:	3f 91       	pop	r19
    2ee8:	2f 91       	pop	r18
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <__vector_5>:

/*Timer/Counter 2 OverFlow Event ISR*/
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	0f 92       	push	r0
    2efc:	11 24       	eor	r1, r1
    2efe:	2f 93       	push	r18
    2f00:	3f 93       	push	r19
    2f02:	4f 93       	push	r20
    2f04:	5f 93       	push	r21
    2f06:	6f 93       	push	r22
    2f08:	7f 93       	push	r23
    2f0a:	8f 93       	push	r24
    2f0c:	9f 93       	push	r25
    2f0e:	af 93       	push	r26
    2f10:	bf 93       	push	r27
    2f12:	ef 93       	push	r30
    2f14:	ff 93       	push	r31
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    2f1e:	80 91 7c 01 	lds	r24, 0x017C
    2f22:	90 91 7d 01 	lds	r25, 0x017D
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	29 f0       	breq	.+10     	; 0x2f34 <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    2f2a:	e0 91 7c 01 	lds	r30, 0x017C
    2f2e:	f0 91 7d 01 	lds	r31, 0x017D
    2f32:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	ff 91       	pop	r31
    2f3a:	ef 91       	pop	r30
    2f3c:	bf 91       	pop	r27
    2f3e:	af 91       	pop	r26
    2f40:	9f 91       	pop	r25
    2f42:	8f 91       	pop	r24
    2f44:	7f 91       	pop	r23
    2f46:	6f 91       	pop	r22
    2f48:	5f 91       	pop	r21
    2f4a:	4f 91       	pop	r20
    2f4c:	3f 91       	pop	r19
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	0f 90       	pop	r0
    2f56:	1f 90       	pop	r1
    2f58:	18 95       	reti

00002f5a <__vector_4>:

/*Timer/Counter 2 Compare Match Event ISR*/
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    2f5a:	1f 92       	push	r1
    2f5c:	0f 92       	push	r0
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	0f 92       	push	r0
    2f62:	11 24       	eor	r1, r1
    2f64:	2f 93       	push	r18
    2f66:	3f 93       	push	r19
    2f68:	4f 93       	push	r20
    2f6a:	5f 93       	push	r21
    2f6c:	6f 93       	push	r22
    2f6e:	7f 93       	push	r23
    2f70:	8f 93       	push	r24
    2f72:	9f 93       	push	r25
    2f74:	af 93       	push	r26
    2f76:	bf 93       	push	r27
    2f78:	ef 93       	push	r30
    2f7a:	ff 93       	push	r31
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    2f84:	80 91 7e 01 	lds	r24, 0x017E
    2f88:	90 91 7f 01 	lds	r25, 0x017F
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	29 f0       	breq	.+10     	; 0x2f9a <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    2f90:	e0 91 7e 01 	lds	r30, 0x017E
    2f94:	f0 91 7f 01 	lds	r31, 0x017F
    2f98:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	7f 91       	pop	r23
    2fac:	6f 91       	pop	r22
    2fae:	5f 91       	pop	r21
    2fb0:	4f 91       	pop	r20
    2fb2:	3f 91       	pop	r19
    2fb4:	2f 91       	pop	r18
    2fb6:	0f 90       	pop	r0
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	0f 90       	pop	r0
    2fbc:	1f 90       	pop	r1
    2fbe:	18 95       	reti

00002fc0 <USART_voidInit>:

/**
 * @brief A function to initialize the USART peripheral.
 */
void USART_voidInit(void)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	0f 92       	push	r0
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
	/*Define Temporary Variable for UCSRC*/
	uint8 Local_u8TempUCSRC = 0u;
    2fca:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    2fcc:	aa e2       	ldi	r26, 0x2A	; 42
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	ea e2       	ldi	r30, 0x2A	; 42
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	80 61       	ori	r24, 0x10	; 16
    2fd8:	8c 93       	st	X, r24

	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    2fda:	aa e2       	ldi	r26, 0x2A	; 42
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	ea e2       	ldi	r30, 0x2A	; 42
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	88 60       	ori	r24, 0x08	; 8
    2fe6:	8c 93       	st	X, r24

	/*Disable Double Transmission Speed*/
	CLR_BIT(UCSRA,UCSRA_U2X);
    2fe8:	ab e2       	ldi	r26, 0x2B	; 43
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	eb e2       	ldi	r30, 0x2B	; 43
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8d 7f       	andi	r24, 0xFD	; 253
    2ff4:	8c 93       	st	X, r24
	CLR_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_u8CHAR_SIZE == EIGHT_BITS_CHAR_SIZE
	Local_u8TempUCSRC &= CHAR_SIZE_MASK;
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	89 7f       	andi	r24, 0xF9	; 249
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	82 60       	ori	r24, 0x02	; 2
    3000:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	84 60       	ori	r24, 0x04	; 4
    3006:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    3008:	aa e2       	ldi	r26, 0x2A	; 42
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	ea e2       	ldi	r30, 0x2A	; 42
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	80 81       	ld	r24, Z
    3012:	8b 7f       	andi	r24, 0xFB	; 251
    3014:	8c 93       	st	X, r24
	/*Select Synchronization Mode*/
#if USART_u8SYNCH_MODE == SYNCHRONOUS_MODE
	SET_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);

#elif USART_u8SYNCH_MODE == ASYNCHRONOUS_MODE
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	8f 7b       	andi	r24, 0xBF	; 191
    301a:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8SYNCH_MODE configuration type
#endif

	/*Select Parity Mode*/
#if USART_u8PARITY_MODE == DISABLED
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM0);
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8f 7e       	andi	r24, 0xEF	; 239
    3020:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM1);
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	8f 7d       	andi	r24, 0xDF	; 223
    3026:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8PARITY_MODE configuration type
#endif

	/*Select Stop Bit Mode*/
#if USART_u8STOP_BITS_NUM == ONE_BIT
	CLR_BIT(Local_u8TempUCSRC,UCSRC_USBS);
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	87 7f       	andi	r24, 0xF7	; 247
    302c:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong USART_u8STOP_BITS_NUM configuration type
#endif

	/*Select Mode of UCSRC Register to write on it*/
	SET_BIT(Local_u8TempUCSRC,UCSRC_URSEL);
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	80 68       	ori	r24, 0x80	; 128
    3032:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8TempUCSRC;
    3034:	e0 e4       	ldi	r30, 0x40	; 64
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	80 83       	st	Z, r24

	/*Set Baud Rate*/
	UBRRL = USART_u8BAUD_RATE;
    303c:	e9 e2       	ldi	r30, 0x29	; 41
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	83 e3       	ldi	r24, 0x33	; 51
    3042:	80 83       	st	Z, r24
}
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <USART_u8Send>:
 * @brief A function to transmit data with USART.
 * @param Copy_u16Data	Data that will be transmitted by USART.
 * @return Error State.
 */
uint8 USART_u8Send(uint16 Copy_u16Data)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	27 97       	sbiw	r28, 0x07	; 7
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	9f 83       	std	Y+7, r25	; 0x07
    3062:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3064:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    3066:	19 82       	std	Y+1, r1	; 0x01
    3068:	1a 82       	std	Y+2, r1	; 0x02
    306a:	1b 82       	std	Y+3, r1	; 0x03
    306c:	1c 82       	std	Y+4, r1	; 0x04

	/*Check if USART Transmitter is idle or not*/
	if((USART_u8TransmitBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
    306e:	80 91 8c 01 	lds	r24, 0x018C
    3072:	88 23       	and	r24, r24
    3074:	21 f0       	breq	.+8      	; 0x307e <USART_u8Send+0x32>
    3076:	80 91 8e 01 	lds	r24, 0x018E
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	e9 f5       	brne	.+122    	; 0x30f8 <USART_u8Send+0xac>
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	80 93 8c 01 	sts	0x018C, r24
    3084:	0b c0       	rjmp	.+22     	; 0x309c <USART_u8Send+0x50>

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	ab 81       	ldd	r26, Y+3	; 0x03
    308c:	bc 81       	ldd	r27, Y+4	; 0x04
    308e:	01 96       	adiw	r24, 0x01	; 1
    3090:	a1 1d       	adc	r26, r1
    3092:	b1 1d       	adc	r27, r1
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	ab 83       	std	Y+3, r26	; 0x03
    309a:	bc 83       	std	Y+4, r27	; 0x04
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
    309c:	eb e2       	ldi	r30, 0x2B	; 43
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	82 95       	swap	r24
    30a4:	86 95       	lsr	r24
    30a6:	87 70       	andi	r24, 0x07	; 7
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	81 70       	andi	r24, 0x01	; 1
    30ae:	90 70       	andi	r25, 0x00	; 0
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	61 f4       	brne	.+24     	; 0x30cc <USART_u8Send+0x80>
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	9a 81       	ldd	r25, Y+2	; 0x02
    30b8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ba:	bc 81       	ldd	r27, Y+4	; 0x04
    30bc:	80 3a       	cpi	r24, 0xA0	; 160
    30be:	26 e8       	ldi	r18, 0x86	; 134
    30c0:	92 07       	cpc	r25, r18
    30c2:	21 e0       	ldi	r18, 0x01	; 1
    30c4:	a2 07       	cpc	r26, r18
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	b2 07       	cpc	r27, r18
    30ca:	e8 f2       	brcs	.-70     	; 0x3086 <USART_u8Send+0x3a>
		{
			Local_u32TimeoutCounter++;
		}

		/*Check why the loop has been broken*/
		if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	ab 81       	ldd	r26, Y+3	; 0x03
    30d2:	bc 81       	ldd	r27, Y+4	; 0x04
    30d4:	80 3a       	cpi	r24, 0xA0	; 160
    30d6:	26 e8       	ldi	r18, 0x86	; 134
    30d8:	92 07       	cpc	r25, r18
    30da:	21 e0       	ldi	r18, 0x01	; 1
    30dc:	a2 07       	cpc	r26, r18
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	b2 07       	cpc	r27, r18
    30e2:	19 f4       	brne	.+6      	; 0x30ea <USART_u8Send+0x9e>
		{
			/*Loop is broken because the counter exceed timeout counts*/
			Local_u8ErrorState = TIMEOUT_ERR;
    30e4:	83 e0       	ldi	r24, 0x03	; 3
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	04 c0       	rjmp	.+8      	; 0x30f2 <USART_u8Send+0xa6>
		else
		{
			/*Loop is broken because the transmit buffer is ready*/

			/*Set the transmit data*/
			UDR = (uint8) Copy_u16Data;
    30ea:	ec e2       	ldi	r30, 0x2C	; 44
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	8e 81       	ldd	r24, Y+6	; 0x06
    30f0:	80 83       	st	Z, r24
			}
#endif
		}

		/*Reset busy flag to be idle*/
		USART_u8TransmitBusyState = IDLE;
    30f2:	10 92 8c 01 	sts	0x018C, r1
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <USART_u8Send+0xb0>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE_ERR;
    30f8:	84 e0       	ldi	r24, 0x04	; 4
    30fa:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error state*/
	return Local_u8ErrorState;
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    30fe:	27 96       	adiw	r28, 0x07	; 7
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <USART_u8Receive>:
 * @brief A function to receive data by USART up to nine bits.
 * @param Copy_pvData Pointer to return the data received.
 * @return Error State.
 */
uint8 USART_u8Receive(void *Copy_pvData)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	27 97       	sbiw	r28, 0x07	; 7
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	9f 83       	std	Y+7, r25	; 0x07
    3126:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3128:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    312a:	19 82       	std	Y+1, r1	; 0x01
    312c:	1a 82       	std	Y+2, r1	; 0x02
    312e:	1b 82       	std	Y+3, r1	; 0x03
    3130:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer*/
	if(Copy_pvData != NULL)
    3132:	8e 81       	ldd	r24, Y+6	; 0x06
    3134:	9f 81       	ldd	r25, Y+7	; 0x07
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	09 f4       	brne	.+2      	; 0x313c <USART_u8Receive+0x2c>
    313a:	43 c0       	rjmp	.+134    	; 0x31c2 <USART_u8Receive+0xb2>
	{
		if((USART_u8ReceiveBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
    313c:	80 91 8d 01 	lds	r24, 0x018D
    3140:	88 23       	and	r24, r24
    3142:	21 f0       	breq	.+8      	; 0x314c <USART_u8Receive+0x3c>
    3144:	80 91 8e 01 	lds	r24, 0x018E
    3148:	81 30       	cpi	r24, 0x01	; 1
    314a:	c1 f5       	brne	.+112    	; 0x31bc <USART_u8Receive+0xac>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	80 93 8d 01 	sts	0x018D, r24
    3152:	0b c0       	rjmp	.+22     	; 0x316a <USART_u8Receive+0x5a>

			/*Polling until USART receive data in receive buffer*/
			while(((GET_BIT(UCSRA,UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++;
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	9a 81       	ldd	r25, Y+2	; 0x02
    3158:	ab 81       	ldd	r26, Y+3	; 0x03
    315a:	bc 81       	ldd	r27, Y+4	; 0x04
    315c:	01 96       	adiw	r24, 0x01	; 1
    315e:	a1 1d       	adc	r26, r1
    3160:	b1 1d       	adc	r27, r1
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	9a 83       	std	Y+2, r25	; 0x02
    3166:	ab 83       	std	Y+3, r26	; 0x03
    3168:	bc 83       	std	Y+4, r27	; 0x04
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;

			/*Polling until USART receive data in receive buffer*/
			while(((GET_BIT(UCSRA,UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
    316a:	eb e2       	ldi	r30, 0x2B	; 43
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	88 23       	and	r24, r24
    3172:	64 f0       	brlt	.+24     	; 0x318c <USART_u8Receive+0x7c>
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	9a 81       	ldd	r25, Y+2	; 0x02
    3178:	ab 81       	ldd	r26, Y+3	; 0x03
    317a:	bc 81       	ldd	r27, Y+4	; 0x04
    317c:	80 3a       	cpi	r24, 0xA0	; 160
    317e:	26 e8       	ldi	r18, 0x86	; 134
    3180:	92 07       	cpc	r25, r18
    3182:	21 e0       	ldi	r18, 0x01	; 1
    3184:	a2 07       	cpc	r26, r18
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	b2 07       	cpc	r27, r18
    318a:	20 f3       	brcs	.-56     	; 0x3154 <USART_u8Receive+0x44>
			{
				Local_u32TimeoutCounter++;
			}

			/*Check why the loop has been broken*/
			if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	ab 81       	ldd	r26, Y+3	; 0x03
    3192:	bc 81       	ldd	r27, Y+4	; 0x04
    3194:	80 3a       	cpi	r24, 0xA0	; 160
    3196:	26 e8       	ldi	r18, 0x86	; 134
    3198:	92 07       	cpc	r25, r18
    319a:	21 e0       	ldi	r18, 0x01	; 1
    319c:	a2 07       	cpc	r26, r18
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	b2 07       	cpc	r27, r18
    31a2:	19 f4       	brne	.+6      	; 0x31aa <USART_u8Receive+0x9a>
			{
				/*Loop is broken because the counter exceed timeout counts*/
				Local_u8ErrorState = TIMEOUT_ERR;
    31a4:	83 e0       	ldi	r24, 0x03	; 3
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	06 c0       	rjmp	.+12     	; 0x31b6 <USART_u8Receive+0xa6>
			{
				/*Loop is broken because USART receive data*/

				/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				*(uint8 *) Copy_pvData = UDR;
    31aa:	ee 81       	ldd	r30, Y+6	; 0x06
    31ac:	ff 81       	ldd	r31, Y+7	; 0x07
    31ae:	ac e2       	ldi	r26, 0x2C	; 44
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	8c 91       	ld	r24, X
    31b4:	80 83       	st	Z, r24
				}
#endif
			}

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    31b6:	10 92 8d 01 	sts	0x018D, r1
    31ba:	05 c0       	rjmp	.+10     	; 0x31c6 <USART_u8Receive+0xb6>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    31bc:	84 e0       	ldi	r24, 0x04	; 4
    31be:	8d 83       	std	Y+5, r24	; 0x05
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <USART_u8Receive+0xb6>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    31c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    31c8:	27 96       	adiw	r28, 0x07	; 7
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <USART_u8SendBufferSynch>:
 * @param Copy_pvBufferArr	A pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return Error State.
 */
uint8 USART_u8SendBufferSynch(const void *Copy_pvBufferArr, uint8 Copy_u8BufferSize)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <USART_u8SendBufferSynch+0x6>
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <USART_u8SendBufferSynch+0x8>
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <USART_u8SendBufferSynch+0xa>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	9d 83       	std	Y+5, r25	; 0x05
    31ea:	8c 83       	std	Y+4, r24	; 0x04
    31ec:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    31ee:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    31f0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    31f2:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvBufferArr != NULL)
    31f4:	8c 81       	ldd	r24, Y+4	; 0x04
    31f6:	9d 81       	ldd	r25, Y+5	; 0x05
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	79 f1       	breq	.+94     	; 0x325a <USART_u8SendBufferSynch+0x80>
	{
		if(USART_u8TransmitBusyState == IDLE)
    31fc:	80 91 8c 01 	lds	r24, 0x018C
    3200:	88 23       	and	r24, r24
    3202:	41 f5       	brne	.+80     	; 0x3254 <USART_u8SendBufferSynch+0x7a>
		{
			/*Inform Others that transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	80 93 8c 01 	sts	0x018C, r24

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	80 93 8e 01 	sts	0x018E, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    3210:	19 82       	std	Y+1, r1	; 0x01
    3212:	17 c0       	rjmp	.+46     	; 0x3242 <USART_u8SendBufferSynch+0x68>
			{
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				/*Transmit each element with function USART_u8Send*/
				Local_u8ErrorFounder = USART_u8Send((uint8) (*((uint8 *) Copy_pvBufferArr + Local_u8Counter)));
    3214:	2c 81       	ldd	r18, Y+4	; 0x04
    3216:	3d 81       	ldd	r19, Y+5	; 0x05
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	88 2f       	mov	r24, r24
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	f9 01       	movw	r30, r18
    3220:	e8 0f       	add	r30, r24
    3222:	f9 1f       	adc	r31, r25
    3224:	80 81       	ld	r24, Z
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 26 18 	call	0x304c	; 0x304c <USART_u8Send>
    322e:	8a 83       	std	Y+2, r24	; 0x02
				Local_u8ErrorFounder = USART_u8Send(*((uint16 *) Copy_pvBufferArr + Local_u8Counter));

#endif

				/*Check that the transmission operation goes well*/
				if(Local_u8ErrorFounder != OK)
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	88 23       	and	r24, r24
    3234:	19 f0       	breq	.+6      	; 0x323c <USART_u8SendBufferSynch+0x62>
				{
					Local_u8ErrorState = NOK;
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	8b 83       	std	Y+3, r24	; 0x03
    323a:	07 c0       	rjmp	.+14     	; 0x324a <USART_u8SendBufferSynch+0x70>

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	8f 5f       	subi	r24, 0xFF	; 255
    3240:	89 83       	std	Y+1, r24	; 0x01
    3242:	99 81       	ldd	r25, Y+1	; 0x01
    3244:	8e 81       	ldd	r24, Y+6	; 0x06
    3246:	98 17       	cp	r25, r24
    3248:	28 f3       	brcs	.-54     	; 0x3214 <USART_u8SendBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Send that main is the caller from now*/
			USART_u8TransmitCallSrc = MAIN_CALL;
    324a:	10 92 8e 01 	sts	0x018E, r1

			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    324e:	10 92 8c 01 	sts	0x018C, r1
    3252:	05 c0       	rjmp	.+10     	; 0x325e <USART_u8SendBufferSynch+0x84>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3254:	84 e0       	ldi	r24, 0x04	; 4
    3256:	8b 83       	std	Y+3, r24	; 0x03
    3258:	02 c0       	rjmp	.+4      	; 0x325e <USART_u8SendBufferSynch+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    325a:	82 e0       	ldi	r24, 0x02	; 2
    325c:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3260:	26 96       	adiw	r28, 0x06	; 6
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <USART_u8ReceiveBufferSynch>:
 * @param Copy_pu16BufferArr	A pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return Error State.
 */
uint8 USART_u8ReceiveBufferSynch(uint16 *Copy_pu16BufferArr, uint8 Copy_u8BufferSize)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	00 d0       	rcall	.+0      	; 0x3278 <USART_u8ReceiveBufferSynch+0x6>
    3278:	00 d0       	rcall	.+0      	; 0x327a <USART_u8ReceiveBufferSynch+0x8>
    327a:	00 d0       	rcall	.+0      	; 0x327c <USART_u8ReceiveBufferSynch+0xa>
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	9d 83       	std	Y+5, r25	; 0x05
    3282:	8c 83       	std	Y+4, r24	; 0x04
    3284:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3286:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    3288:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    328a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pu16BufferArr != NULL)
    328c:	8c 81       	ldd	r24, Y+4	; 0x04
    328e:	9d 81       	ldd	r25, Y+5	; 0x05
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	71 f1       	breq	.+92     	; 0x32f0 <USART_u8ReceiveBufferSynch+0x7e>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    3294:	80 91 8d 01 	lds	r24, 0x018D
    3298:	88 23       	and	r24, r24
    329a:	39 f5       	brne	.+78     	; 0x32ea <USART_u8ReceiveBufferSynch+0x78>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	80 93 8d 01 	sts	0x018D, r24

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	80 93 8f 01 	sts	0x018F, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    32a8:	19 82       	std	Y+1, r1	; 0x01
    32aa:	16 c0       	rjmp	.+44     	; 0x32d8 <USART_u8ReceiveBufferSynch+0x66>
			{
				/*Transmit each element with function USART_u8Transmit*/
				Local_u8ErrorFounder = USART_u8Receive(&Copy_pu16BufferArr[Local_u8Counter]);
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9c 01       	movw	r18, r24
    32b4:	22 0f       	add	r18, r18
    32b6:	33 1f       	adc	r19, r19
    32b8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ba:	9d 81       	ldd	r25, Y+5	; 0x05
    32bc:	82 0f       	add	r24, r18
    32be:	93 1f       	adc	r25, r19
    32c0:	0e 94 88 18 	call	0x3110	; 0x3110 <USART_u8Receive>
    32c4:	8a 83       	std	Y+2, r24	; 0x02

				/*Check that the Receive operation goes well*/
				if(Local_u8ErrorFounder != OK)
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	88 23       	and	r24, r24
    32ca:	19 f0       	breq	.+6      	; 0x32d2 <USART_u8ReceiveBufferSynch+0x60>
				{
					Local_u8ErrorState = NOK;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	8b 83       	std	Y+3, r24	; 0x03
    32d0:	07 c0       	rjmp	.+14     	; 0x32e0 <USART_u8ReceiveBufferSynch+0x6e>

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	8f 5f       	subi	r24, 0xFF	; 255
    32d6:	89 83       	std	Y+1, r24	; 0x01
    32d8:	99 81       	ldd	r25, Y+1	; 0x01
    32da:	8e 81       	ldd	r24, Y+6	; 0x06
    32dc:	98 17       	cp	r25, r24
    32de:	30 f3       	brcs	.-52     	; 0x32ac <USART_u8ReceiveBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Receive that main is the caller from now*/
			USART_u8ReceiveCallSrc = MAIN_CALL;
    32e0:	10 92 8f 01 	sts	0x018F, r1

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    32e4:	10 92 8d 01 	sts	0x018D, r1
    32e8:	05 c0       	rjmp	.+10     	; 0x32f4 <USART_u8ReceiveBufferSynch+0x82>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    32ea:	84 e0       	ldi	r24, 0x04	; 4
    32ec:	8b 83       	std	Y+3, r24	; 0x03
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <USART_u8ReceiveBufferSynch+0x82>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    32f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    32f6:	26 96       	adiw	r28, 0x06	; 6
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <USART_u8SendBufferAsynch>:
 * @param Copy_u8BufferSize	Size of the buffer array.
 * @param Copy_pvNotificationFunc A pointer to the notification function.
 * @return Error state.
 */
uint8 USART_u8SendBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8BufferSize, void (*Copy_pvNotificationFunc)(void))
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	00 d0       	rcall	.+0      	; 0x330e <USART_u8SendBufferAsynch+0x6>
    330e:	00 d0       	rcall	.+0      	; 0x3310 <USART_u8SendBufferAsynch+0x8>
    3310:	00 d0       	rcall	.+0      	; 0x3312 <USART_u8SendBufferAsynch+0xa>
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	9b 83       	std	Y+3, r25	; 0x03
    3318:	8a 83       	std	Y+2, r24	; 0x02
    331a:	6c 83       	std	Y+4, r22	; 0x04
    331c:	5e 83       	std	Y+6, r21	; 0x06
    331e:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3320:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    3322:	8a 81       	ldd	r24, Y+2	; 0x02
    3324:	9b 81       	ldd	r25, Y+3	; 0x03
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	39 f1       	breq	.+78     	; 0x3378 <USART_u8SendBufferAsynch+0x70>
    332a:	8d 81       	ldd	r24, Y+5	; 0x05
    332c:	9e 81       	ldd	r25, Y+6	; 0x06
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	19 f1       	breq	.+70     	; 0x3378 <USART_u8SendBufferAsynch+0x70>
	{
		if(USART_u8TransmitBusyState == IDLE)
    3332:	80 91 8c 01 	lds	r24, 0x018C
    3336:	88 23       	and	r24, r24
    3338:	e1 f4       	brne	.+56     	; 0x3372 <USART_u8SendBufferAsynch+0x6a>
		{
			/*Inform Others that Transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	80 93 8c 01 	sts	0x018C, r24

			/*Initialize buffer pointer as global*/
			USART_pvTransmitBufferArr = Copy_pvBufferArr;
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	9b 81       	ldd	r25, Y+3	; 0x03
    3344:	90 93 84 01 	sts	0x0184, r25
    3348:	80 93 83 01 	sts	0x0183, r24

			/*Initialize buffer size as global*/
			USART_u8TransmitBufferSize = Copy_u8BufferSize;
    334c:	8c 81       	ldd	r24, Y+4	; 0x04
    334e:	80 93 82 01 	sts	0x0182, r24

			/*Initialize notification function as global*/
			USART_pvTransmitNotificationFunc = Copy_pvNotificationFunc;
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	90 93 81 01 	sts	0x0181, r25
    335a:	80 93 80 01 	sts	0x0180, r24

			/*Set the buffer counter to 0*/
			USART_u8TransmitBufferCounter = 0u;
    335e:	10 92 85 01 	sts	0x0185, r1

			/*Enable USART Data Register Empty Interrupt*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    3362:	aa e2       	ldi	r26, 0x2A	; 42
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	ea e2       	ldi	r30, 0x2A	; 42
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	80 62       	ori	r24, 0x20	; 32
    336e:	8c 93       	st	X, r24
    3370:	05 c0       	rjmp	.+10     	; 0x337c <USART_u8SendBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3372:	84 e0       	ldi	r24, 0x04	; 4
    3374:	89 83       	std	Y+1, r24	; 0x01
    3376:	02 c0       	rjmp	.+4      	; 0x337c <USART_u8SendBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3378:	82 e0       	ldi	r24, 0x02	; 2
    337a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    337c:	89 81       	ldd	r24, Y+1	; 0x01
}
    337e:	26 96       	adiw	r28, 0x06	; 6
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	08 95       	ret

00003390 <USART_u8ReceiveBufferAsynch>:
 * @param Copy_u8Bufferize Size of the buffer array.
 * @param Copy_pvNotificationFunc A pointer to the notification function.
 * @return Error State.
 */
uint8 USART_u8ReceiveBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8Bufferize, void (*Copy_pvNotificationFunc)(void))
{
    3390:	df 93       	push	r29
    3392:	cf 93       	push	r28
    3394:	00 d0       	rcall	.+0      	; 0x3396 <USART_u8ReceiveBufferAsynch+0x6>
    3396:	00 d0       	rcall	.+0      	; 0x3398 <USART_u8ReceiveBufferAsynch+0x8>
    3398:	00 d0       	rcall	.+0      	; 0x339a <USART_u8ReceiveBufferAsynch+0xa>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	9b 83       	std	Y+3, r25	; 0x03
    33a0:	8a 83       	std	Y+2, r24	; 0x02
    33a2:	6c 83       	std	Y+4, r22	; 0x04
    33a4:	5e 83       	std	Y+6, r21	; 0x06
    33a6:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    33a8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	39 f1       	breq	.+78     	; 0x3400 <USART_u8ReceiveBufferAsynch+0x70>
    33b2:	8d 81       	ldd	r24, Y+5	; 0x05
    33b4:	9e 81       	ldd	r25, Y+6	; 0x06
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	19 f1       	breq	.+70     	; 0x3400 <USART_u8ReceiveBufferAsynch+0x70>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    33ba:	80 91 8d 01 	lds	r24, 0x018D
    33be:	88 23       	and	r24, r24
    33c0:	e1 f4       	brne	.+56     	; 0x33fa <USART_u8ReceiveBufferAsynch+0x6a>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	80 93 8d 01 	sts	0x018D, r24

			/*Initialize buffer pointer as global*/
			USART_pvReceiveBufferArr = Copy_pvBufferArr;
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	90 93 8a 01 	sts	0x018A, r25
    33d0:	80 93 89 01 	sts	0x0189, r24

			/*Initialize buffer size as global*/
			USART_u8ReceiveBufferSize = Copy_u8Bufferize;
    33d4:	8c 81       	ldd	r24, Y+4	; 0x04
    33d6:	80 93 88 01 	sts	0x0188, r24

			/*Initialize notification function as global*/
			USART_pvReceiveNotificationFunc = Copy_pvNotificationFunc;
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	90 93 87 01 	sts	0x0187, r25
    33e2:	80 93 86 01 	sts	0x0186, r24

			/*Set the buffer counter to 0*/
			USART_u8ReceiveBufferCounter = 0u;
    33e6:	10 92 8b 01 	sts	0x018B, r1

			/*Enable USART RX Complete Interrupt*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    33ea:	aa e2       	ldi	r26, 0x2A	; 42
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	ea e2       	ldi	r30, 0x2A	; 42
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	80 68       	ori	r24, 0x80	; 128
    33f6:	8c 93       	st	X, r24
    33f8:	05 c0       	rjmp	.+10     	; 0x3404 <USART_u8ReceiveBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    33fa:	84 e0       	ldi	r24, 0x04	; 4
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	02 c0       	rjmp	.+4      	; 0x3404 <USART_u8ReceiveBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3404:	89 81       	ldd	r24, Y+1	; 0x01
}
    3406:	26 96       	adiw	r28, 0x06	; 6
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <__vector_13>:
/**
 * @brief USART Receive Complete ISR.
 */
void __vector_13 (void) __attribute((signal));
void __vector_13 (void)
{
    3418:	1f 92       	push	r1
    341a:	0f 92       	push	r0
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	0f 92       	push	r0
    3420:	11 24       	eor	r1, r1
    3422:	2f 93       	push	r18
    3424:	3f 93       	push	r19
    3426:	4f 93       	push	r20
    3428:	5f 93       	push	r21
    342a:	6f 93       	push	r22
    342c:	7f 93       	push	r23
    342e:	8f 93       	push	r24
    3430:	9f 93       	push	r25
    3432:	af 93       	push	r26
    3434:	bf 93       	push	r27
    3436:	ef 93       	push	r30
    3438:	ff 93       	push	r31
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
	/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	*((uint8 *) USART_pvReceiveBufferArr + USART_u8ReceiveBufferCounter) = UDR;
    3442:	80 91 89 01 	lds	r24, 0x0189
    3446:	90 91 8a 01 	lds	r25, 0x018A
    344a:	9c 01       	movw	r18, r24
    344c:	80 91 8b 01 	lds	r24, 0x018B
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	d9 01       	movw	r26, r18
    3456:	a8 0f       	add	r26, r24
    3458:	b9 1f       	adc	r27, r25
    345a:	ec e2       	ldi	r30, 0x2C	; 44
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	8c 93       	st	X, r24
	case 1u: SET_BIT(*(((uint16 *) USART_pvReceiveBufferArr) + USART_u8ReceiveBufferCounter),9u);	break;
	}
#endif

	/*Increment Receive Buffer Counter*/
	USART_u8ReceiveBufferCounter++;
    3462:	80 91 8b 01 	lds	r24, 0x018B
    3466:	8f 5f       	subi	r24, 0xFF	; 255
    3468:	80 93 8b 01 	sts	0x018B, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8ReceiveBufferCounter == USART_u8ReceiveBufferSize)
    346c:	90 91 8b 01 	lds	r25, 0x018B
    3470:	80 91 88 01 	lds	r24, 0x0188
    3474:	98 17       	cp	r25, r24
    3476:	a1 f4       	brne	.+40     	; 0x34a0 <__vector_13+0x88>
	{
		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    3478:	aa e2       	ldi	r26, 0x2A	; 42
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	ea e2       	ldi	r30, 0x2A	; 42
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	80 81       	ld	r24, Z
    3482:	8f 77       	andi	r24, 0x7F	; 127
    3484:	8c 93       	st	X, r24

		/*Reset busy flag for receive channel to be idle*/
		USART_u8ReceiveBusyState = IDLE;
    3486:	10 92 8d 01 	sts	0x018D, r1

		/*Call Notification Function*/
		if(USART_pvReceiveNotificationFunc != NULL)
    348a:	80 91 86 01 	lds	r24, 0x0186
    348e:	90 91 87 01 	lds	r25, 0x0187
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	29 f0       	breq	.+10     	; 0x34a0 <__vector_13+0x88>
		{
			USART_pvReceiveNotificationFunc();
    3496:	e0 91 86 01 	lds	r30, 0x0186
    349a:	f0 91 87 01 	lds	r31, 0x0187
    349e:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	ff 91       	pop	r31
    34a6:	ef 91       	pop	r30
    34a8:	bf 91       	pop	r27
    34aa:	af 91       	pop	r26
    34ac:	9f 91       	pop	r25
    34ae:	8f 91       	pop	r24
    34b0:	7f 91       	pop	r23
    34b2:	6f 91       	pop	r22
    34b4:	5f 91       	pop	r21
    34b6:	4f 91       	pop	r20
    34b8:	3f 91       	pop	r19
    34ba:	2f 91       	pop	r18
    34bc:	0f 90       	pop	r0
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	0f 90       	pop	r0
    34c2:	1f 90       	pop	r1
    34c4:	18 95       	reti

000034c6 <__vector_14>:
/**
 * @brief USART Data Register Empty ISR.
 */
void __vector_14 (void) __attribute((signal));
void __vector_14 (void)
{
    34c6:	1f 92       	push	r1
    34c8:	0f 92       	push	r0
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	0f 92       	push	r0
    34ce:	11 24       	eor	r1, r1
    34d0:	2f 93       	push	r18
    34d2:	3f 93       	push	r19
    34d4:	4f 93       	push	r20
    34d6:	5f 93       	push	r21
    34d8:	6f 93       	push	r22
    34da:	7f 93       	push	r23
    34dc:	8f 93       	push	r24
    34de:	9f 93       	push	r25
    34e0:	af 93       	push	r26
    34e2:	bf 93       	push	r27
    34e4:	ef 93       	push	r30
    34e6:	ff 93       	push	r31
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
	/*Set the data to the transmit register*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	UDR = *(((uint8 *) USART_pvTransmitBufferArr) + USART_u8TransmitBufferCounter);
    34f0:	ac e2       	ldi	r26, 0x2C	; 44
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	80 91 83 01 	lds	r24, 0x0183
    34f8:	90 91 84 01 	lds	r25, 0x0184
    34fc:	9c 01       	movw	r18, r24
    34fe:	80 91 85 01 	lds	r24, 0x0185
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	f9 01       	movw	r30, r18
    3508:	e8 0f       	add	r30, r24
    350a:	f9 1f       	adc	r31, r25
    350c:	80 81       	ld	r24, Z
    350e:	8c 93       	st	X, r24
	case 1u: SET_BIT(UCSRB,UCSRB_TXB8);	break;
	}
#endif

	/*Increment Transmit Buffer Counter*/
	USART_u8TransmitBufferCounter++;
    3510:	80 91 85 01 	lds	r24, 0x0185
    3514:	8f 5f       	subi	r24, 0xFF	; 255
    3516:	80 93 85 01 	sts	0x0185, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8TransmitBufferCounter == USART_u8TransmitBufferSize)
    351a:	90 91 85 01 	lds	r25, 0x0185
    351e:	80 91 82 01 	lds	r24, 0x0182
    3522:	98 17       	cp	r25, r24
    3524:	a1 f4       	brne	.+40     	; 0x354e <__vector_14+0x88>
	{
		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    3526:	aa e2       	ldi	r26, 0x2A	; 42
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	ea e2       	ldi	r30, 0x2A	; 42
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	8f 7d       	andi	r24, 0xDF	; 223
    3532:	8c 93       	st	X, r24

		/*Reset busy flag for transmit channel to be idle*/
		USART_u8TransmitBusyState = IDLE;
    3534:	10 92 8c 01 	sts	0x018C, r1

		/*Call Notification Function*/
		if(USART_pvTransmitNotificationFunc != NULL)
    3538:	80 91 80 01 	lds	r24, 0x0180
    353c:	90 91 81 01 	lds	r25, 0x0181
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	29 f0       	breq	.+10     	; 0x354e <__vector_14+0x88>
		{
			USART_pvTransmitNotificationFunc();
    3544:	e0 91 80 01 	lds	r30, 0x0180
    3548:	f0 91 81 01 	lds	r31, 0x0181
    354c:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	ff 91       	pop	r31
    3554:	ef 91       	pop	r30
    3556:	bf 91       	pop	r27
    3558:	af 91       	pop	r26
    355a:	9f 91       	pop	r25
    355c:	8f 91       	pop	r24
    355e:	7f 91       	pop	r23
    3560:	6f 91       	pop	r22
    3562:	5f 91       	pop	r21
    3564:	4f 91       	pop	r20
    3566:	3f 91       	pop	r19
    3568:	2f 91       	pop	r18
    356a:	0f 90       	pop	r0
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	0f 90       	pop	r0
    3570:	1f 90       	pop	r1
    3572:	18 95       	reti

00003574 <__vector_15>:
/**
 * @brief USART transmission Complete ISR.
 */
void __vector_15 (void) __attribute((signal));
void __vector_15 (void)
{
    3574:	1f 92       	push	r1
    3576:	0f 92       	push	r0
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	0f 92       	push	r0
    357c:	11 24       	eor	r1, r1
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62

}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	0f 90       	pop	r0
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	0f 90       	pop	r0
    3590:	1f 90       	pop	r1
    3592:	18 95       	reti

00003594 <ULTSONIC_u8MeasureDistance>:
 * @param Copy_stUltsonicData Pointer to struct that carry the ultrasonic data.
 * @param Copy_u16Distance Pointer to return the distance in cm.
 * @return Error State.
 */
uint8 ULTSONIC_u8MeasureDistance(const ULTSONIC_t *Copy_stUltsonicData, uint16 *Copy_u16Distance)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	aa 97       	sbiw	r28, 0x2a	; 42
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	98 a7       	std	Y+40, r25	; 0x28
    35aa:	8f a3       	std	Y+39, r24	; 0x27
    35ac:	7a a7       	std	Y+42, r23	; 0x2a
    35ae:	69 a7       	std	Y+41, r22	; 0x29
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    35b0:	1a a2       	std	Y+34, r1	; 0x22
	uint8 Local_u8ErrorFounder = OK;
    35b2:	19 a2       	std	Y+33, r1	; 0x21
	uint32 Local_u32EchoTime = 0u;
    35b4:	1d 8e       	std	Y+29, r1	; 0x1d
    35b6:	1e 8e       	std	Y+30, r1	; 0x1e
    35b8:	1f 8e       	std	Y+31, r1	; 0x1f
    35ba:	18 a2       	std	Y+32, r1	; 0x20
	uint32 Local_u32TimeoutCounter = 0u;
    35bc:	19 8e       	std	Y+25, r1	; 0x19
    35be:	1a 8e       	std	Y+26, r1	; 0x1a
    35c0:	1b 8e       	std	Y+27, r1	; 0x1b
    35c2:	1c 8e       	std	Y+28, r1	; 0x1c

	/*Initialize timer 1*/
	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	8b a3       	std	Y+35, r24	; 0x23
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    35c8:	1c a2       	std	Y+36, r1	; 0x24
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    35ca:	1d a2       	std	Y+37, r1	; 0x25
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    35cc:	1e a2       	std	Y+38, r1	; 0x26
	Local_u8ErrorFounder = TIMER1_u8Init(&Local_stTimer1Cfg);
    35ce:	ce 01       	movw	r24, r28
    35d0:	83 96       	adiw	r24, 0x23	; 35
    35d2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <TIMER1_u8Init>
    35d6:	89 a3       	std	Y+33, r24	; 0x21

	if(Local_u8ErrorFounder == OK)
    35d8:	89 a1       	ldd	r24, Y+33	; 0x21
    35da:	88 23       	and	r24, r24
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <ULTSONIC_u8MeasureDistance+0x4c>
    35de:	bb c1       	rjmp	.+886    	; 0x3956 <ULTSONIC_u8MeasureDistance+0x3c2>
	{
		/*Initialize and Enable Capture Unit and Overflow Interrupts of timer 1*/
		TIMERS_u8SetCallBack(TIMER1_OVF, ULTSONIC_voidOvfISR);
    35e0:	28 ee       	ldi	r18, 0xE8	; 232
    35e2:	3c e1       	ldi	r19, 0x1C	; 28
    35e4:	82 e0       	ldi	r24, 0x02	; 2
    35e6:	b9 01       	movw	r22, r18
    35e8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <TIMERS_u8SetCallBack>
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <TIMER1_u8SetInputCaptTriggerSrc>
		TIMERS_u8SetCallBack(TIMER1_CAPT, ULTSONIC_voidCaptureISR);
    35f2:	27 eb       	ldi	r18, 0xB7	; 183
    35f4:	3c e1       	ldi	r19, 0x1C	; 28
    35f6:	85 e0       	ldi	r24, 0x05	; 5
    35f8:	b9 01       	movw	r22, r18
    35fa:	0e 94 03 15 	call	0x2a06	; 0x2a06 <TIMERS_u8SetCallBack>
		TIMERS_u8IntEnable(TIMER1_CAPT);
    35fe:	85 e0       	ldi	r24, 0x05	; 5
    3600:	0e 94 b2 13 	call	0x2764	; 0x2764 <TIMERS_u8IntEnable>

		/*Trigger the ultrasonic to return its echo*/
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
    3604:	ef a1       	ldd	r30, Y+39	; 0x27
    3606:	f8 a5       	ldd	r31, Y+40	; 0x28
    3608:	80 81       	ld	r24, Z
    360a:	ef a1       	ldd	r30, Y+39	; 0x27
    360c:	f8 a5       	ldd	r31, Y+40	; 0x28
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	69 2f       	mov	r22, r25
    3612:	41 e0       	ldi	r20, 0x01	; 1
    3614:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a8 ec       	ldi	r26, 0xC8	; 200
    361e:	b2 e4       	ldi	r27, 0x42	; 66
    3620:	8d 8b       	std	Y+21, r24	; 0x15
    3622:	9e 8b       	std	Y+22, r25	; 0x16
    3624:	af 8b       	std	Y+23, r26	; 0x17
    3626:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3628:	6d 89       	ldd	r22, Y+21	; 0x15
    362a:	7e 89       	ldd	r23, Y+22	; 0x16
    362c:	8f 89       	ldd	r24, Y+23	; 0x17
    362e:	98 8d       	ldd	r25, Y+24	; 0x18
    3630:	2b ea       	ldi	r18, 0xAB	; 171
    3632:	3a ea       	ldi	r19, 0xAA	; 170
    3634:	4a e2       	ldi	r20, 0x2A	; 42
    3636:	50 e4       	ldi	r21, 0x40	; 64
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	89 8b       	std	Y+17, r24	; 0x11
    3642:	9a 8b       	std	Y+18, r25	; 0x12
    3644:	ab 8b       	std	Y+19, r26	; 0x13
    3646:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3648:	69 89       	ldd	r22, Y+17	; 0x11
    364a:	7a 89       	ldd	r23, Y+18	; 0x12
    364c:	8b 89       	ldd	r24, Y+19	; 0x13
    364e:	9c 89       	ldd	r25, Y+20	; 0x14
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	1c f4       	brge	.+6      	; 0x3666 <ULTSONIC_u8MeasureDistance+0xd2>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	88 8b       	std	Y+16, r24	; 0x10
    3664:	91 c0       	rjmp	.+290    	; 0x3788 <ULTSONIC_u8MeasureDistance+0x1f4>
	else if (__tmp > 255)
    3666:	69 89       	ldd	r22, Y+17	; 0x11
    3668:	7a 89       	ldd	r23, Y+18	; 0x12
    366a:	8b 89       	ldd	r24, Y+19	; 0x13
    366c:	9c 89       	ldd	r25, Y+20	; 0x14
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	4f e7       	ldi	r20, 0x7F	; 127
    3674:	53 e4       	ldi	r21, 0x43	; 67
    3676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    367a:	18 16       	cp	r1, r24
    367c:	0c f0       	brlt	.+2      	; 0x3680 <ULTSONIC_u8MeasureDistance+0xec>
    367e:	7b c0       	rjmp	.+246    	; 0x3776 <ULTSONIC_u8MeasureDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
    3680:	6d 89       	ldd	r22, Y+21	; 0x15
    3682:	7e 89       	ldd	r23, Y+22	; 0x16
    3684:	8f 89       	ldd	r24, Y+23	; 0x17
    3686:	98 8d       	ldd	r25, Y+24	; 0x18
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	4a e7       	ldi	r20, 0x7A	; 122
    368e:	54 e4       	ldi	r21, 0x44	; 68
    3690:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	8c 87       	std	Y+12, r24	; 0x0c
    369a:	9d 87       	std	Y+13, r25	; 0x0d
    369c:	ae 87       	std	Y+14, r26	; 0x0e
    369e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    36a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    36a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    36a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	4a ef       	ldi	r20, 0xFA	; 250
    36ae:	54 e4       	ldi	r21, 0x44	; 68
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	88 87       	std	Y+8, r24	; 0x08
    36ba:	99 87       	std	Y+9, r25	; 0x09
    36bc:	aa 87       	std	Y+10, r26	; 0x0a
    36be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36c0:	68 85       	ldd	r22, Y+8	; 0x08
    36c2:	79 85       	ldd	r23, Y+9	; 0x09
    36c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    36c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 e8       	ldi	r20, 0x80	; 128
    36ce:	5f e3       	ldi	r21, 0x3F	; 63
    36d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d4:	88 23       	and	r24, r24
    36d6:	2c f4       	brge	.+10     	; 0x36e2 <ULTSONIC_u8MeasureDistance+0x14e>
		__ticks = 1;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	9f 83       	std	Y+7, r25	; 0x07
    36de:	8e 83       	std	Y+6, r24	; 0x06
    36e0:	3f c0       	rjmp	.+126    	; 0x3760 <ULTSONIC_u8MeasureDistance+0x1cc>
	else if (__tmp > 65535)
    36e2:	68 85       	ldd	r22, Y+8	; 0x08
    36e4:	79 85       	ldd	r23, Y+9	; 0x09
    36e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	3f ef       	ldi	r19, 0xFF	; 255
    36ee:	4f e7       	ldi	r20, 0x7F	; 127
    36f0:	57 e4       	ldi	r21, 0x47	; 71
    36f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	4c f5       	brge	.+82     	; 0x374c <ULTSONIC_u8MeasureDistance+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    36fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    36fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3700:	9f 85       	ldd	r25, Y+15	; 0x0f
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e2       	ldi	r20, 0x20	; 32
    3708:	51 e4       	ldi	r21, 0x41	; 65
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	bc 01       	movw	r22, r24
    3714:	cd 01       	movw	r24, r26
    3716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9f 83       	std	Y+7, r25	; 0x07
    3720:	8e 83       	std	Y+6, r24	; 0x06
    3722:	0f c0       	rjmp	.+30     	; 0x3742 <ULTSONIC_u8MeasureDistance+0x1ae>
    3724:	88 ec       	ldi	r24, 0xC8	; 200
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	9d 83       	std	Y+5, r25	; 0x05
    372a:	8c 83       	std	Y+4, r24	; 0x04
    372c:	8c 81       	ldd	r24, Y+4	; 0x04
    372e:	9d 81       	ldd	r25, Y+5	; 0x05
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <ULTSONIC_u8MeasureDistance+0x19c>
    3734:	9d 83       	std	Y+5, r25	; 0x05
    3736:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3738:	8e 81       	ldd	r24, Y+6	; 0x06
    373a:	9f 81       	ldd	r25, Y+7	; 0x07
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	9f 83       	std	Y+7, r25	; 0x07
    3740:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3742:	8e 81       	ldd	r24, Y+6	; 0x06
    3744:	9f 81       	ldd	r25, Y+7	; 0x07
    3746:	00 97       	sbiw	r24, 0x00	; 0
    3748:	69 f7       	brne	.-38     	; 0x3724 <ULTSONIC_u8MeasureDistance+0x190>
    374a:	24 c0       	rjmp	.+72     	; 0x3794 <ULTSONIC_u8MeasureDistance+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374c:	68 85       	ldd	r22, Y+8	; 0x08
    374e:	79 85       	ldd	r23, Y+9	; 0x09
    3750:	8a 85       	ldd	r24, Y+10	; 0x0a
    3752:	9b 85       	ldd	r25, Y+11	; 0x0b
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	9f 83       	std	Y+7, r25	; 0x07
    375e:	8e 83       	std	Y+6, r24	; 0x06
    3760:	8e 81       	ldd	r24, Y+6	; 0x06
    3762:	9f 81       	ldd	r25, Y+7	; 0x07
    3764:	9b 83       	std	Y+3, r25	; 0x03
    3766:	8a 83       	std	Y+2, r24	; 0x02
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	9b 81       	ldd	r25, Y+3	; 0x03
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <ULTSONIC_u8MeasureDistance+0x1d8>
    3770:	9b 83       	std	Y+3, r25	; 0x03
    3772:	8a 83       	std	Y+2, r24	; 0x02
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <ULTSONIC_u8MeasureDistance+0x200>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3776:	69 89       	ldd	r22, Y+17	; 0x11
    3778:	7a 89       	ldd	r23, Y+18	; 0x12
    377a:	8b 89       	ldd	r24, Y+19	; 0x13
    377c:	9c 89       	ldd	r25, Y+20	; 0x14
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	88 8b       	std	Y+16, r24	; 0x10
    3788:	88 89       	ldd	r24, Y+16	; 0x10
    378a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	8a 95       	dec	r24
    3790:	f1 f7       	brne	.-4      	; 0x378e <ULTSONIC_u8MeasureDistance+0x1fa>
    3792:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);
    3794:	ef a1       	ldd	r30, Y+39	; 0x27
    3796:	f8 a5       	ldd	r31, Y+40	; 0x28
    3798:	80 81       	ld	r24, Z
    379a:	ef a1       	ldd	r30, Y+39	; 0x27
    379c:	f8 a5       	ldd	r31, Y+40	; 0x28
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	69 2f       	mov	r22, r25
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	0e 94 29 08 	call	0x1052	; 0x1052 <DIO_u8SetPinValue>
    37a8:	0b c0       	rjmp	.+22     	; 0x37c0 <ULTSONIC_u8MeasureDistance+0x22c>


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    37aa:	89 8d       	ldd	r24, Y+25	; 0x19
    37ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37ae:	ab 8d       	ldd	r26, Y+27	; 0x1b
    37b0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	a1 1d       	adc	r26, r1
    37b6:	b1 1d       	adc	r27, r1
    37b8:	89 8f       	std	Y+25, r24	; 0x19
    37ba:	9a 8f       	std	Y+26, r25	; 0x1a
    37bc:	ab 8f       	std	Y+27, r26	; 0x1b
    37be:	bc 8f       	std	Y+28, r27	; 0x1c
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
    37c0:	80 91 90 01 	lds	r24, 0x0190
    37c4:	90 91 91 01 	lds	r25, 0x0191
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	31 f0       	breq	.+12     	; 0x37d8 <ULTSONIC_u8MeasureDistance+0x244>
    37cc:	80 91 92 01 	lds	r24, 0x0192
    37d0:	90 91 93 01 	lds	r25, 0x0193
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	61 f4       	brne	.+24     	; 0x37f0 <ULTSONIC_u8MeasureDistance+0x25c>
    37d8:	89 8d       	ldd	r24, Y+25	; 0x19
    37da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37dc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    37de:	bc 8d       	ldd	r27, Y+28	; 0x1c
    37e0:	80 35       	cpi	r24, 0x50	; 80
    37e2:	23 ec       	ldi	r18, 0xC3	; 195
    37e4:	92 07       	cpc	r25, r18
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	a2 07       	cpc	r26, r18
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	b2 07       	cpc	r27, r18
    37ee:	e8 f2       	brcs	.-70     	; 0x37aa <ULTSONIC_u8MeasureDistance+0x216>
		{
			Local_u32TimeoutCounter++;
		}

		/*Disable timer 1 and overflow interrupt of it*/
		TIMERS_u8IntDisable(TIMER1_OVF);
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	0e 94 39 14 	call	0x2872	; 0x2872 <TIMERS_u8IntDisable>
		TIMERS_u8IntDisable(TIMER1_CAPT);
    37f6:	85 e0       	ldi	r24, 0x05	; 5
    37f8:	0e 94 39 14 	call	0x2872	; 0x2872 <TIMERS_u8IntDisable>
		TIMERS_u8Disable(TIMER1);
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	0e 94 c0 14 	call	0x2980	; 0x2980 <TIMERS_u8Disable>

		/*Check if there was overflow interrupts or not*/
		if(ULTSONIC_u16EchoOvfCounter == 0u)
    3802:	80 91 96 01 	lds	r24, 0x0196
    3806:	90 91 97 01 	lds	r25, 0x0197
    380a:	00 97       	sbiw	r24, 0x00	; 0
    380c:	a1 f4       	brne	.+40     	; 0x3836 <ULTSONIC_u8MeasureDistance+0x2a2>
		{
			/*Calculate Echo Time in microseconds*/
			Local_u32EchoTime = ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1;
    380e:	20 91 92 01 	lds	r18, 0x0192
    3812:	30 91 93 01 	lds	r19, 0x0193
    3816:	80 91 90 01 	lds	r24, 0x0190
    381a:	90 91 91 01 	lds	r25, 0x0191
    381e:	a9 01       	movw	r20, r18
    3820:	48 1b       	sub	r20, r24
    3822:	59 0b       	sbc	r21, r25
    3824:	ca 01       	movw	r24, r20
    3826:	cc 01       	movw	r24, r24
    3828:	a0 e0       	ldi	r26, 0x00	; 0
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	8d 8f       	std	Y+29, r24	; 0x1d
    382e:	9e 8f       	std	Y+30, r25	; 0x1e
    3830:	af 8f       	std	Y+31, r26	; 0x1f
    3832:	b8 a3       	std	Y+32, r27	; 0x20
    3834:	59 c0       	rjmp	.+178    	; 0x38e8 <ULTSONIC_u8MeasureDistance+0x354>
		}
		else
		{
			/*Calculate Echo Time in microseconds*/
			if(ULTSONIC_u16Capture2 >= ULTSONIC_u16Capture1)
    3836:	20 91 92 01 	lds	r18, 0x0192
    383a:	30 91 93 01 	lds	r19, 0x0193
    383e:	80 91 90 01 	lds	r24, 0x0190
    3842:	90 91 91 01 	lds	r25, 0x0191
    3846:	28 17       	cp	r18, r24
    3848:	39 07       	cpc	r19, r25
    384a:	10 f1       	brcs	.+68     	; 0x3890 <ULTSONIC_u8MeasureDistance+0x2fc>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    384c:	20 91 92 01 	lds	r18, 0x0192
    3850:	30 91 93 01 	lds	r19, 0x0193
    3854:	80 91 90 01 	lds	r24, 0x0190
    3858:	90 91 91 01 	lds	r25, 0x0191
    385c:	a9 01       	movw	r20, r18
    385e:	48 1b       	sub	r20, r24
    3860:	59 0b       	sbc	r21, r25
    3862:	ca 01       	movw	r24, r20
    3864:	9c 01       	movw	r18, r24
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	50 e0       	ldi	r21, 0x00	; 0
    386a:	80 91 96 01 	lds	r24, 0x0196
    386e:	90 91 97 01 	lds	r25, 0x0197
    3872:	cc 01       	movw	r24, r24
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	dc 01       	movw	r26, r24
    387a:	99 27       	eor	r25, r25
    387c:	88 27       	eor	r24, r24
    387e:	82 0f       	add	r24, r18
    3880:	93 1f       	adc	r25, r19
    3882:	a4 1f       	adc	r26, r20
    3884:	b5 1f       	adc	r27, r21
    3886:	8d 8f       	std	Y+29, r24	; 0x1d
    3888:	9e 8f       	std	Y+30, r25	; 0x1e
    388a:	af 8f       	std	Y+31, r26	; 0x1f
    388c:	b8 a3       	std	Y+32, r27	; 0x20
    388e:	2c c0       	rjmp	.+88     	; 0x38e8 <ULTSONIC_u8MeasureDistance+0x354>
			}
			else if(ULTSONIC_u16Capture2 < ULTSONIC_u16Capture1)
    3890:	20 91 92 01 	lds	r18, 0x0192
    3894:	30 91 93 01 	lds	r19, 0x0193
    3898:	80 91 90 01 	lds	r24, 0x0190
    389c:	90 91 91 01 	lds	r25, 0x0191
    38a0:	28 17       	cp	r18, r24
    38a2:	39 07       	cpc	r19, r25
    38a4:	08 f5       	brcc	.+66     	; 0x38e8 <ULTSONIC_u8MeasureDistance+0x354>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture1 - ULTSONIC_u16Capture2) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    38a6:	20 91 90 01 	lds	r18, 0x0190
    38aa:	30 91 91 01 	lds	r19, 0x0191
    38ae:	80 91 92 01 	lds	r24, 0x0192
    38b2:	90 91 93 01 	lds	r25, 0x0193
    38b6:	a9 01       	movw	r20, r18
    38b8:	48 1b       	sub	r20, r24
    38ba:	59 0b       	sbc	r21, r25
    38bc:	ca 01       	movw	r24, r20
    38be:	9c 01       	movw	r18, r24
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	80 91 96 01 	lds	r24, 0x0196
    38c8:	90 91 97 01 	lds	r25, 0x0197
    38cc:	cc 01       	movw	r24, r24
    38ce:	a0 e0       	ldi	r26, 0x00	; 0
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	dc 01       	movw	r26, r24
    38d4:	99 27       	eor	r25, r25
    38d6:	88 27       	eor	r24, r24
    38d8:	82 0f       	add	r24, r18
    38da:	93 1f       	adc	r25, r19
    38dc:	a4 1f       	adc	r26, r20
    38de:	b5 1f       	adc	r27, r21
    38e0:	8d 8f       	std	Y+29, r24	; 0x1d
    38e2:	9e 8f       	std	Y+30, r25	; 0x1e
    38e4:	af 8f       	std	Y+31, r26	; 0x1f
    38e6:	b8 a3       	std	Y+32, r27	; 0x20
			}
		}

		/*Measure Distance using Echo Time*/
		*Copy_u16Distance = (((f32) Local_u32EchoTime / 2.0) * (34.0 / 1000.0));
    38e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    38ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
    38ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38ee:	98 a1       	ldd	r25, Y+32	; 0x20
    38f0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	50 e4       	ldi	r21, 0x40	; 64
    3904:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	26 e9       	ldi	r18, 0x96	; 150
    3912:	33 e4       	ldi	r19, 0x43	; 67
    3914:	4b e0       	ldi	r20, 0x0B	; 11
    3916:	5d e3       	ldi	r21, 0x3D	; 61
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	e9 a5       	ldd	r30, Y+41	; 0x29
    392e:	fa a5       	ldd	r31, Y+42	; 0x2a
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24

		/*Reset the global variables*/
		ULTSONIC_u16Capture1 = 0u;
    3934:	10 92 91 01 	sts	0x0191, r1
    3938:	10 92 90 01 	sts	0x0190, r1
		ULTSONIC_u16Capture2 = 0u;
    393c:	10 92 93 01 	sts	0x0193, r1
    3940:	10 92 92 01 	sts	0x0192, r1
		ULTSONIC_u16OvfCounter = 0u;
    3944:	10 92 95 01 	sts	0x0195, r1
    3948:	10 92 94 01 	sts	0x0194, r1
		ULTSONIC_u16EchoOvfCounter = 0u;
    394c:	10 92 97 01 	sts	0x0197, r1
    3950:	10 92 96 01 	sts	0x0196, r1
    3954:	02 c0       	rjmp	.+4      	; 0x395a <ULTSONIC_u8MeasureDistance+0x3c6>
	}
	else
	{
		Local_u8ErrorState = NOK;
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	8a a3       	std	Y+34, r24	; 0x22
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    395a:	8a a1       	ldd	r24, Y+34	; 0x22
}
    395c:	aa 96       	adiw	r28, 0x2a	; 42
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <ULTSONIC_voidCaptureISR>:

/*Input Capture ISR*/
static void ULTSONIC_voidCaptureISR(void)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    3976:	80 91 98 01 	lds	r24, 0x0198
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	80 93 98 01 	sts	0x0198, r24

	if(Local_u8Counter == 1u)
    3980:	80 91 98 01 	lds	r24, 0x0198
    3984:	81 30       	cpi	r24, 0x01	; 1
    3986:	69 f4       	brne	.+26     	; 0x39a2 <ULTSONIC_voidCaptureISR+0x34>
	{
		/*Enable Overflow interrupt of timer1*/
		TIMERS_u8IntEnable(TIMER1_OVF);
    3988:	82 e0       	ldi	r24, 0x02	; 2
    398a:	0e 94 b2 13 	call	0x2764	; 0x2764 <TIMERS_u8IntEnable>
		ULTSONIC_u16Capture1 = TIMER1_u16GetInputCaptValue();
    398e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <TIMER1_u16GetInputCaptValue>
    3992:	90 93 91 01 	sts	0x0191, r25
    3996:	80 93 90 01 	sts	0x0190, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <TIMER1_u8SetInputCaptTriggerSrc>
    39a0:	14 c0       	rjmp	.+40     	; 0x39ca <ULTSONIC_voidCaptureISR+0x5c>
	}
	else if(Local_u8Counter == 2u)
    39a2:	80 91 98 01 	lds	r24, 0x0198
    39a6:	82 30       	cpi	r24, 0x02	; 2
    39a8:	81 f4       	brne	.+32     	; 0x39ca <ULTSONIC_voidCaptureISR+0x5c>
	{
		ULTSONIC_u16Capture2 = TIMER1_u16GetInputCaptValue();
    39aa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <TIMER1_u16GetInputCaptValue>
    39ae:	90 93 93 01 	sts	0x0193, r25
    39b2:	80 93 92 01 	sts	0x0192, r24
		ULTSONIC_u16EchoOvfCounter = ULTSONIC_u16OvfCounter;
    39b6:	80 91 94 01 	lds	r24, 0x0194
    39ba:	90 91 95 01 	lds	r25, 0x0195
    39be:	90 93 97 01 	sts	0x0197, r25
    39c2:	80 93 96 01 	sts	0x0196, r24
		Local_u8Counter = 0;
    39c6:	10 92 98 01 	sts	0x0198, r1
	}
}
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <ULTSONIC_voidOvfISR>:

/*Overflow ISR*/
static void ULTSONIC_voidOvfISR(void)
{
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62

	ULTSONIC_u16OvfCounter++;
    39d8:	80 91 94 01 	lds	r24, 0x0194
    39dc:	90 91 95 01 	lds	r25, 0x0195
    39e0:	01 96       	adiw	r24, 0x01	; 1
    39e2:	90 93 95 01 	sts	0x0195, r25
    39e6:	80 93 94 01 	sts	0x0194, r24
}
    39ea:	cf 91       	pop	r28
    39ec:	df 91       	pop	r29
    39ee:	08 95       	ret

000039f0 <__prologue_saves__>:
    39f0:	2f 92       	push	r2
    39f2:	3f 92       	push	r3
    39f4:	4f 92       	push	r4
    39f6:	5f 92       	push	r5
    39f8:	6f 92       	push	r6
    39fa:	7f 92       	push	r7
    39fc:	8f 92       	push	r8
    39fe:	9f 92       	push	r9
    3a00:	af 92       	push	r10
    3a02:	bf 92       	push	r11
    3a04:	cf 92       	push	r12
    3a06:	df 92       	push	r13
    3a08:	ef 92       	push	r14
    3a0a:	ff 92       	push	r15
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	cd b7       	in	r28, 0x3d	; 61
    3a16:	de b7       	in	r29, 0x3e	; 62
    3a18:	ca 1b       	sub	r28, r26
    3a1a:	db 0b       	sbc	r29, r27
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	09 94       	ijmp

00003a28 <__epilogue_restores__>:
    3a28:	2a 88       	ldd	r2, Y+18	; 0x12
    3a2a:	39 88       	ldd	r3, Y+17	; 0x11
    3a2c:	48 88       	ldd	r4, Y+16	; 0x10
    3a2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a30:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a32:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a34:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a36:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a38:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a3a:	b9 84       	ldd	r11, Y+9	; 0x09
    3a3c:	c8 84       	ldd	r12, Y+8	; 0x08
    3a3e:	df 80       	ldd	r13, Y+7	; 0x07
    3a40:	ee 80       	ldd	r14, Y+6	; 0x06
    3a42:	fd 80       	ldd	r15, Y+5	; 0x05
    3a44:	0c 81       	ldd	r16, Y+4	; 0x04
    3a46:	1b 81       	ldd	r17, Y+3	; 0x03
    3a48:	aa 81       	ldd	r26, Y+2	; 0x02
    3a4a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a4c:	ce 0f       	add	r28, r30
    3a4e:	d1 1d       	adc	r29, r1
    3a50:	0f b6       	in	r0, 0x3f	; 63
    3a52:	f8 94       	cli
    3a54:	de bf       	out	0x3e, r29	; 62
    3a56:	0f be       	out	0x3f, r0	; 63
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	ed 01       	movw	r28, r26
    3a5c:	08 95       	ret

00003a5e <_exit>:
    3a5e:	f8 94       	cli

00003a60 <__stop_program>:
    3a60:	ff cf       	rjmp	.-2      	; 0x3a60 <__stop_program>
