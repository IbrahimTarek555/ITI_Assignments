
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000834  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000047b  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 0d 04 	jmp	0x81a	; 0x81a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <DIO_u8SetPinDirection>:
#include "../Header/DIO_interface.h"
#include "../Header/DIO_private.h"
#include "../Header/DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
  7e:	28 97       	sbiw	r28, 0x08	; 8
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	de bf       	out	0x3e, r29	; 62
  86:	0f be       	out	0x3f, r0	; 63
  88:	cd bf       	out	0x3d, r28	; 61
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
  90:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
  92:	8b 81       	ldd	r24, Y+3	; 0x03
  94:	88 30       	cpi	r24, 0x08	; 8
  96:	08 f0       	brcs	.+2      	; 0x9a <DIO_u8SetPinDirection+0x24>
  98:	f4 c0       	rjmp	.+488    	; 0x282 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
  9a:	8c 81       	ldd	r24, Y+4	; 0x04
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	09 f0       	breq	.+2      	; 0xa2 <DIO_u8SetPinDirection+0x2c>
  a0:	72 c0       	rjmp	.+228    	; 0x186 <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
  a2:	8a 81       	ldd	r24, Y+2	; 0x02
  a4:	28 2f       	mov	r18, r24
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	38 87       	std	Y+8, r19	; 0x08
  aa:	2f 83       	std	Y+7, r18	; 0x07
  ac:	8f 81       	ldd	r24, Y+7	; 0x07
  ae:	98 85       	ldd	r25, Y+8	; 0x08
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	91 05       	cpc	r25, r1
  b4:	49 f1       	breq	.+82     	; 0x108 <DIO_u8SetPinDirection+0x92>
  b6:	2f 81       	ldd	r18, Y+7	; 0x07
  b8:	38 85       	ldd	r19, Y+8	; 0x08
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	31 05       	cpc	r19, r1
  be:	2c f4       	brge	.+10     	; 0xca <DIO_u8SetPinDirection+0x54>
  c0:	8f 81       	ldd	r24, Y+7	; 0x07
  c2:	98 85       	ldd	r25, Y+8	; 0x08
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	61 f0       	breq	.+24     	; 0xe0 <DIO_u8SetPinDirection+0x6a>
  c8:	5b c0       	rjmp	.+182    	; 0x180 <DIO_u8SetPinDirection+0x10a>
  ca:	2f 81       	ldd	r18, Y+7	; 0x07
  cc:	38 85       	ldd	r19, Y+8	; 0x08
  ce:	22 30       	cpi	r18, 0x02	; 2
  d0:	31 05       	cpc	r19, r1
  d2:	71 f1       	breq	.+92     	; 0x130 <DIO_u8SetPinDirection+0xba>
  d4:	8f 81       	ldd	r24, Y+7	; 0x07
  d6:	98 85       	ldd	r25, Y+8	; 0x08
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	91 05       	cpc	r25, r1
  dc:	e9 f1       	breq	.+122    	; 0x158 <DIO_u8SetPinDirection+0xe2>
  de:	50 c0       	rjmp	.+160    	; 0x180 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
  e0:	aa e3       	ldi	r26, 0x3A	; 58
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ea e3       	ldi	r30, 0x3A	; 58
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_u8SetPinDirection+0x88>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_u8SetPinDirection+0x84>
 102:	84 2b       	or	r24, r20
 104:	8c 93       	st	X, r24
 106:	bf c0       	rjmp	.+382    	; 0x286 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
 108:	a7 e3       	ldi	r26, 0x37	; 55
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e7 e3       	ldi	r30, 0x37	; 55
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	48 2f       	mov	r20, r24
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	28 2f       	mov	r18, r24
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 2e       	mov	r0, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_u8SetPinDirection+0xb0>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_u8SetPinDirection+0xac>
 12a:	84 2b       	or	r24, r20
 12c:	8c 93       	st	X, r24
 12e:	ab c0       	rjmp	.+342    	; 0x286 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
 130:	a4 e3       	ldi	r26, 0x34	; 52
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e4 e3       	ldi	r30, 0x34	; 52
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 2e       	mov	r0, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_u8SetPinDirection+0xd8>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_u8SetPinDirection+0xd4>
 152:	84 2b       	or	r24, r20
 154:	8c 93       	st	X, r24
 156:	97 c0       	rjmp	.+302    	; 0x286 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
 158:	a1 e3       	ldi	r26, 0x31	; 49
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e1 e3       	ldi	r30, 0x31	; 49
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	48 2f       	mov	r20, r24
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_u8SetPinDirection+0x100>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_u8SetPinDirection+0xfc>
 17a:	84 2b       	or	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	83 c0       	rjmp	.+262    	; 0x286 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	80 c0       	rjmp	.+256    	; 0x286 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	88 23       	and	r24, r24
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_u8SetPinDirection+0x118>
 18c:	77 c0       	rjmp	.+238    	; 0x27c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	3e 83       	std	Y+6, r19	; 0x06
 196:	2d 83       	std	Y+5, r18	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	59 f1       	breq	.+86     	; 0x1f8 <DIO_u8SetPinDirection+0x182>
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_u8SetPinDirection+0x140>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	69 f0       	breq	.+26     	; 0x1ce <DIO_u8SetPinDirection+0x158>
 1b4:	60 c0       	rjmp	.+192    	; 0x276 <DIO_u8SetPinDirection+0x200>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	89 f1       	breq	.+98     	; 0x222 <DIO_u8SetPinDirection+0x1ac>
 1c0:	8d 81       	ldd	r24, Y+5	; 0x05
 1c2:	9e 81       	ldd	r25, Y+6	; 0x06
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	09 f4       	brne	.+2      	; 0x1cc <DIO_u8SetPinDirection+0x156>
 1ca:	40 c0       	rjmp	.+128    	; 0x24c <DIO_u8SetPinDirection+0x1d6>
 1cc:	54 c0       	rjmp	.+168    	; 0x276 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
 1ce:	aa e3       	ldi	r26, 0x3A	; 58
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	48 2f       	mov	r20, r24
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinDirection+0x176>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinDirection+0x172>
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	47 c0       	rjmp	.+142    	; 0x286 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
 1f8:	a7 e3       	ldi	r26, 0x37	; 55
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e7 e3       	ldi	r30, 0x37	; 55
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_u8SetPinDirection+0x1a0>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_u8SetPinDirection+0x19c>
 21a:	80 95       	com	r24
 21c:	84 23       	and	r24, r20
 21e:	8c 93       	st	X, r24
 220:	32 c0       	rjmp	.+100    	; 0x286 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
 222:	a4 e3       	ldi	r26, 0x34	; 52
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e4 e3       	ldi	r30, 0x34	; 52
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_u8SetPinDirection+0x1ca>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_u8SetPinDirection+0x1c6>
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	8c 93       	st	X, r24
 24a:	1d c0       	rjmp	.+58     	; 0x286 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
 24c:	a1 e3       	ldi	r26, 0x31	; 49
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e1 e3       	ldi	r30, 0x31	; 49
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	48 2f       	mov	r20, r24
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 2e       	mov	r0, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_u8SetPinDirection+0x1f4>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_u8SetPinDirection+0x1f0>
 26e:	80 95       	com	r24
 270:	84 23       	and	r24, r20
 272:	8c 93       	st	X, r24
 274:	08 c0       	rjmp	.+16     	; 0x286 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	89 83       	std	Y+1, r24	; 0x01
 27a:	05 c0       	rjmp	.+10     	; 0x286 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
 286:	89 81       	ldd	r24, Y+1	; 0x01
}
 288:	28 96       	adiw	r28, 0x08	; 8
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	08 95       	ret

0000029a <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
 29a:	df 93       	push	r29
 29c:	cf 93       	push	r28
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	28 97       	sbiw	r28, 0x08	; 8
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
 2b2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 2b4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	88 30       	cpi	r24, 0x08	; 8
 2ba:	08 f0       	brcs	.+2      	; 0x2be <DIO_u8SetPinValue+0x24>
 2bc:	f4 c0       	rjmp	.+488    	; 0x4a6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <DIO_u8SetPinValue+0x2c>
 2c4:	72 c0       	rjmp	.+228    	; 0x3aa <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	38 87       	std	Y+8, r19	; 0x08
 2ce:	2f 83       	std	Y+7, r18	; 0x07
 2d0:	8f 81       	ldd	r24, Y+7	; 0x07
 2d2:	98 85       	ldd	r25, Y+8	; 0x08
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	91 05       	cpc	r25, r1
 2d8:	49 f1       	breq	.+82     	; 0x32c <DIO_u8SetPinValue+0x92>
 2da:	2f 81       	ldd	r18, Y+7	; 0x07
 2dc:	38 85       	ldd	r19, Y+8	; 0x08
 2de:	22 30       	cpi	r18, 0x02	; 2
 2e0:	31 05       	cpc	r19, r1
 2e2:	2c f4       	brge	.+10     	; 0x2ee <DIO_u8SetPinValue+0x54>
 2e4:	8f 81       	ldd	r24, Y+7	; 0x07
 2e6:	98 85       	ldd	r25, Y+8	; 0x08
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	61 f0       	breq	.+24     	; 0x304 <DIO_u8SetPinValue+0x6a>
 2ec:	5b c0       	rjmp	.+182    	; 0x3a4 <DIO_u8SetPinValue+0x10a>
 2ee:	2f 81       	ldd	r18, Y+7	; 0x07
 2f0:	38 85       	ldd	r19, Y+8	; 0x08
 2f2:	22 30       	cpi	r18, 0x02	; 2
 2f4:	31 05       	cpc	r19, r1
 2f6:	71 f1       	breq	.+92     	; 0x354 <DIO_u8SetPinValue+0xba>
 2f8:	8f 81       	ldd	r24, Y+7	; 0x07
 2fa:	98 85       	ldd	r25, Y+8	; 0x08
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	91 05       	cpc	r25, r1
 300:	e9 f1       	breq	.+122    	; 0x37c <DIO_u8SetPinValue+0xe2>
 302:	50 c0       	rjmp	.+160    	; 0x3a4 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
 304:	ab e3       	ldi	r26, 0x3B	; 59
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	eb e3       	ldi	r30, 0x3B	; 59
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_u8SetPinValue+0x88>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_u8SetPinValue+0x84>
 326:	84 2b       	or	r24, r20
 328:	8c 93       	st	X, r24
 32a:	bf c0       	rjmp	.+382    	; 0x4aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
 32c:	a8 e3       	ldi	r26, 0x38	; 56
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e8 e3       	ldi	r30, 0x38	; 56
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_u8SetPinValue+0xb0>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_u8SetPinValue+0xac>
 34e:	84 2b       	or	r24, r20
 350:	8c 93       	st	X, r24
 352:	ab c0       	rjmp	.+342    	; 0x4aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
 354:	a5 e3       	ldi	r26, 0x35	; 53
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e5 e3       	ldi	r30, 0x35	; 53
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_u8SetPinValue+0xd8>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_u8SetPinValue+0xd4>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	97 c0       	rjmp	.+302    	; 0x4aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
 37c:	a2 e3       	ldi	r26, 0x32	; 50
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e2 e3       	ldi	r30, 0x32	; 50
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8SetPinValue+0x100>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8SetPinValue+0xfc>
 39e:	84 2b       	or	r24, r20
 3a0:	8c 93       	st	X, r24
 3a2:	83 c0       	rjmp	.+262    	; 0x4aa <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	89 83       	std	Y+1, r24	; 0x01
 3a8:	80 c0       	rjmp	.+256    	; 0x4aa <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
 3aa:	8c 81       	ldd	r24, Y+4	; 0x04
 3ac:	88 23       	and	r24, r24
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <DIO_u8SetPinValue+0x118>
 3b0:	77 c0       	rjmp	.+238    	; 0x4a0 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	3e 83       	std	Y+6, r19	; 0x06
 3ba:	2d 83       	std	Y+5, r18	; 0x05
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	9e 81       	ldd	r25, Y+6	; 0x06
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	91 05       	cpc	r25, r1
 3c4:	59 f1       	breq	.+86     	; 0x41c <DIO_u8SetPinValue+0x182>
 3c6:	2d 81       	ldd	r18, Y+5	; 0x05
 3c8:	3e 81       	ldd	r19, Y+6	; 0x06
 3ca:	22 30       	cpi	r18, 0x02	; 2
 3cc:	31 05       	cpc	r19, r1
 3ce:	2c f4       	brge	.+10     	; 0x3da <DIO_u8SetPinValue+0x140>
 3d0:	8d 81       	ldd	r24, Y+5	; 0x05
 3d2:	9e 81       	ldd	r25, Y+6	; 0x06
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	69 f0       	breq	.+26     	; 0x3f2 <DIO_u8SetPinValue+0x158>
 3d8:	60 c0       	rjmp	.+192    	; 0x49a <DIO_u8SetPinValue+0x200>
 3da:	2d 81       	ldd	r18, Y+5	; 0x05
 3dc:	3e 81       	ldd	r19, Y+6	; 0x06
 3de:	22 30       	cpi	r18, 0x02	; 2
 3e0:	31 05       	cpc	r19, r1
 3e2:	89 f1       	breq	.+98     	; 0x446 <DIO_u8SetPinValue+0x1ac>
 3e4:	8d 81       	ldd	r24, Y+5	; 0x05
 3e6:	9e 81       	ldd	r25, Y+6	; 0x06
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	91 05       	cpc	r25, r1
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <DIO_u8SetPinValue+0x156>
 3ee:	40 c0       	rjmp	.+128    	; 0x470 <DIO_u8SetPinValue+0x1d6>
 3f0:	54 c0       	rjmp	.+168    	; 0x49a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
 3f2:	ab e3       	ldi	r26, 0x3B	; 59
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	eb e3       	ldi	r30, 0x3B	; 59
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	48 2f       	mov	r20, r24
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 2e       	mov	r0, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_u8SetPinValue+0x176>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_u8SetPinValue+0x172>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
 41a:	47 c0       	rjmp	.+142    	; 0x4aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
 41c:	a8 e3       	ldi	r26, 0x38	; 56
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e8 e3       	ldi	r30, 0x38	; 56
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_u8SetPinValue+0x1a0>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_u8SetPinValue+0x19c>
 43e:	80 95       	com	r24
 440:	84 23       	and	r24, r20
 442:	8c 93       	st	X, r24
 444:	32 c0       	rjmp	.+100    	; 0x4aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
 446:	a5 e3       	ldi	r26, 0x35	; 53
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e5 e3       	ldi	r30, 0x35	; 53
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 2e       	mov	r0, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_u8SetPinValue+0x1ca>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_u8SetPinValue+0x1c6>
 468:	80 95       	com	r24
 46a:	84 23       	and	r24, r20
 46c:	8c 93       	st	X, r24
 46e:	1d c0       	rjmp	.+58     	; 0x4aa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
 470:	a2 e3       	ldi	r26, 0x32	; 50
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e2 e3       	ldi	r30, 0x32	; 50
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_u8SetPinValue+0x1f4>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_u8SetPinValue+0x1f0>
 492:	80 95       	com	r24
 494:	84 23       	and	r24, r20
 496:	8c 93       	st	X, r24
 498:	08 c0       	rjmp	.+16     	; 0x4aa <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	89 83       	std	Y+1, r24	; 0x01
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ac:	28 96       	adiw	r28, 0x08	; 8
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	cf 91       	pop	r28
 4ba:	df 91       	pop	r29
 4bc:	08 95       	ret

000004be <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <DIO_u8TogglePinValue+0x6>
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <DIO_u8TogglePinValue+0x8>
 4c6:	0f 92       	push	r0
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	8a 83       	std	Y+2, r24	; 0x02
 4ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 4d0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
 4d2:	8b 81       	ldd	r24, Y+3	; 0x03
 4d4:	88 30       	cpi	r24, 0x08	; 8
 4d6:	08 f0       	brcs	.+2      	; 0x4da <DIO_u8TogglePinValue+0x1c>
 4d8:	72 c0       	rjmp	.+228    	; 0x5be <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	3d 83       	std	Y+5, r19	; 0x05
 4e2:	2c 83       	std	Y+4, r18	; 0x04
 4e4:	8c 81       	ldd	r24, Y+4	; 0x04
 4e6:	9d 81       	ldd	r25, Y+5	; 0x05
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	91 05       	cpc	r25, r1
 4ec:	49 f1       	breq	.+82     	; 0x540 <DIO_u8TogglePinValue+0x82>
 4ee:	2c 81       	ldd	r18, Y+4	; 0x04
 4f0:	3d 81       	ldd	r19, Y+5	; 0x05
 4f2:	22 30       	cpi	r18, 0x02	; 2
 4f4:	31 05       	cpc	r19, r1
 4f6:	2c f4       	brge	.+10     	; 0x502 <DIO_u8TogglePinValue+0x44>
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	9d 81       	ldd	r25, Y+5	; 0x05
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	61 f0       	breq	.+24     	; 0x518 <DIO_u8TogglePinValue+0x5a>
 500:	5b c0       	rjmp	.+182    	; 0x5b8 <DIO_u8TogglePinValue+0xfa>
 502:	2c 81       	ldd	r18, Y+4	; 0x04
 504:	3d 81       	ldd	r19, Y+5	; 0x05
 506:	22 30       	cpi	r18, 0x02	; 2
 508:	31 05       	cpc	r19, r1
 50a:	71 f1       	breq	.+92     	; 0x568 <DIO_u8TogglePinValue+0xaa>
 50c:	8c 81       	ldd	r24, Y+4	; 0x04
 50e:	9d 81       	ldd	r25, Y+5	; 0x05
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	91 05       	cpc	r25, r1
 514:	e9 f1       	breq	.+122    	; 0x590 <DIO_u8TogglePinValue+0xd2>
 516:	50 c0       	rjmp	.+160    	; 0x5b8 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
 518:	ab e3       	ldi	r26, 0x3B	; 59
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	eb e3       	ldi	r30, 0x3B	; 59
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	48 2f       	mov	r20, r24
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 2e       	mov	r0, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_u8TogglePinValue+0x78>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_u8TogglePinValue+0x74>
 53a:	84 27       	eor	r24, r20
 53c:	8c 93       	st	X, r24
 53e:	41 c0       	rjmp	.+130    	; 0x5c2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
 540:	a8 e3       	ldi	r26, 0x38	; 56
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	e8 e3       	ldi	r30, 0x38	; 56
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	48 2f       	mov	r20, r24
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 2e       	mov	r0, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_u8TogglePinValue+0xa0>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_u8TogglePinValue+0x9c>
 562:	84 27       	eor	r24, r20
 564:	8c 93       	st	X, r24
 566:	2d c0       	rjmp	.+90     	; 0x5c2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
 568:	a5 e3       	ldi	r26, 0x35	; 53
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	e5 e3       	ldi	r30, 0x35	; 53
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	48 2f       	mov	r20, r24
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 2e       	mov	r0, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_u8TogglePinValue+0xc8>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_u8TogglePinValue+0xc4>
 58a:	84 27       	eor	r24, r20
 58c:	8c 93       	st	X, r24
 58e:	19 c0       	rjmp	.+50     	; 0x5c2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
 590:	a2 e3       	ldi	r26, 0x32	; 50
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	e2 e3       	ldi	r30, 0x32	; 50
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	48 2f       	mov	r20, r24
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 2e       	mov	r0, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_u8TogglePinValue+0xf0>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	0a 94       	dec	r0
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_u8TogglePinValue+0xec>
 5b2:	84 27       	eor	r24, r20
 5b4:	8c 93       	st	X, r24
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	89 83       	std	Y+1, r24	; 0x01
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	cf 91       	pop	r28
 5d0:	df 91       	pop	r29
 5d2:	08 95       	ret

000005d4 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
 5d4:	df 93       	push	r29
 5d6:	cf 93       	push	r28
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	27 97       	sbiw	r28, 0x07	; 7
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	8a 83       	std	Y+2, r24	; 0x02
 5ea:	6b 83       	std	Y+3, r22	; 0x03
 5ec:	5d 83       	std	Y+5, r21	; 0x05
 5ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
 5f0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
 5f2:	8b 81       	ldd	r24, Y+3	; 0x03
 5f4:	88 30       	cpi	r24, 0x08	; 8
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <DIO_u8GetPinValue+0x26>
 5f8:	74 c0       	rjmp	.+232    	; 0x6e2 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	3f 83       	std	Y+7, r19	; 0x07
 602:	2e 83       	std	Y+6, r18	; 0x06
 604:	4e 81       	ldd	r20, Y+6	; 0x06
 606:	5f 81       	ldd	r21, Y+7	; 0x07
 608:	41 30       	cpi	r20, 0x01	; 1
 60a:	51 05       	cpc	r21, r1
 60c:	59 f1       	breq	.+86     	; 0x664 <DIO_u8GetPinValue+0x90>
 60e:	8e 81       	ldd	r24, Y+6	; 0x06
 610:	9f 81       	ldd	r25, Y+7	; 0x07
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	91 05       	cpc	r25, r1
 616:	34 f4       	brge	.+12     	; 0x624 <DIO_u8GetPinValue+0x50>
 618:	2e 81       	ldd	r18, Y+6	; 0x06
 61a:	3f 81       	ldd	r19, Y+7	; 0x07
 61c:	21 15       	cp	r18, r1
 61e:	31 05       	cpc	r19, r1
 620:	69 f0       	breq	.+26     	; 0x63c <DIO_u8GetPinValue+0x68>
 622:	5c c0       	rjmp	.+184    	; 0x6dc <DIO_u8GetPinValue+0x108>
 624:	4e 81       	ldd	r20, Y+6	; 0x06
 626:	5f 81       	ldd	r21, Y+7	; 0x07
 628:	42 30       	cpi	r20, 0x02	; 2
 62a:	51 05       	cpc	r21, r1
 62c:	79 f1       	breq	.+94     	; 0x68c <DIO_u8GetPinValue+0xb8>
 62e:	8e 81       	ldd	r24, Y+6	; 0x06
 630:	9f 81       	ldd	r25, Y+7	; 0x07
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	91 05       	cpc	r25, r1
 636:	09 f4       	brne	.+2      	; 0x63a <DIO_u8GetPinValue+0x66>
 638:	3d c0       	rjmp	.+122    	; 0x6b4 <DIO_u8GetPinValue+0xe0>
 63a:	50 c0       	rjmp	.+160    	; 0x6dc <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
 63c:	e9 e3       	ldi	r30, 0x39	; 57
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	a9 01       	movw	r20, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_u8GetPinValue+0x80>
 650:	55 95       	asr	r21
 652:	47 95       	ror	r20
 654:	8a 95       	dec	r24
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_u8GetPinValue+0x7c>
 658:	ca 01       	movw	r24, r20
 65a:	81 70       	andi	r24, 0x01	; 1
 65c:	ec 81       	ldd	r30, Y+4	; 0x04
 65e:	fd 81       	ldd	r31, Y+5	; 0x05
 660:	80 83       	st	Z, r24
 662:	41 c0       	rjmp	.+130    	; 0x6e6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
 664:	e6 e3       	ldi	r30, 0x36	; 54
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	28 2f       	mov	r18, r24
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	88 2f       	mov	r24, r24
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	a9 01       	movw	r20, r18
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_u8GetPinValue+0xa8>
 678:	55 95       	asr	r21
 67a:	47 95       	ror	r20
 67c:	8a 95       	dec	r24
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_u8GetPinValue+0xa4>
 680:	ca 01       	movw	r24, r20
 682:	81 70       	andi	r24, 0x01	; 1
 684:	ec 81       	ldd	r30, Y+4	; 0x04
 686:	fd 81       	ldd	r31, Y+5	; 0x05
 688:	80 83       	st	Z, r24
 68a:	2d c0       	rjmp	.+90     	; 0x6e6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
 68c:	e3 e3       	ldi	r30, 0x33	; 51
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	88 2f       	mov	r24, r24
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	a9 01       	movw	r20, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8GetPinValue+0xd0>
 6a0:	55 95       	asr	r21
 6a2:	47 95       	ror	r20
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_u8GetPinValue+0xcc>
 6a8:	ca 01       	movw	r24, r20
 6aa:	81 70       	andi	r24, 0x01	; 1
 6ac:	ec 81       	ldd	r30, Y+4	; 0x04
 6ae:	fd 81       	ldd	r31, Y+5	; 0x05
 6b0:	80 83       	st	Z, r24
 6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
 6b4:	e0 e3       	ldi	r30, 0x30	; 48
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	88 2f       	mov	r24, r24
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	a9 01       	movw	r20, r18
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_u8GetPinValue+0xf8>
 6c8:	55 95       	asr	r21
 6ca:	47 95       	ror	r20
 6cc:	8a 95       	dec	r24
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_u8GetPinValue+0xf4>
 6d0:	ca 01       	movw	r24, r20
 6d2:	81 70       	andi	r24, 0x01	; 1
 6d4:	ec 81       	ldd	r30, Y+4	; 0x04
 6d6:	fd 81       	ldd	r31, Y+5	; 0x05
 6d8:	80 83       	st	Z, r24
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e8:	27 96       	adiw	r28, 0x07	; 7
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	00 d0       	rcall	.+0      	; 0x700 <DIO_u8SetPortDirection+0x6>
 700:	00 d0       	rcall	.+0      	; 0x702 <DIO_u8SetPortDirection+0x8>
 702:	0f 92       	push	r0
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	8a 83       	std	Y+2, r24	; 0x02
 70a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 70c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	3d 83       	std	Y+5, r19	; 0x05
 716:	2c 83       	std	Y+4, r18	; 0x04
 718:	8c 81       	ldd	r24, Y+4	; 0x04
 71a:	9d 81       	ldd	r25, Y+5	; 0x05
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	91 05       	cpc	r25, r1
 720:	d1 f0       	breq	.+52     	; 0x756 <DIO_u8SetPortDirection+0x5c>
 722:	2c 81       	ldd	r18, Y+4	; 0x04
 724:	3d 81       	ldd	r19, Y+5	; 0x05
 726:	22 30       	cpi	r18, 0x02	; 2
 728:	31 05       	cpc	r19, r1
 72a:	2c f4       	brge	.+10     	; 0x736 <DIO_u8SetPortDirection+0x3c>
 72c:	8c 81       	ldd	r24, Y+4	; 0x04
 72e:	9d 81       	ldd	r25, Y+5	; 0x05
 730:	00 97       	sbiw	r24, 0x00	; 0
 732:	61 f0       	breq	.+24     	; 0x74c <DIO_u8SetPortDirection+0x52>
 734:	1f c0       	rjmp	.+62     	; 0x774 <DIO_u8SetPortDirection+0x7a>
 736:	2c 81       	ldd	r18, Y+4	; 0x04
 738:	3d 81       	ldd	r19, Y+5	; 0x05
 73a:	22 30       	cpi	r18, 0x02	; 2
 73c:	31 05       	cpc	r19, r1
 73e:	81 f0       	breq	.+32     	; 0x760 <DIO_u8SetPortDirection+0x66>
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	9d 81       	ldd	r25, Y+5	; 0x05
 744:	83 30       	cpi	r24, 0x03	; 3
 746:	91 05       	cpc	r25, r1
 748:	81 f0       	breq	.+32     	; 0x76a <DIO_u8SetPortDirection+0x70>
 74a:	14 c0       	rjmp	.+40     	; 0x774 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
 74c:	ea e3       	ldi	r30, 0x3A	; 58
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	80 83       	st	Z, r24
 754:	11 c0       	rjmp	.+34     	; 0x778 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
 756:	e7 e3       	ldi	r30, 0x37	; 55
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	8b 81       	ldd	r24, Y+3	; 0x03
 75c:	80 83       	st	Z, r24
 75e:	0c c0       	rjmp	.+24     	; 0x778 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
 760:	e4 e3       	ldi	r30, 0x34	; 52
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	80 83       	st	Z, r24
 768:	07 c0       	rjmp	.+14     	; 0x778 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
 76a:	e1 e3       	ldi	r30, 0x31	; 49
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	8b 81       	ldd	r24, Y+3	; 0x03
 770:	80 83       	st	Z, r24
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 778:	89 81       	ldd	r24, Y+1	; 0x01
}
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
 78a:	df 93       	push	r29
 78c:	cf 93       	push	r28
 78e:	00 d0       	rcall	.+0      	; 0x790 <DIO_u8SetPortValue+0x6>
 790:	00 d0       	rcall	.+0      	; 0x792 <DIO_u8SetPortValue+0x8>
 792:	0f 92       	push	r0
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	8a 83       	std	Y+2, r24	; 0x02
 79a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
 79c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 79e:	8a 81       	ldd	r24, Y+2	; 0x02
 7a0:	28 2f       	mov	r18, r24
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	3d 83       	std	Y+5, r19	; 0x05
 7a6:	2c 83       	std	Y+4, r18	; 0x04
 7a8:	8c 81       	ldd	r24, Y+4	; 0x04
 7aa:	9d 81       	ldd	r25, Y+5	; 0x05
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	91 05       	cpc	r25, r1
 7b0:	d1 f0       	breq	.+52     	; 0x7e6 <DIO_u8SetPortValue+0x5c>
 7b2:	2c 81       	ldd	r18, Y+4	; 0x04
 7b4:	3d 81       	ldd	r19, Y+5	; 0x05
 7b6:	22 30       	cpi	r18, 0x02	; 2
 7b8:	31 05       	cpc	r19, r1
 7ba:	2c f4       	brge	.+10     	; 0x7c6 <DIO_u8SetPortValue+0x3c>
 7bc:	8c 81       	ldd	r24, Y+4	; 0x04
 7be:	9d 81       	ldd	r25, Y+5	; 0x05
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	61 f0       	breq	.+24     	; 0x7dc <DIO_u8SetPortValue+0x52>
 7c4:	1f c0       	rjmp	.+62     	; 0x804 <DIO_u8SetPortValue+0x7a>
 7c6:	2c 81       	ldd	r18, Y+4	; 0x04
 7c8:	3d 81       	ldd	r19, Y+5	; 0x05
 7ca:	22 30       	cpi	r18, 0x02	; 2
 7cc:	31 05       	cpc	r19, r1
 7ce:	81 f0       	breq	.+32     	; 0x7f0 <DIO_u8SetPortValue+0x66>
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	9d 81       	ldd	r25, Y+5	; 0x05
 7d4:	83 30       	cpi	r24, 0x03	; 3
 7d6:	91 05       	cpc	r25, r1
 7d8:	81 f0       	breq	.+32     	; 0x7fa <DIO_u8SetPortValue+0x70>
 7da:	14 c0       	rjmp	.+40     	; 0x804 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
 7dc:	eb e3       	ldi	r30, 0x3B	; 59
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	80 83       	st	Z, r24
 7e4:	11 c0       	rjmp	.+34     	; 0x808 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
 7e6:	e8 e3       	ldi	r30, 0x38	; 56
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	80 83       	st	Z, r24
 7ee:	0c c0       	rjmp	.+24     	; 0x808 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
 7f0:	e5 e3       	ldi	r30, 0x35	; 53
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	80 83       	st	Z, r24
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
 7fa:	e2 e3       	ldi	r30, 0x32	; 50
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	80 83       	st	Z, r24
 802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 808:	89 81       	ldd	r24, Y+1	; 0x01
}
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
