
TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000045fe  00004692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800180  00800180  000047b2  2**0
                  ALLOC
  3 .stab         00004b84  00000000  00000000  000047b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000224d  00000000  00000000  00009338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b585  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b725  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000dd22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010736  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000110a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__vector_4>
      14:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <__vector_5>
      18:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__vector_6>
      1c:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__vector_7>
      20:	0c 94 47 19 	jmp	0x328e	; 0x328e <__vector_8>
      24:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__vector_9>
      28:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__vector_10>
      2c:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__vector_13>
      38:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__vector_14>
      3c:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 21 	call	0x4218	; 0x4218 <main>
      8a:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 22 	jmp	0x459c	; 0x459c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 22 	jmp	0x45e4	; 0x45e4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ce 22 	jmp	0x459c	; 0x459c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <voidSendEnablePulse>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

static void voidSendEnablePulse(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2e 97       	sbiw	r28, 0x0e	; 14
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	67 e0       	ldi	r22, 0x07	; 7
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e4       	ldi	r27, 0x40	; 64
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a ef       	ldi	r20, 0xFA	; 250
     e6a:	54 e4       	ldi	r21, 0x44	; 68
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <voidSendEnablePulse+0x70>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <voidSendEnablePulse+0xd0>
     ee0:	88 ec       	ldi	r24, 0xC8	; 200
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <voidSendEnablePulse+0xbe>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <voidSendEnablePulse+0xb2>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <voidSendEnablePulse+0xfa>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2 millisecond, it is enough time for lcd to implement any command*/
	_delay_ms(2);

	/*Clear enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	67 e0       	ldi	r22, 0x07	; 7
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
}
     f3a:	2e 96       	adiw	r28, 0x0e	; 14
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple, 0));
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	98 2f       	mov	r25, r24
     f5c:	91 70       	andi	r25, 0x01	; 1
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	49 2f       	mov	r20, r25
     f64:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple, 1));
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	86 95       	lsr	r24
     f6c:	98 2f       	mov	r25, r24
     f6e:	91 70       	andi	r25, 0x01	; 1
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	62 e0       	ldi	r22, 0x02	; 2
     f74:	49 2f       	mov	r20, r25
     f76:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple, 2));
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	86 95       	lsr	r24
     f7e:	86 95       	lsr	r24
     f80:	98 2f       	mov	r25, r24
     f82:	91 70       	andi	r25, 0x01	; 1
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	63 e0       	ldi	r22, 0x03	; 3
     f88:	49 2f       	mov	r20, r25
     f8a:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple, 3));
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	86 95       	lsr	r24
     f92:	86 95       	lsr	r24
     f94:	86 95       	lsr	r24
     f96:	98 2f       	mov	r25, r24
     f98:	91 70       	andi	r25, 0x01	; 1
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	64 e0       	ldi	r22, 0x04	; 4
     f9e:	49 2f       	mov	r20, r25
     fa0:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	65 e0       	ldi	r22, 0x05	; 5
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	66 e0       	ldi	r22, 0x06	; 6
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4);
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	82 95       	swap	r24
     fd0:	8f 70       	andi	r24, 0x0F	; 15
     fd2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     fd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
     fe0:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>

#endif

}
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <CLCD_voidSendData>:

void CLCD_voidSendData(char Copy_c8Data)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	65 e0       	ldi	r22, 0x05	; 5
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	66 e0       	ldi	r22, 0x06	; 6
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set the most 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data >> 4);
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	82 95       	swap	r24
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1016:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	/*Set the least 4 bits on data pins*/
	voidSetLCDHalfDataPort(Copy_c8Data);
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	/*Send Enable Pulse to lcd*/
	voidSendEnablePulse();
    1020:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>

#endif

}
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	2e 97       	sbiw	r28, 0x0e	; 14
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e2       	ldi	r26, 0x20	; 32
    1046:	b2 e4       	ldi	r27, 0x42	; 66
    1048:	8b 87       	std	Y+11, r24	; 0x0b
    104a:	9c 87       	std	Y+12, r25	; 0x0c
    104c:	ad 87       	std	Y+13, r26	; 0x0d
    104e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1050:	6b 85       	ldd	r22, Y+11	; 0x0b
    1052:	7c 85       	ldd	r23, Y+12	; 0x0c
    1054:	8d 85       	ldd	r24, Y+13	; 0x0d
    1056:	9e 85       	ldd	r25, Y+14	; 0x0e
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	4a ef       	ldi	r20, 0xFA	; 250
    105e:	54 e4       	ldi	r21, 0x44	; 68
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8f 83       	std	Y+7, r24	; 0x07
    106a:	98 87       	std	Y+8, r25	; 0x08
    106c:	a9 87       	std	Y+9, r26	; 0x09
    106e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1084:	88 23       	and	r24, r24
    1086:	2c f4       	brge	.+10     	; 0x1092 <CLCD_voidInit+0x66>
		__ticks = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	3f c0       	rjmp	.+126    	; 0x1110 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	3f ef       	ldi	r19, 0xFF	; 255
    109e:	4f e7       	ldi	r20, 0x7F	; 127
    10a0:	57 e4       	ldi	r21, 0x47	; 71
    10a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	4c f5       	brge	.+82     	; 0x10fc <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <CLCD_voidInit+0xc6>
    10d4:	88 ec       	ldi	r24, 0xC8	; 200
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <CLCD_voidInit+0xb4>
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <CLCD_voidInit+0xa8>
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <CLCD_voidInit+0xf0>
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	65 e0       	ldi	r22, 0x05	; 5
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	66 e0       	ldi	r22, 0x06	; 6
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>

	/*Set Commands to lcd*/
	voidSetLCDHalfDataPort(0b0010);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    113e:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1148:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1152:	0e 94 17 07 	call	0xe2e	; 0xe2e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    1156:	8c e0       	ldi	r24, 0x0C	; 12
    1158:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	/*Display Clear cmd*/
	CLCD_voidSendCmd(0b00000001);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    1162:	2e 96       	adiw	r28, 0x0e	; 14
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCmd(0x01);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>
}
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char *Copy_ch8String)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <CLCD_u8SendString+0x6>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <CLCD_u8SendString+0x8>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    1198:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8Counter = 0;
    119a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_ch8String != NULL)
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	d9 f0       	breq	.+54     	; 0x11da <CLCD_u8SendString+0x52>
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <CLCD_u8SendString+0x3a>
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_ch8String[Local_u8Counter]);
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	80 81       	ld	r24, Z
    11b8:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
			Local_u8Counter++;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_u8Counter = 0;

	if(Copy_ch8String != NULL)
	{
		while(Copy_ch8String[Local_u8Counter] != '\0')
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	e2 0f       	add	r30, r18
    11d0:	f3 1f       	adc	r31, r19
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	39 f7       	brne	.-50     	; 0x11a6 <CLCD_u8SendString+0x1e>
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <CLCD_voidSendDecimalNumber>:


void CLCD_voidSendDecimalNumber(sint32 Copy_s32Number)
{
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	60 97       	sbiw	r28, 0x10	; 16
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	6d 87       	std	Y+13, r22	; 0x0d
    1208:	7e 87       	std	Y+14, r23	; 0x0e
    120a:	8f 87       	std	Y+15, r24	; 0x0f
    120c:	98 8b       	std	Y+16, r25	; 0x10
	char Local_ch8Digit[10] = {0};
    120e:	8a e0       	ldi	r24, 0x0A	; 10
    1210:	fe 01       	movw	r30, r28
    1212:	33 96       	adiw	r30, 0x03	; 3
    1214:	df 01       	movw	r26, r30
    1216:	98 2f       	mov	r25, r24
    1218:	1d 92       	st	X+, r1
    121a:	9a 95       	dec	r25
    121c:	e9 f7       	brne	.-6      	; 0x1218 <CLCD_voidSendDecimalNumber+0x2a>

	uint8 Local_u8ReverseCounter = 0u;
    121e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	if(Copy_s32Number == 0)
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	af 85       	ldd	r26, Y+15	; 0x0f
    1226:	b8 89       	ldd	r27, Y+16	; 0x10
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	a1 05       	cpc	r26, r1
    122c:	b1 05       	cpc	r27, r1
    122e:	21 f4       	brne	.+8      	; 0x1238 <CLCD_voidSendDecimalNumber+0x4a>
	{
		CLCD_voidSendData('0');
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
    1236:	7b c0       	rjmp	.+246    	; 0x132e <CLCD_voidSendDecimalNumber+0x140>
	}
	else
	{
		/*Check for the negative sign*/
		if(Copy_s32Number < 0)
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	af 85       	ldd	r26, Y+15	; 0x0f
    123e:	b8 89       	ldd	r27, Y+16	; 0x10
    1240:	bb 23       	and	r27, r27
    1242:	0c f0       	brlt	.+2      	; 0x1246 <CLCD_voidSendDecimalNumber+0x58>
    1244:	54 c0       	rjmp	.+168    	; 0x12ee <CLCD_voidSendDecimalNumber+0x100>
		{
			/*Print the negative sign to the lcd*/
			CLCD_voidSendData('-');
    1246:	8d e2       	ldi	r24, 0x2D	; 45
    1248:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>

			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	af 85       	ldd	r26, Y+15	; 0x0f
    1252:	b8 89       	ldd	r27, Y+16	; 0x10
    1254:	b0 95       	com	r27
    1256:	a0 95       	com	r26
    1258:	90 95       	com	r25
    125a:	81 95       	neg	r24
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	af 4f       	sbci	r26, 0xFF	; 255
    1260:	bf 4f       	sbci	r27, 0xFF	; 255
    1262:	8d 87       	std	Y+13, r24	; 0x0d
    1264:	9e 87       	std	Y+14, r25	; 0x0e
    1266:	af 87       	std	Y+15, r26	; 0x0f
    1268:	b8 8b       	std	Y+16, r27	; 0x10
    126a:	41 c0       	rjmp	.+130    	; 0x12ee <CLCD_voidSendDecimalNumber+0x100>
		{
			/*
			 * Extract every digit number to the array of characters,
			 * then translate it into ascii value through adding '0'
			 */
			Local_ch8Digit[Local_u8ReverseCounter] = (char) (Copy_s32Number % 10);
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	08 2f       	mov	r16, r24
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	8d 85       	ldd	r24, Y+13	; 0x0d
    1274:	9e 85       	ldd	r25, Y+14	; 0x0e
    1276:	af 85       	ldd	r26, Y+15	; 0x0f
    1278:	b8 89       	ldd	r27, Y+16	; 0x10
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	bc 01       	movw	r22, r24
    1284:	cd 01       	movw	r24, r26
    1286:	0e 94 89 22 	call	0x4512	; 0x4512 <__divmodsi4>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	28 2f       	mov	r18, r24
    1290:	ce 01       	movw	r24, r28
    1292:	03 96       	adiw	r24, 0x03	; 3
    1294:	fc 01       	movw	r30, r24
    1296:	e0 0f       	add	r30, r16
    1298:	f1 1f       	adc	r31, r17
    129a:	20 83       	st	Z, r18
			Local_ch8Digit[Local_u8ReverseCounter] = Local_ch8Digit[Local_u8ReverseCounter] + '0';
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	48 2f       	mov	r20, r24
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	ce 01       	movw	r24, r28
    12aa:	03 96       	adiw	r24, 0x03	; 3
    12ac:	fc 01       	movw	r30, r24
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	20 5d       	subi	r18, 0xD0	; 208
    12b8:	ce 01       	movw	r24, r28
    12ba:	03 96       	adiw	r24, 0x03	; 3
    12bc:	fc 01       	movw	r30, r24
    12be:	e4 0f       	add	r30, r20
    12c0:	f5 1f       	adc	r31, r21
    12c2:	20 83       	st	Z, r18

			Copy_s32Number = Copy_s32Number / 10;
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	af 85       	ldd	r26, Y+15	; 0x0f
    12ca:	b8 89       	ldd	r27, Y+16	; 0x10
    12cc:	2a e0       	ldi	r18, 0x0A	; 10
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 89 22 	call	0x4512	; 0x4512 <__divmodsi4>
    12dc:	da 01       	movw	r26, r20
    12de:	c9 01       	movw	r24, r18
    12e0:	8d 87       	std	Y+13, r24	; 0x0d
    12e2:	9e 87       	std	Y+14, r25	; 0x0e
    12e4:	af 87       	std	Y+15, r26	; 0x0f
    12e6:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8ReverseCounter++;
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	8f 5f       	subi	r24, 0xFF	; 255
    12ec:	8a 83       	std	Y+2, r24	; 0x02
			/*Change the sign of the number*/
			Copy_s32Number = Copy_s32Number * -1;
		}

		/*Extracting the number digits into array of characters*/
		while(Copy_s32Number > 0)
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	af 85       	ldd	r26, Y+15	; 0x0f
    12f4:	b8 89       	ldd	r27, Y+16	; 0x10
    12f6:	18 16       	cp	r1, r24
    12f8:	19 06       	cpc	r1, r25
    12fa:	1a 06       	cpc	r1, r26
    12fc:	1b 06       	cpc	r1, r27
    12fe:	0c f4       	brge	.+2      	; 0x1302 <CLCD_voidSendDecimalNumber+0x114>
    1300:	b5 cf       	rjmp	.-150    	; 0x126c <CLCD_voidSendDecimalNumber+0x7e>
			Copy_s32Number = Copy_s32Number / 10;
			Local_u8ReverseCounter++;
		}

		/*Printing every character in the array until the end of the number*/
		Local_u8PrintCounter = Local_u8ReverseCounter;
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			CLCD_voidSendData(Local_ch8Digit[Local_u8PrintCounter - 1u]);
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 01       	movw	r18, r24
    130e:	21 50       	subi	r18, 0x01	; 1
    1310:	30 40       	sbci	r19, 0x00	; 0
    1312:	ce 01       	movw	r24, r28
    1314:	03 96       	adiw	r24, 0x03	; 3
    1316:	fc 01       	movw	r30, r24
    1318:	e2 0f       	add	r30, r18
    131a:	f3 1f       	adc	r31, r19
    131c:	80 81       	ld	r24, Z
    131e:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
			Local_u8PrintCounter--;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	81 50       	subi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01
		}
		while(Local_u8PrintCounter > 0u);
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	88 23       	and	r24, r24
    132c:	61 f7       	brne	.-40     	; 0x1306 <CLCD_voidSendDecimalNumber+0x118>
	}
}
    132e:	60 96       	adiw	r28, 0x10	; 16
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	08 95       	ret

00001344 <CLCD_voidSendBinaryNumber>:


void CLCD_voidSendBinaryNumber(sint16 Copy_s16Number)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	a4 97       	sbiw	r28, 0x24	; 36
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	9c a3       	std	Y+36, r25	; 0x24
    135a:	8b a3       	std	Y+35, r24	; 0x23
	uint8 Local_u8BinaryDigits[32] = {0u};
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	fe 01       	movw	r30, r28
    1360:	33 96       	adiw	r30, 0x03	; 3
    1362:	df 01       	movw	r26, r30
    1364:	98 2f       	mov	r25, r24
    1366:	1d 92       	st	X+, r1
    1368:	9a 95       	dec	r25
    136a:	e9 f7       	brne	.-6      	; 0x1366 <CLCD_voidSendBinaryNumber+0x22>

	uint8 Local_u8ReverseCounter = 0u;
    136c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8PrintCounter;

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");
    136e:	80 e6       	ldi	r24, 0x60	; 96
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    1376:	1a 82       	std	Y+2, r1	; 0x02
    1378:	23 c0       	rjmp	.+70     	; 0x13c0 <CLCD_voidSendBinaryNumber+0x7c>
	{
		if((Copy_s16Number & 1) == 1)
    137a:	8b a1       	ldd	r24, Y+35	; 0x23
    137c:	9c a1       	ldd	r25, Y+36	; 0x24
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	90 70       	andi	r25, 0x00	; 0
    1382:	88 23       	and	r24, r24
    1384:	59 f0       	breq	.+22     	; 0x139c <CLCD_voidSendBinaryNumber+0x58>
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 1u;
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	ce 01       	movw	r24, r28
    138e:	03 96       	adiw	r24, 0x03	; 3
    1390:	fc 01       	movw	r30, r24
    1392:	e2 0f       	add	r30, r18
    1394:	f3 1f       	adc	r31, r19
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 83       	st	Z, r24
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <CLCD_voidSendBinaryNumber+0x6a>
		}
		else
		{
			Local_u8BinaryDigits[Local_u8ReverseCounter] = 0u;
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	ce 01       	movw	r24, r28
    13a4:	03 96       	adiw	r24, 0x03	; 3
    13a6:	fc 01       	movw	r30, r24
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
    13ac:	10 82       	st	Z, r1
		}
		Copy_s16Number = Copy_s16Number >> 1;
    13ae:	8b a1       	ldd	r24, Y+35	; 0x23
    13b0:	9c a1       	ldd	r25, Y+36	; 0x24
    13b2:	95 95       	asr	r25
    13b4:	87 95       	ror	r24
    13b6:	9c a3       	std	Y+36, r25	; 0x24
    13b8:	8b a3       	std	Y+35, r24	; 0x23

	/*Print 0b before the binary representation*/
	CLCD_u8SendString("0b");

	/*Loading zoros and ones into array of characters*/
	for(Local_u8ReverseCounter = 0; Local_u8ReverseCounter < 16; Local_u8ReverseCounter++)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	80 31       	cpi	r24, 0x10	; 16
    13c4:	d0 f2       	brcs	.-76     	; 0x137a <CLCD_voidSendBinaryNumber+0x36>
		}
		Copy_s16Number = Copy_s16Number >> 1;
	}

	/*Go to the next line in the lcd*/
	CLCD_u8GoToXY(0,1);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	0e 94 cf 0a 	call	0x159e	; 0x159e <CLCD_u8GoToXY>

	/*Printing every character in the array until the end of the number*/
	Local_u8PrintCounter = 16;
    13ce:	80 e1       	ldi	r24, 0x10	; 16
    13d0:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		if(Local_u8BinaryDigits[Local_u8PrintCounter - 1] == 0)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9c 01       	movw	r18, r24
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	30 40       	sbci	r19, 0x00	; 0
    13de:	ce 01       	movw	r24, r28
    13e0:	03 96       	adiw	r24, 0x03	; 3
    13e2:	fc 01       	movw	r30, r24
    13e4:	e2 0f       	add	r30, r18
    13e6:	f3 1f       	adc	r31, r19
    13e8:	80 81       	ld	r24, Z
    13ea:	88 23       	and	r24, r24
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <CLCD_voidSendBinaryNumber+0xb2>
		{
			CLCD_voidSendData('0');
    13ee:	80 e3       	ldi	r24, 0x30	; 48
    13f0:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <CLCD_voidSendBinaryNumber+0xb8>
		}
		else
		{
			CLCD_voidSendData('1');
    13f6:	81 e3       	ldi	r24, 0x31	; 49
    13f8:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
		}

		Local_u8PrintCounter--;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
	}
	while(Local_u8PrintCounter > 0);
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	88 23       	and	r24, r24
    1406:	29 f7       	brne	.-54     	; 0x13d2 <CLCD_voidSendBinaryNumber+0x8e>
}
    1408:	a4 96       	adiw	r28, 0x24	; 36
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <CLCD_voidSendHexaNumber>:
//	/*Returnning the MaxZeros counter*/
//	return MaxZeros;
//}

void CLCD_voidSendHexaNumber(sint32 Copy_s32Number)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	a5 97       	sbiw	r28, 0x25	; 37
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	6d 8f       	std	Y+29, r22	; 0x1d
    1430:	7e 8f       	std	Y+30, r23	; 0x1e
    1432:	8f 8f       	std	Y+31, r24	; 0x1f
    1434:	98 a3       	std	Y+32, r25	; 0x20
	/*Define Variables*/
	char Local_ch8HexaTable[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
									'A', 'B', 'C', 'D', 'E', 'F'};
    1436:	ce 01       	movw	r24, r28
    1438:	05 96       	adiw	r24, 0x05	; 5
    143a:	9a a3       	std	Y+34, r25	; 0x22
    143c:	89 a3       	std	Y+33, r24	; 0x21
    143e:	ef e6       	ldi	r30, 0x6F	; 111
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	fc a3       	std	Y+36, r31	; 0x24
    1444:	eb a3       	std	Y+35, r30	; 0x23
    1446:	f0 e1       	ldi	r31, 0x10	; 16
    1448:	fd a3       	std	Y+37, r31	; 0x25
    144a:	eb a1       	ldd	r30, Y+35	; 0x23
    144c:	fc a1       	ldd	r31, Y+36	; 0x24
    144e:	00 80       	ld	r0, Z
    1450:	8b a1       	ldd	r24, Y+35	; 0x23
    1452:	9c a1       	ldd	r25, Y+36	; 0x24
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	9c a3       	std	Y+36, r25	; 0x24
    1458:	8b a3       	std	Y+35, r24	; 0x23
    145a:	e9 a1       	ldd	r30, Y+33	; 0x21
    145c:	fa a1       	ldd	r31, Y+34	; 0x22
    145e:	00 82       	st	Z, r0
    1460:	89 a1       	ldd	r24, Y+33	; 0x21
    1462:	9a a1       	ldd	r25, Y+34	; 0x22
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	9d a1       	ldd	r25, Y+37	; 0x25
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	9d a3       	std	Y+37, r25	; 0x25
    1470:	ed a1       	ldd	r30, Y+37	; 0x25
    1472:	ee 23       	and	r30, r30
    1474:	51 f7       	brne	.-44     	; 0x144a <CLCD_voidSendHexaNumber+0x30>
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    1476:	1b 82       	std	Y+3, r1	; 0x03
    1478:	20 c0       	rjmp	.+64     	; 0x14ba <CLCD_voidSendHexaNumber+0xa0>
	{
		/*Get the least for bits of the number*/
		Local_u8LeastFourBits = Copy_s32Number & 0x0f;
    147a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147c:	8f 70       	andi	r24, 0x0F	; 15
    147e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number = Copy_s32Number >> 4;
    1480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1484:	af 8d       	ldd	r26, Y+31	; 0x1f
    1486:	b8 a1       	ldd	r27, Y+32	; 0x20
    1488:	68 94       	set
    148a:	13 f8       	bld	r1, 3
    148c:	b5 95       	asr	r27
    148e:	a7 95       	ror	r26
    1490:	97 95       	ror	r25
    1492:	87 95       	ror	r24
    1494:	16 94       	lsr	r1
    1496:	d1 f7       	brne	.-12     	; 0x148c <CLCD_voidSendHexaNumber+0x72>
    1498:	8d 8f       	std	Y+29, r24	; 0x1d
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	af 8f       	std	Y+31, r26	; 0x1f
    149e:	b8 a3       	std	Y+32, r27	; 0x20

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	ce 01       	movw	r24, r28
    14a8:	45 96       	adiw	r24, 0x15	; 21
    14aa:	fc 01       	movw	r30, r24
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
	uint8 Local_u8ReverseCounter;
	uint8 Local_u8LeastFourBits;
	uint8 Local_u8PrintTemp;

	/*Load the Hexadecimal digits into array of characters*/
	for(Local_u8ReverseCounter = 0u; Local_u8ReverseCounter < 8u; Local_u8ReverseCounter++)
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	8b 83       	std	Y+3, r24	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	e8 f2       	brcs	.-70     	; 0x147a <CLCD_voidSendHexaNumber+0x60>

		Local_u8HexaDigits[Local_u8ReverseCounter] = Local_u8LeastFourBits;
	}

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");
    14c0:	83 e6       	ldi	r24, 0x63	; 99
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 c4 08 	call	0x1188	; 0x1188 <CLCD_u8SendString>

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    14c8:	87 e0       	ldi	r24, 0x07	; 7
    14ca:	8c 83       	std	Y+4, r24	; 0x04
    14cc:	1a c0       	rjmp	.+52     	; 0x1502 <CLCD_voidSendHexaNumber+0xe8>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	28 2f       	mov	r18, r24
    14d2:	33 27       	eor	r19, r19
    14d4:	27 fd       	sbrc	r18, 7
    14d6:	30 95       	com	r19
    14d8:	ce 01       	movw	r24, r28
    14da:	45 96       	adiw	r24, 0x15	; 21
    14dc:	fc 01       	movw	r30, r24
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	80 81       	ld	r24, Z
    14e4:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	ce 01       	movw	r24, r28
    14ee:	05 96       	adiw	r24, 0x05	; 5
    14f0:	fc 01       	movw	r30, r24
    14f2:	e2 0f       	add	r30, r18
    14f4:	f3 1f       	adc	r31, r19
    14f6:	80 81       	ld	r24, Z
    14f8:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>

	/*Print 0x before Hexadecimal representation*/
	CLCD_u8SendString("0x");

	/*Print the hexadecimal number from array of hexadecimal table*/
	for(Local_s8PrintCounter = 7; Local_s8PrintCounter >= 0; Local_s8PrintCounter--)
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	81 50       	subi	r24, 0x01	; 1
    1500:	8c 83       	std	Y+4, r24	; 0x04
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	88 23       	and	r24, r24
    1506:	1c f7       	brge	.-58     	; 0x14ce <CLCD_voidSendHexaNumber+0xb4>
	{
		Local_u8PrintTemp = Local_u8HexaDigits[Local_s8PrintCounter];
		CLCD_voidSendData(Local_ch8HexaTable[Local_u8PrintTemp]);
	}
}
    1508:	a5 96       	adiw	r28, 0x25	; 37
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	27 97       	sbiw	r28, 0x07	; 7
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	6d 83       	std	Y+5, r22	; 0x05
    1534:	4e 83       	std	Y+6, r20	; 0x06
    1536:	2f 83       	std	Y+7, r18	; 0x07
	/*Define Variables*/
	uint8 Local_u8CGRAMAdd = Copy_u8PatternNum * 8u;
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Counter;

	/*Set bit 6 in CGRAMAdd for CGRAM Address command standard*/
	SET_BIT(Local_u8CGRAMAdd, 6);
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 64       	ori	r24, 0x40	; 64
    1550:	8a 83       	std	Y+2, r24	; 0x02

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	fc 01       	movw	r30, r24
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	80 81       	ld	r24, Z
    156e:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>

	/*Send the address command to lcd*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Send the pattern to the lcd*/
	for(Local_u8Counter = 0u; Local_u8Counter < 8u; Local_u8Counter++)
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	78 f3       	brcs	.-34     	; 0x155c <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}

	/*Go to DDRAM Address to display the pattern*/
	CLCD_u8GoToXY(Copy_u8XPos, Copy_u8YPos);
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	0e 94 cf 0a 	call	0x159e	; 0x159e <CLCD_u8GoToXY>

	/*Display the pattern from CGRAM to DDRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_voidSendData>
}
    158c:	27 96       	adiw	r28, 0x07	; 7
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <CLCD_u8GoToXY>:

uint8 CLCD_u8GoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <CLCD_u8GoToXY+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <CLCD_u8GoToXY+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    15ae:	1a 82       	std	Y+2, r1	; 0x02

	uint8 Local_u8DDRamAdd;

	/*Configure the address of DDRam*/
	if(Copy_u8YPos == 0u)
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	88 23       	and	r24, r24
    15b4:	19 f4       	brne	.+6      	; 0x15bc <CLCD_u8GoToXY+0x1e>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <CLCD_u8GoToXY+0x30>
	}
	else if(Copy_u8YPos == 1u)
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	21 f4       	brne	.+8      	; 0x15ca <CLCD_u8GoToXY+0x2c>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	80 5c       	subi	r24, 0xC0	; 192
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <CLCD_u8GoToXY+0x30>
	}
	else
	{
		Local_u8ErrorState = NOK;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Send DDRam Set Address command to lcd*/
	SET_BIT(Local_u8DDRamAdd,7);
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_voidSendCmd>

	return Local_u8ErrorState;
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	28 97       	sbiw	r28, 0x08	; 8
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	6b 83       	std	Y+3, r22	; 0x03
    1602:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorEstate = OK;
    1604:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	08 f0       	brcs	.+2      	; 0x160e <DIO_u8SetPinDirection+0x24>
    160c:	f4 c0       	rjmp	.+488    	; 0x17f6 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	09 f0       	breq	.+2      	; 0x1616 <DIO_u8SetPinDirection+0x2c>
    1614:	72 c0       	rjmp	.+228    	; 0x16fa <DIO_u8SetPinDirection+0x110>
		{
			switch(Copy_u8Port)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	38 87       	std	Y+8, r19	; 0x08
    161e:	2f 83       	std	Y+7, r18	; 0x07
    1620:	8f 81       	ldd	r24, Y+7	; 0x07
    1622:	98 85       	ldd	r25, Y+8	; 0x08
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	49 f1       	breq	.+82     	; 0x167c <DIO_u8SetPinDirection+0x92>
    162a:	2f 81       	ldd	r18, Y+7	; 0x07
    162c:	38 85       	ldd	r19, Y+8	; 0x08
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <DIO_u8SetPinDirection+0x54>
    1634:	8f 81       	ldd	r24, Y+7	; 0x07
    1636:	98 85       	ldd	r25, Y+8	; 0x08
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <DIO_u8SetPinDirection+0x6a>
    163c:	5b c0       	rjmp	.+182    	; 0x16f4 <DIO_u8SetPinDirection+0x10a>
    163e:	2f 81       	ldd	r18, Y+7	; 0x07
    1640:	38 85       	ldd	r19, Y+8	; 0x08
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	71 f1       	breq	.+92     	; 0x16a4 <DIO_u8SetPinDirection+0xba>
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	98 85       	ldd	r25, Y+8	; 0x08
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	e9 f1       	breq	.+122    	; 0x16cc <DIO_u8SetPinDirection+0xe2>
    1652:	50 c0       	rjmp	.+160    	; 0x16f4 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);	break;
    1654:	aa e3       	ldi	r26, 0x3A	; 58
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ea e3       	ldi	r30, 0x3A	; 58
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8SetPinDirection+0x88>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8SetPinDirection+0x84>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	bf c0       	rjmp	.+382    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);	break;
    167c:	a7 e3       	ldi	r26, 0x37	; 55
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_u8SetPinDirection+0xb0>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_u8SetPinDirection+0xac>
    169e:	84 2b       	or	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	ab c0       	rjmp	.+342    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);	break;
    16a4:	a4 e3       	ldi	r26, 0x34	; 52
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e4 e3       	ldi	r30, 0x34	; 52
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_u8SetPinDirection+0xd8>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_u8SetPinDirection+0xd4>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	97 c0       	rjmp	.+302    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);	break;
    16cc:	a1 e3       	ldi	r26, 0x31	; 49
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e1 e3       	ldi	r30, 0x31	; 49
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_u8SetPinDirection+0x100>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_u8SetPinDirection+0xfc>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	83 c0       	rjmp	.+262    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	80 c0       	rjmp	.+256    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_INPUT)
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	88 23       	and	r24, r24
    16fe:	09 f0       	breq	.+2      	; 0x1702 <DIO_u8SetPinDirection+0x118>
    1700:	77 c0       	rjmp	.+238    	; 0x17f0 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3e 83       	std	Y+6, r19	; 0x06
    170a:	2d 83       	std	Y+5, r18	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	59 f1       	breq	.+86     	; 0x176c <DIO_u8SetPinDirection+0x182>
    1716:	2d 81       	ldd	r18, Y+5	; 0x05
    1718:	3e 81       	ldd	r19, Y+6	; 0x06
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	2c f4       	brge	.+10     	; 0x172a <DIO_u8SetPinDirection+0x140>
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f0       	breq	.+26     	; 0x1742 <DIO_u8SetPinDirection+0x158>
    1728:	60 c0       	rjmp	.+192    	; 0x17ea <DIO_u8SetPinDirection+0x200>
    172a:	2d 81       	ldd	r18, Y+5	; 0x05
    172c:	3e 81       	ldd	r19, Y+6	; 0x06
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	89 f1       	breq	.+98     	; 0x1796 <DIO_u8SetPinDirection+0x1ac>
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	83 30       	cpi	r24, 0x03	; 3
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <DIO_u8SetPinDirection+0x156>
    173e:	40 c0       	rjmp	.+128    	; 0x17c0 <DIO_u8SetPinDirection+0x1d6>
    1740:	54 c0       	rjmp	.+168    	; 0x17ea <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);	break;
    1742:	aa e3       	ldi	r26, 0x3A	; 58
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ea e3       	ldi	r30, 0x3A	; 58
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_u8SetPinDirection+0x176>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_u8SetPinDirection+0x172>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	47 c0       	rjmp	.+142    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);	break;
    176c:	a7 e3       	ldi	r26, 0x37	; 55
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e3       	ldi	r30, 0x37	; 55
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8SetPinDirection+0x1a0>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_u8SetPinDirection+0x19c>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	32 c0       	rjmp	.+100    	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);	break;
    1796:	a4 e3       	ldi	r26, 0x34	; 52
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e4 e3       	ldi	r30, 0x34	; 52
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_u8SetPinDirection+0x1ca>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_u8SetPinDirection+0x1c6>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	1d c0       	rjmp	.+58     	; 0x17fa <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);	break;
    17c0:	a1 e3       	ldi	r26, 0x31	; 49
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e1 e3       	ldi	r30, 0x31	; 49
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_u8SetPinDirection+0x1f4>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_u8SetPinDirection+0x1f0>
    17e2:	80 95       	com	r24
    17e4:	84 23       	and	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorEstate = NOK;	break;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorEstate = NOK;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorEstate = NOK;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorEstate;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fc:	28 96       	adiw	r28, 0x08	; 8
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	28 97       	sbiw	r28, 0x08	; 8
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	8a 83       	std	Y+2, r24	; 0x02
    1824:	6b 83       	std	Y+3, r22	; 0x03
    1826:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1828:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	88 30       	cpi	r24, 0x08	; 8
    182e:	08 f0       	brcs	.+2      	; 0x1832 <DIO_u8SetPinValue+0x24>
    1830:	f4 c0       	rjmp	.+488    	; 0x1a1a <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	09 f0       	breq	.+2      	; 0x183a <DIO_u8SetPinValue+0x2c>
    1838:	72 c0       	rjmp	.+228    	; 0x191e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	38 87       	std	Y+8, r19	; 0x08
    1842:	2f 83       	std	Y+7, r18	; 0x07
    1844:	8f 81       	ldd	r24, Y+7	; 0x07
    1846:	98 85       	ldd	r25, Y+8	; 0x08
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	49 f1       	breq	.+82     	; 0x18a0 <DIO_u8SetPinValue+0x92>
    184e:	2f 81       	ldd	r18, Y+7	; 0x07
    1850:	38 85       	ldd	r19, Y+8	; 0x08
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	2c f4       	brge	.+10     	; 0x1862 <DIO_u8SetPinValue+0x54>
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	61 f0       	breq	.+24     	; 0x1878 <DIO_u8SetPinValue+0x6a>
    1860:	5b c0       	rjmp	.+182    	; 0x1918 <DIO_u8SetPinValue+0x10a>
    1862:	2f 81       	ldd	r18, Y+7	; 0x07
    1864:	38 85       	ldd	r19, Y+8	; 0x08
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	71 f1       	breq	.+92     	; 0x18c8 <DIO_u8SetPinValue+0xba>
    186c:	8f 81       	ldd	r24, Y+7	; 0x07
    186e:	98 85       	ldd	r25, Y+8	; 0x08
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	e9 f1       	breq	.+122    	; 0x18f0 <DIO_u8SetPinValue+0xe2>
    1876:	50 c0       	rjmp	.+160    	; 0x1918 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);	break;
    1878:	ab e3       	ldi	r26, 0x3B	; 59
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	eb e3       	ldi	r30, 0x3B	; 59
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8SetPinValue+0x88>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_u8SetPinValue+0x84>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	bf c0       	rjmp	.+382    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);	break;
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_u8SetPinValue+0xb0>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_u8SetPinValue+0xac>
    18c2:	84 2b       	or	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	ab c0       	rjmp	.+342    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);	break;
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_u8SetPinValue+0xd8>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_u8SetPinValue+0xd4>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	97 c0       	rjmp	.+302    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);	break;
    18f0:	a2 e3       	ldi	r26, 0x32	; 50
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e2 e3       	ldi	r30, 0x32	; 50
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8SetPinValue+0x100>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8SetPinValue+0xfc>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	83 c0       	rjmp	.+262    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	80 c0       	rjmp	.+256    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_LOW)
    191e:	8c 81       	ldd	r24, Y+4	; 0x04
    1920:	88 23       	and	r24, r24
    1922:	09 f0       	breq	.+2      	; 0x1926 <DIO_u8SetPinValue+0x118>
    1924:	77 c0       	rjmp	.+238    	; 0x1a14 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3e 83       	std	Y+6, r19	; 0x06
    192e:	2d 83       	std	Y+5, r18	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	59 f1       	breq	.+86     	; 0x1990 <DIO_u8SetPinValue+0x182>
    193a:	2d 81       	ldd	r18, Y+5	; 0x05
    193c:	3e 81       	ldd	r19, Y+6	; 0x06
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <DIO_u8SetPinValue+0x140>
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f0       	breq	.+26     	; 0x1966 <DIO_u8SetPinValue+0x158>
    194c:	60 c0       	rjmp	.+192    	; 0x1a0e <DIO_u8SetPinValue+0x200>
    194e:	2d 81       	ldd	r18, Y+5	; 0x05
    1950:	3e 81       	ldd	r19, Y+6	; 0x06
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	89 f1       	breq	.+98     	; 0x19ba <DIO_u8SetPinValue+0x1ac>
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <DIO_u8SetPinValue+0x156>
    1962:	40 c0       	rjmp	.+128    	; 0x19e4 <DIO_u8SetPinValue+0x1d6>
    1964:	54 c0       	rjmp	.+168    	; 0x1a0e <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);	break;
    1966:	ab e3       	ldi	r26, 0x3B	; 59
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	eb e3       	ldi	r30, 0x3B	; 59
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_u8SetPinValue+0x176>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_u8SetPinValue+0x172>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	47 c0       	rjmp	.+142    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);	break;
    1990:	a8 e3       	ldi	r26, 0x38	; 56
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e3       	ldi	r30, 0x38	; 56
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8SetPinValue+0x1a0>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8SetPinValue+0x19c>
    19b2:	80 95       	com	r24
    19b4:	84 23       	and	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	32 c0       	rjmp	.+100    	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);	break;
    19ba:	a5 e3       	ldi	r26, 0x35	; 53
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e3       	ldi	r30, 0x35	; 53
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_u8SetPinValue+0x1ca>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_u8SetPinValue+0x1c6>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	1d c0       	rjmp	.+58     	; 0x1a1e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);	break;
    19e4:	a2 e3       	ldi	r26, 0x32	; 50
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e2 e3       	ldi	r30, 0x32	; 50
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_u8SetPinValue+0x1f4>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_u8SetPinValue+0x1f0>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	08 c0       	rjmp	.+16     	; 0x1a1e <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState = NOK;	break;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a20:	28 96       	adiw	r28, 0x08	; 8
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <DIO_u8TogglePinValue+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <DIO_u8TogglePinValue+0x8>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	8a 83       	std	Y+2, r24	; 0x02
    1a42:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a44:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <DIO_u8TogglePinValue+0x1c>
    1a4c:	72 c0       	rjmp	.+228    	; 0x1b32 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 83       	std	Y+5, r19	; 0x05
    1a56:	2c 83       	std	Y+4, r18	; 0x04
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	49 f1       	breq	.+82     	; 0x1ab4 <DIO_u8TogglePinValue+0x82>
    1a62:	2c 81       	ldd	r18, Y+4	; 0x04
    1a64:	3d 81       	ldd	r19, Y+5	; 0x05
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <DIO_u8TogglePinValue+0x44>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	61 f0       	breq	.+24     	; 0x1a8c <DIO_u8TogglePinValue+0x5a>
    1a74:	5b c0       	rjmp	.+182    	; 0x1b2c <DIO_u8TogglePinValue+0xfa>
    1a76:	2c 81       	ldd	r18, Y+4	; 0x04
    1a78:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	71 f1       	breq	.+92     	; 0x1adc <DIO_u8TogglePinValue+0xaa>
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	9d 81       	ldd	r25, Y+5	; 0x05
    1a84:	83 30       	cpi	r24, 0x03	; 3
    1a86:	91 05       	cpc	r25, r1
    1a88:	e9 f1       	breq	.+122    	; 0x1b04 <DIO_u8TogglePinValue+0xd2>
    1a8a:	50 c0       	rjmp	.+160    	; 0x1b2c <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA: TOG_BIT(PORTA,Copy_u8Pin);	break;
    1a8c:	ab e3       	ldi	r26, 0x3B	; 59
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	eb e3       	ldi	r30, 0x3B	; 59
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_u8TogglePinValue+0x78>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_u8TogglePinValue+0x74>
    1aae:	84 27       	eor	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	41 c0       	rjmp	.+130    	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB: TOG_BIT(PORTB,Copy_u8Pin);	break;
    1ab4:	a8 e3       	ldi	r26, 0x38	; 56
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e8 e3       	ldi	r30, 0x38	; 56
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_u8TogglePinValue+0xa0>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_u8TogglePinValue+0x9c>
    1ad6:	84 27       	eor	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	2d c0       	rjmp	.+90     	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC: TOG_BIT(PORTC,Copy_u8Pin);	break;
    1adc:	a5 e3       	ldi	r26, 0x35	; 53
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e5 e3       	ldi	r30, 0x35	; 53
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_u8TogglePinValue+0xc8>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_u8TogglePinValue+0xc4>
    1afe:	84 27       	eor	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	19 c0       	rjmp	.+50     	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD: TOG_BIT(PORTD,Copy_u8Pin);	break;
    1b04:	a2 e3       	ldi	r26, 0x32	; 50
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_u8TogglePinValue+0xf0>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <DIO_u8TogglePinValue+0xec>
    1b26:	84 27       	eor	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		default: Local_u8ErrorState = NOK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 *Copy_pu8Value)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	27 97       	sbiw	r28, 0x07	; 7
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
    1b5e:	6b 83       	std	Y+3, r22	; 0x03
    1b60:	5d 83       	std	Y+5, r21	; 0x05
    1b62:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1b64:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	88 30       	cpi	r24, 0x08	; 8
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <DIO_u8GetPinValue+0x26>
    1b6c:	74 c0       	rjmp	.+232    	; 0x1c56 <DIO_u8GetPinValue+0x10e>
	{
		switch(Copy_u8Port)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3f 83       	std	Y+7, r19	; 0x07
    1b76:	2e 83       	std	Y+6, r18	; 0x06
    1b78:	4e 81       	ldd	r20, Y+6	; 0x06
    1b7a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b7c:	41 30       	cpi	r20, 0x01	; 1
    1b7e:	51 05       	cpc	r21, r1
    1b80:	59 f1       	breq	.+86     	; 0x1bd8 <DIO_u8GetPinValue+0x90>
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	91 05       	cpc	r25, r1
    1b8a:	34 f4       	brge	.+12     	; 0x1b98 <DIO_u8GetPinValue+0x50>
    1b8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b90:	21 15       	cp	r18, r1
    1b92:	31 05       	cpc	r19, r1
    1b94:	69 f0       	breq	.+26     	; 0x1bb0 <DIO_u8GetPinValue+0x68>
    1b96:	5c c0       	rjmp	.+184    	; 0x1c50 <DIO_u8GetPinValue+0x108>
    1b98:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b9c:	42 30       	cpi	r20, 0x02	; 2
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	79 f1       	breq	.+94     	; 0x1c00 <DIO_u8GetPinValue+0xb8>
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <DIO_u8GetPinValue+0x66>
    1bac:	3d c0       	rjmp	.+122    	; 0x1c28 <DIO_u8GetPinValue+0xe0>
    1bae:	50 c0       	rjmp	.+160    	; 0x1c50 <DIO_u8GetPinValue+0x108>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);	break;
    1bb0:	e9 e3       	ldi	r30, 0x39	; 57
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a9 01       	movw	r20, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8GetPinValue+0x80>
    1bc4:	55 95       	asr	r21
    1bc6:	47 95       	ror	r20
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_u8GetPinValue+0x7c>
    1bcc:	ca 01       	movw	r24, r20
    1bce:	81 70       	andi	r24, 0x01	; 1
    1bd0:	ec 81       	ldd	r30, Y+4	; 0x04
    1bd2:	fd 81       	ldd	r31, Y+5	; 0x05
    1bd4:	80 83       	st	Z, r24
    1bd6:	41 c0       	rjmp	.+130    	; 0x1c5a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);	break;
    1bd8:	e6 e3       	ldi	r30, 0x36	; 54
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a9 01       	movw	r20, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_u8GetPinValue+0xa8>
    1bec:	55 95       	asr	r21
    1bee:	47 95       	ror	r20
    1bf0:	8a 95       	dec	r24
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_u8GetPinValue+0xa4>
    1bf4:	ca 01       	movw	r24, r20
    1bf6:	81 70       	andi	r24, 0x01	; 1
    1bf8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bfa:	fd 81       	ldd	r31, Y+5	; 0x05
    1bfc:	80 83       	st	Z, r24
    1bfe:	2d c0       	rjmp	.+90     	; 0x1c5a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);	break;
    1c00:	e3 e3       	ldi	r30, 0x33	; 51
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a9 01       	movw	r20, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_u8GetPinValue+0xd0>
    1c14:	55 95       	asr	r21
    1c16:	47 95       	ror	r20
    1c18:	8a 95       	dec	r24
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_u8GetPinValue+0xcc>
    1c1c:	ca 01       	movw	r24, r20
    1c1e:	81 70       	andi	r24, 0x01	; 1
    1c20:	ec 81       	ldd	r30, Y+4	; 0x04
    1c22:	fd 81       	ldd	r31, Y+5	; 0x05
    1c24:	80 83       	st	Z, r24
    1c26:	19 c0       	rjmp	.+50     	; 0x1c5a <DIO_u8GetPinValue+0x112>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);	break;
    1c28:	e0 e3       	ldi	r30, 0x30	; 48
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a9 01       	movw	r20, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <DIO_u8GetPinValue+0xf8>
    1c3c:	55 95       	asr	r21
    1c3e:	47 95       	ror	r20
    1c40:	8a 95       	dec	r24
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <DIO_u8GetPinValue+0xf4>
    1c44:	ca 01       	movw	r24, r20
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	ec 81       	ldd	r30, Y+4	; 0x04
    1c4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c4c:	80 83       	st	Z, r24
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <DIO_u8GetPinValue+0x112>
		default: Local_u8ErrorState = NOK;	break;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_u8GetPinValue+0x112>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5c:	27 96       	adiw	r28, 0x07	; 7
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <DIO_u8SetPortDirection>:

uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <DIO_u8SetPortDirection+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <DIO_u8SetPortDirection+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c80:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3d 83       	std	Y+5, r19	; 0x05
    1c8a:	2c 83       	std	Y+4, r18	; 0x04
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	91 05       	cpc	r25, r1
    1c94:	d1 f0       	breq	.+52     	; 0x1cca <DIO_u8SetPortDirection+0x5c>
    1c96:	2c 81       	ldd	r18, Y+4	; 0x04
    1c98:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <DIO_u8SetPortDirection+0x3c>
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <DIO_u8SetPortDirection+0x52>
    1ca8:	1f c0       	rjmp	.+62     	; 0x1ce8 <DIO_u8SetPortDirection+0x7a>
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	3d 81       	ldd	r19, Y+5	; 0x05
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	81 f0       	breq	.+32     	; 0x1cd4 <DIO_u8SetPortDirection+0x66>
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 05       	cpc	r25, r1
    1cbc:	81 f0       	breq	.+32     	; 0x1cde <DIO_u8SetPortDirection+0x70>
    1cbe:	14 c0       	rjmp	.+40     	; 0x1ce8 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction;	break;
    1cc0:	ea e3       	ldi	r30, 0x3A	; 58
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	80 83       	st	Z, r24
    1cc8:	11 c0       	rjmp	.+34     	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB = Copy_u8Direction;	break;
    1cca:	e7 e3       	ldi	r30, 0x37	; 55
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	80 83       	st	Z, r24
    1cd2:	0c c0       	rjmp	.+24     	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC = Copy_u8Direction;	break;
    1cd4:	e4 e3       	ldi	r30, 0x34	; 52
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	80 83       	st	Z, r24
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD = Copy_u8Direction;	break;
    1cde:	e1 e3       	ldi	r30, 0x31	; 49
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	80 83       	st	Z, r24
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <DIO_u8SetPortValue+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <DIO_u8SetPortValue+0x8>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1d10:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3d 83       	std	Y+5, r19	; 0x05
    1d1a:	2c 83       	std	Y+4, r18	; 0x04
    1d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	91 05       	cpc	r25, r1
    1d24:	d1 f0       	breq	.+52     	; 0x1d5a <DIO_u8SetPortValue+0x5c>
    1d26:	2c 81       	ldd	r18, Y+4	; 0x04
    1d28:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <DIO_u8SetPortValue+0x3c>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <DIO_u8SetPortValue+0x52>
    1d38:	1f c0       	rjmp	.+62     	; 0x1d78 <DIO_u8SetPortValue+0x7a>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	81 f0       	breq	.+32     	; 0x1d64 <DIO_u8SetPortValue+0x66>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	81 f0       	breq	.+32     	; 0x1d6e <DIO_u8SetPortValue+0x70>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA = Copy_u8Value;	break;
    1d50:	eb e3       	ldi	r30, 0x3B	; 59
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	80 83       	st	Z, r24
    1d58:	11 c0       	rjmp	.+34     	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB = Copy_u8Value;	break;
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	80 83       	st	Z, r24
    1d62:	0c c0       	rjmp	.+24     	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC = Copy_u8Value;	break;
    1d64:	e5 e3       	ldi	r30, 0x35	; 53
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	80 83       	st	Z, r24
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD = Copy_u8Value;	break;
    1d6e:	e2 e3       	ldi	r30, 0x32	; 50
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	80 83       	st	Z, r24
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState = NOK;	break;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <GIE_voidEnable>:

/**
 * @brief Function to enable global interrupt.
 */
void GIE_voidEnable(void)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupt with c code*/
	//SET_BIT(SREG,SREG_I);

	/*Enable global interrupt with inline assembly code*/
	__asm __volatile("SEI");
    1d96:	78 94       	sei
}
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <GIE_voidDisable>:

/**
 * @brief Function to disable global interrupt.
 */
void GIE_voidDisable(void)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
	/*Disable global interrupt with c code*/
	//CLR_BIT(SREG,SREG_I);

	/*Disable global interrupt with inline assembly code*/
	__asm __volatile("CLI");
    1da6:	f8 94       	cli
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <IR_enCheckState>:
#include "IR_private.h"
#include "IR_interface.h"


IR_REFLECT_STATE_t IR_enCheckState(IR_t *Copy_stSensorData)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <IR_enCheckState+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <IR_enCheckState+0x8>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
	IR_REFLECT_STATE_t Local_enReflectState;
	uint8 Local_u8PinState;

	DIO_u8GetPinValue(Copy_stSensorData -> Port, Copy_stSensorData -> Pin, &Local_u8PinState);
    1dbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc2:	80 81       	ld	r24, Z
    1dc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	9e 01       	movw	r18, r28
    1dcc:	2e 5f       	subi	r18, 0xFE	; 254
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	69 2f       	mov	r22, r25
    1dd2:	a9 01       	movw	r20, r18
    1dd4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <DIO_u8GetPinValue>

	if(Local_u8PinState == DIO_u8PIN_HIGH)
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	11 f4       	brne	.+4      	; 0x1de2 <IR_enCheckState+0x34>
	{
		Local_enReflectState = REFLECTED;
    1dde:	19 82       	std	Y+1, r1	; 0x01
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <IR_enCheckState+0x3e>
	}
	else if (Local_u8PinState == DIO_u8PIN_LOW)
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	88 23       	and	r24, r24
    1de6:	11 f4       	brne	.+4      	; 0x1dec <IR_enCheckState+0x3e>
	{
		Local_enReflectState = NOT_REFLECTED;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enReflectState;
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <MOTOR_u8RotateCW>:
#include "MOTOR_private.h"
#include "MOTOR_interface.h"


uint8 MOTOR_u8RotateCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <MOTOR_u8RotateCW+0x6>
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9b 83       	std	Y+3, r25	; 0x03
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1e0c:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	a9 f0       	breq	.+42     	; 0x1e40 <MOTOR_u8RotateCW+0x44>
	{
		/*Set pin 1 as low, pin 2 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_LOW);
    1e16:	ea 81       	ldd	r30, Y+2	; 0x02
    1e18:	fb 81       	ldd	r31, Y+3	; 0x03
    1e1a:	80 81       	ld	r24, Z
    1e1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	69 2f       	mov	r22, r25
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    1e2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2e:	80 81       	ld	r24, Z
    1e30:	ea 81       	ldd	r30, Y+2	; 0x02
    1e32:	fb 81       	ldd	r31, Y+3	; 0x03
    1e34:	92 81       	ldd	r25, Z+2	; 0x02
    1e36:	69 2f       	mov	r22, r25
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <MOTOR_u8RotateCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <MOTOR_u8RotateCCW>:

uint8 MOTOR_u8RotateCCW(const MOTOR_t *Copy_pmotortMotorInfo)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <MOTOR_u8RotateCCW+0x6>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9b 83       	std	Y+3, r25	; 0x03
    1e60:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1e62:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	a9 f0       	breq	.+42     	; 0x1e96 <MOTOR_u8RotateCCW+0x44>
	{
		/*Set pin 2 as low, pin 1 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_LOW);
    1e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e70:	80 81       	ld	r24, Z
    1e72:	ea 81       	ldd	r30, Y+2	; 0x02
    1e74:	fb 81       	ldd	r31, Y+3	; 0x03
    1e76:	92 81       	ldd	r25, Z+2	; 0x02
    1e78:	69 2f       	mov	r22, r25
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    1e80:	ea 81       	ldd	r30, Y+2	; 0x02
    1e82:	fb 81       	ldd	r31, Y+3	; 0x03
    1e84:	80 81       	ld	r24, Z
    1e86:	ea 81       	ldd	r30, Y+2	; 0x02
    1e88:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	69 2f       	mov	r22, r25
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <MOTOR_u8RotateCCW+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <MOTOR_u8Stop>:

uint8 MOTOR_u8Stop(const MOTOR_t *Copy_pmotortMotorInfo)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <MOTOR_u8Stop+0x6>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	9b 83       	std	Y+3, r25	; 0x03
    1eb6:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1eb8:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer address*/
	if(Copy_pmotortMotorInfo != NULL)
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	a9 f0       	breq	.+42     	; 0x1eec <MOTOR_u8Stop+0x44>
	{
		/*Set pin 1 and 2 as high*/
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin2, DIO_u8PIN_HIGH);
    1ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec6:	80 81       	ld	r24, Z
    1ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eca:	fb 81       	ldd	r31, Y+3	; 0x03
    1ecc:	92 81       	ldd	r25, Z+2	; 0x02
    1ece:	69 2f       	mov	r22, r25
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pmotortMotorInfo -> Port, Copy_pmotortMotorInfo -> Pin1, DIO_u8PIN_HIGH);
    1ed6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed8:	fb 81       	ldd	r31, Y+3	; 0x03
    1eda:	80 81       	ld	r24, Z
    1edc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ede:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	69 2f       	mov	r22, r25
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <MOTOR_u8Stop+0x48>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return the error state*/
	return Local_u8ErrorState;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"


void PORT_voidInit(void)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1f06:	ea e3       	ldi	r30, 0x3A	; 58
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	8c ef       	ldi	r24, 0xFC	; 252
    1f0c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1f0e:	e7 e3       	ldi	r30, 0x37	; 55
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	8f ef       	ldi	r24, 0xFF	; 255
    1f14:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1f16:	e4 e3       	ldi	r30, 0x34	; 52
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1f1e:	e1 e3       	ldi	r30, 0x31	; 49
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	8e eb       	ldi	r24, 0xBE	; 190
    1f24:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    1f26:	eb e3       	ldi	r30, 0x3B	; 59
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	80 83       	st	Z, r24
	PORTB = PORTB_INITIAL_VALUE;
    1f2e:	e8 e3       	ldi	r30, 0x38	; 56
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1f34:	e5 e3       	ldi	r30, 0x35	; 53
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1f3a:	e2 e3       	ldi	r30, 0x32	; 50
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 83       	st	Z, r24
}
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <TIMER0_u8Init>:
static void (* TIMERS_pvCallBackFuncArr[8])(void);

static uint8 TIMERS_u8StateArr[3] = {IDLE};

uint8 TIMER0_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	27 97       	sbiw	r28, 0x07	; 7
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	9b 83       	std	Y+3, r25	; 0x03
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    1f60:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	9b 81       	ldd	r25, Y+3	; 0x03
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <TIMER0_u8Init+0x24>
    1f6a:	de c0       	rjmp	.+444    	; 0x2128 <TIMER0_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER0] == IDLE)
    1f6c:	80 91 80 01 	lds	r24, 0x0180
    1f70:	88 23       	and	r24, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <TIMER0_u8Init+0x2e>
    1f74:	d6 c0       	rjmp	.+428    	; 0x2122 <TIMER0_u8Init+0x1da>
		{
			/*Inform others that timer 0 is busy*/
			TIMERS_u8StateArr[TIMER0] = BUSY;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	80 93 80 01 	sts	0x0180, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    1f7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f80:	81 81       	ldd	r24, Z+1	; 0x01
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	3f 83       	std	Y+7, r19	; 0x07
    1f88:	2e 83       	std	Y+6, r18	; 0x06
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	91 05       	cpc	r25, r1
    1f92:	21 f1       	breq	.+72     	; 0x1fdc <TIMER0_u8Init+0x94>
    1f94:	2e 81       	ldd	r18, Y+6	; 0x06
    1f96:	3f 81       	ldd	r19, Y+7	; 0x07
    1f98:	22 30       	cpi	r18, 0x02	; 2
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <TIMER0_u8Init+0x60>
    1f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	61 f0       	breq	.+24     	; 0x1fbe <TIMER0_u8Init+0x76>
    1fa6:	46 c0       	rjmp	.+140    	; 0x2034 <TIMER0_u8Init+0xec>
    1fa8:	2e 81       	ldd	r18, Y+6	; 0x06
    1faa:	3f 81       	ldd	r19, Y+7	; 0x07
    1fac:	22 30       	cpi	r18, 0x02	; 2
    1fae:	31 05       	cpc	r19, r1
    1fb0:	21 f1       	breq	.+72     	; 0x1ffa <TIMER0_u8Init+0xb2>
    1fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	91 05       	cpc	r25, r1
    1fba:	71 f1       	breq	.+92     	; 0x2018 <TIMER0_u8Init+0xd0>
    1fbc:	3b c0       	rjmp	.+118    	; 0x2034 <TIMER0_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1fbe:	a3 e5       	ldi	r26, 0x53	; 83
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e3 e5       	ldi	r30, 0x53	; 83
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 7b       	andi	r24, 0xBF	; 191
    1fca:	8c 93       	st	X, r24
    1fcc:	a3 e5       	ldi	r26, 0x53	; 83
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e3 e5       	ldi	r30, 0x53	; 83
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	87 7f       	andi	r24, 0xF7	; 247
    1fd8:	8c 93       	st	X, r24
    1fda:	2c c0       	rjmp	.+88     	; 0x2034 <TIMER0_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR0,TCCR0_WGM00);	CLR_BIT(TCCR0,TCCR0_WGM01);	break;
    1fdc:	a3 e5       	ldi	r26, 0x53	; 83
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e3 e5       	ldi	r30, 0x53	; 83
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	8c 93       	st	X, r24
    1fea:	a3 e5       	ldi	r26, 0x53	; 83
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e3 e5       	ldi	r30, 0x53	; 83
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	87 7f       	andi	r24, 0xF7	; 247
    1ff6:	8c 93       	st	X, r24
    1ff8:	1d c0       	rjmp	.+58     	; 0x2034 <TIMER0_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    1ffa:	a3 e5       	ldi	r26, 0x53	; 83
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e3 e5       	ldi	r30, 0x53	; 83
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	8f 7b       	andi	r24, 0xBF	; 191
    2006:	8c 93       	st	X, r24
    2008:	a3 e5       	ldi	r26, 0x53	; 83
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e3 e5       	ldi	r30, 0x53	; 83
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	88 60       	ori	r24, 0x08	; 8
    2014:	8c 93       	st	X, r24
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <TIMER0_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR0,TCCR0_WGM00);	SET_BIT(TCCR0,TCCR0_WGM01);	break;
    2018:	a3 e5       	ldi	r26, 0x53	; 83
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e3 e5       	ldi	r30, 0x53	; 83
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
    2026:	a3 e5       	ldi	r26, 0x53	; 83
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e3 e5       	ldi	r30, 0x53	; 83
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 60       	ori	r24, 0x08	; 8
    2032:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR0 &= TIMER0_2_OCMATCH_MASK;
    2034:	a3 e5       	ldi	r26, 0x53	; 83
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e3 e5       	ldi	r30, 0x53	; 83
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8f 7c       	andi	r24, 0xCF	; 207
    2040:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2042:	ea 81       	ldd	r30, Y+2	; 0x02
    2044:	fb 81       	ldd	r31, Y+3	; 0x03
    2046:	81 81       	ldd	r24, Z+1	; 0x01
    2048:	88 23       	and	r24, r24
    204a:	29 f0       	breq	.+10     	; 0x2056 <TIMER0_u8Init+0x10e>
    204c:	ea 81       	ldd	r30, Y+2	; 0x02
    204e:	fb 81       	ldd	r31, Y+3	; 0x03
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	82 30       	cpi	r24, 0x02	; 2
    2054:	e1 f4       	brne	.+56     	; 0x208e <TIMER0_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    2056:	ea 81       	ldd	r30, Y+2	; 0x02
    2058:	fb 81       	ldd	r31, Y+3	; 0x03
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	84 30       	cpi	r24, 0x04	; 4
    205e:	a0 f4       	brcc	.+40     	; 0x2088 <TIMER0_u8Init+0x140>
				{
					TCCR0 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    2060:	a3 e5       	ldi	r26, 0x53	; 83
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e3 e5       	ldi	r30, 0x53	; 83
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	28 2f       	mov	r18, r24
    206c:	ea 81       	ldd	r30, Y+2	; 0x02
    206e:	fb 81       	ldd	r31, Y+3	; 0x03
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	82 95       	swap	r24
    2078:	92 95       	swap	r25
    207a:	90 7f       	andi	r25, 0xF0	; 240
    207c:	98 27       	eor	r25, r24
    207e:	80 7f       	andi	r24, 0xF0	; 240
    2080:	98 27       	eor	r25, r24
    2082:	82 2b       	or	r24, r18
    2084:	8c 93       	st	X, r24
    2086:	3b c0       	rjmp	.+118    	; 0x20fe <TIMER0_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	38 c0       	rjmp	.+112    	; 0x20fe <TIMER0_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    208e:	ea 81       	ldd	r30, Y+2	; 0x02
    2090:	fb 81       	ldd	r31, Y+3	; 0x03
    2092:	81 81       	ldd	r24, Z+1	; 0x01
    2094:	83 30       	cpi	r24, 0x03	; 3
    2096:	29 f0       	breq	.+10     	; 0x20a2 <TIMER0_u8Init+0x15a>
    2098:	ea 81       	ldd	r30, Y+2	; 0x02
    209a:	fb 81       	ldd	r31, Y+3	; 0x03
    209c:	81 81       	ldd	r24, Z+1	; 0x01
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	71 f5       	brne	.+92     	; 0x20fe <TIMER0_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    20a2:	ea 81       	ldd	r30, Y+2	; 0x02
    20a4:	fb 81       	ldd	r31, Y+3	; 0x03
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	3d 83       	std	Y+5, r19	; 0x05
    20ae:	2c 83       	std	Y+4, r18	; 0x04
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	84 30       	cpi	r24, 0x04	; 4
    20b6:	91 05       	cpc	r25, r1
    20b8:	81 f0       	breq	.+32     	; 0x20da <TIMER0_u8Init+0x192>
    20ba:	2c 81       	ldd	r18, Y+4	; 0x04
    20bc:	3d 81       	ldd	r19, Y+5	; 0x05
    20be:	25 30       	cpi	r18, 0x05	; 5
    20c0:	31 05       	cpc	r19, r1
    20c2:	99 f0       	breq	.+38     	; 0x20ea <TIMER0_u8Init+0x1a2>
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	b9 f4       	brne	.+46     	; 0x20fa <TIMER0_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    20cc:	e3 e5       	ldi	r30, 0x53	; 83
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	a3 e5       	ldi	r26, 0x53	; 83
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	8c 91       	ld	r24, X
    20d6:	80 83       	st	Z, r24
    20d8:	12 c0       	rjmp	.+36     	; 0x20fe <TIMER0_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    20da:	a3 e5       	ldi	r26, 0x53	; 83
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e5       	ldi	r30, 0x53	; 83
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	80 62       	ori	r24, 0x20	; 32
    20e6:	8c 93       	st	X, r24
    20e8:	0a c0       	rjmp	.+20     	; 0x20fe <TIMER0_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    20ea:	a3 e5       	ldi	r26, 0x53	; 83
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e3 e5       	ldi	r30, 0x53	; 83
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 63       	ori	r24, 0x30	; 48
    20f6:	8c 93       	st	X, r24
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <TIMER0_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR0 &= PRESCALER_MASK;
    20fe:	a3 e5       	ldi	r26, 0x53	; 83
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e3 e5       	ldi	r30, 0x53	; 83
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	88 7f       	andi	r24, 0xF8	; 248
    210a:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerConfig -> ClkSelect;
    210c:	a3 e5       	ldi	r26, 0x53	; 83
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e3 e5       	ldi	r30, 0x53	; 83
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	90 81       	ld	r25, Z
    2116:	ea 81       	ldd	r30, Y+2	; 0x02
    2118:	fb 81       	ldd	r31, Y+3	; 0x03
    211a:	80 81       	ld	r24, Z
    211c:	89 2b       	or	r24, r25
    211e:	8c 93       	st	X, r24
    2120:	05 c0       	rjmp	.+10     	; 0x212c <TIMER0_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2122:	84 e0       	ldi	r24, 0x04	; 4
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	02 c0       	rjmp	.+4      	; 0x212c <TIMER0_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
}
    212e:	27 96       	adiw	r28, 0x07	; 7
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <TIMER1_u8Init>:
uint8 TIMER1_u8Init(const TIMER1_CFG_t *Copy_pstTimerConfig)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	29 97       	sbiw	r28, 0x09	; 9
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	9b 83       	std	Y+3, r25	; 0x03
    2156:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2158:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	9b 81       	ldd	r25, Y+3	; 0x03
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	09 f4       	brne	.+2      	; 0x2164 <TIMER1_u8Init+0x24>
    2162:	71 c1       	rjmp	.+738    	; 0x2446 <TIMER1_u8Init+0x306>
	{
		if(TIMERS_u8StateArr[TIMER1] == IDLE)
    2164:	80 91 81 01 	lds	r24, 0x0181
    2168:	88 23       	and	r24, r24
    216a:	09 f0       	breq	.+2      	; 0x216e <TIMER1_u8Init+0x2e>
    216c:	69 c1       	rjmp	.+722    	; 0x2440 <TIMER1_u8Init+0x300>
		{
			/*Inform others that timer 1 is busy from now*/
			TIMERS_u8StateArr[TIMER1] = BUSY;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	80 93 81 01 	sts	0x0181, r24

			/*Select Wave Generation Mode*/
			TCCR1A &= TIMER1_WGM_MASK_A;
    2174:	af e4       	ldi	r26, 0x4F	; 79
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8c 7f       	andi	r24, 0xFC	; 252
    2180:	8c 93       	st	X, r24
			TCCR1B &= TIMER1_WGM_MASK_B;
    2182:	ae e4       	ldi	r26, 0x4E	; 78
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	ee e4       	ldi	r30, 0x4E	; 78
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	87 7e       	andi	r24, 0xE7	; 231
    218e:	8c 93       	st	X, r24
			TCCR1A |= ((Copy_pstTimerConfig -> WGM) & 3);
    2190:	af e4       	ldi	r26, 0x4F	; 79
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ef e4       	ldi	r30, 0x4F	; 79
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	98 2f       	mov	r25, r24
    219c:	ea 81       	ldd	r30, Y+2	; 0x02
    219e:	fb 81       	ldd	r31, Y+3	; 0x03
    21a0:	81 81       	ldd	r24, Z+1	; 0x01
    21a2:	83 70       	andi	r24, 0x03	; 3
    21a4:	89 2b       	or	r24, r25
    21a6:	8c 93       	st	X, r24
			TCCR1B |= ((((Copy_pstTimerConfig -> WGM) >> 2) & 3) << 3);
    21a8:	ae e4       	ldi	r26, 0x4E	; 78
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	ee e4       	ldi	r30, 0x4E	; 78
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	28 2f       	mov	r18, r24
    21b4:	ea 81       	ldd	r30, Y+2	; 0x02
    21b6:	fb 81       	ldd	r31, Y+3	; 0x03
    21b8:	81 81       	ldd	r24, Z+1	; 0x01
    21ba:	86 95       	lsr	r24
    21bc:	86 95       	lsr	r24
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	83 70       	andi	r24, 0x03	; 3
    21c4:	90 70       	andi	r25, 0x00	; 0
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	82 2b       	or	r24, r18
    21d4:	8c 93       	st	X, r24

			/*Select Output Compare Match Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    21d6:	ea 81       	ldd	r30, Y+2	; 0x02
    21d8:	fb 81       	ldd	r31, Y+3	; 0x03
    21da:	81 81       	ldd	r24, Z+1	; 0x01
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	39 87       	std	Y+9, r19	; 0x09
    21e2:	28 87       	std	Y+8, r18	; 0x08
    21e4:	88 85       	ldd	r24, Y+8	; 0x08
    21e6:	99 85       	ldd	r25, Y+9	; 0x09
    21e8:	8c 30       	cpi	r24, 0x0C	; 12
    21ea:	91 05       	cpc	r25, r1
    21ec:	b4 f4       	brge	.+44     	; 0x221a <TIMER1_u8Init+0xda>
    21ee:	28 85       	ldd	r18, Y+8	; 0x08
    21f0:	39 85       	ldd	r19, Y+9	; 0x09
    21f2:	25 30       	cpi	r18, 0x05	; 5
    21f4:	31 05       	cpc	r19, r1
    21f6:	0c f0       	brlt	.+2      	; 0x21fa <TIMER1_u8Init+0xba>
    21f8:	70 c0       	rjmp	.+224    	; 0x22da <TIMER1_u8Init+0x19a>
    21fa:	88 85       	ldd	r24, Y+8	; 0x08
    21fc:	99 85       	ldd	r25, Y+9	; 0x09
    21fe:	84 30       	cpi	r24, 0x04	; 4
    2200:	91 05       	cpc	r25, r1
    2202:	c4 f4       	brge	.+48     	; 0x2234 <TIMER1_u8Init+0xf4>
    2204:	28 85       	ldd	r18, Y+8	; 0x08
    2206:	39 85       	ldd	r19, Y+9	; 0x09
    2208:	21 30       	cpi	r18, 0x01	; 1
    220a:	31 05       	cpc	r19, r1
    220c:	0c f0       	brlt	.+2      	; 0x2210 <TIMER1_u8Init+0xd0>
    220e:	65 c0       	rjmp	.+202    	; 0x22da <TIMER1_u8Init+0x19a>
    2210:	88 85       	ldd	r24, Y+8	; 0x08
    2212:	99 85       	ldd	r25, Y+9	; 0x09
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	71 f0       	breq	.+28     	; 0x2234 <TIMER1_u8Init+0xf4>
    2218:	ff c0       	rjmp	.+510    	; 0x2418 <TIMER1_u8Init+0x2d8>
    221a:	28 85       	ldd	r18, Y+8	; 0x08
    221c:	39 85       	ldd	r19, Y+9	; 0x09
    221e:	2c 30       	cpi	r18, 0x0C	; 12
    2220:	31 05       	cpc	r19, r1
    2222:	41 f0       	breq	.+16     	; 0x2234 <TIMER1_u8Init+0xf4>
    2224:	88 85       	ldd	r24, Y+8	; 0x08
    2226:	99 85       	ldd	r25, Y+9	; 0x09
    2228:	0e 97       	sbiw	r24, 0x0e	; 14
    222a:	82 30       	cpi	r24, 0x02	; 2
    222c:	91 05       	cpc	r25, r1
    222e:	08 f0       	brcs	.+2      	; 0x2232 <TIMER1_u8Init+0xf2>
    2230:	f3 c0       	rjmp	.+486    	; 0x2418 <TIMER1_u8Init+0x2d8>
    2232:	53 c0       	rjmp	.+166    	; 0x22da <TIMER1_u8Init+0x19a>
			{
			case NORMAL_16_BITS:
			case CTC_OCR1A:
			case CTC_ICR1:
				/*For Channel A*/
				if((Copy_pstTimerConfig -> OCAMode) < NON_INVERTED_PWM)
    2234:	ea 81       	ldd	r30, Y+2	; 0x02
    2236:	fb 81       	ldd	r31, Y+3	; 0x03
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	84 30       	cpi	r24, 0x04	; 4
    223c:	f0 f4       	brcc	.+60     	; 0x227a <TIMER1_u8Init+0x13a>
				{
					TCCR1A &= TIMER1_OCMATCH_A_MASK;
    223e:	af e4       	ldi	r26, 0x4F	; 79
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	ef e4       	ldi	r30, 0x4F	; 79
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8f 73       	andi	r24, 0x3F	; 63
    224a:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCAMode) << 6);
    224c:	af e4       	ldi	r26, 0x4F	; 79
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ef e4       	ldi	r30, 0x4F	; 79
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	28 2f       	mov	r18, r24
    2258:	ea 81       	ldd	r30, Y+2	; 0x02
    225a:	fb 81       	ldd	r31, Y+3	; 0x03
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	00 24       	eor	r0, r0
    2264:	96 95       	lsr	r25
    2266:	87 95       	ror	r24
    2268:	07 94       	ror	r0
    226a:	96 95       	lsr	r25
    226c:	87 95       	ror	r24
    226e:	07 94       	ror	r0
    2270:	98 2f       	mov	r25, r24
    2272:	80 2d       	mov	r24, r0
    2274:	82 2b       	or	r24, r18
    2276:	8c 93       	st	X, r24
    2278:	07 c0       	rjmp	.+14     	; 0x2288 <TIMER1_u8Init+0x148>
				}
				else if((Copy_pstTimerConfig -> OCAMode) == DO_NOT_CHANGE)
    227a:	ea 81       	ldd	r30, Y+2	; 0x02
    227c:	fb 81       	ldd	r31, Y+3	; 0x03
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	86 30       	cpi	r24, 0x06	; 6
    2282:	11 f0       	breq	.+4      	; 0x2288 <TIMER1_u8Init+0x148>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				if((Copy_pstTimerConfig -> OCBMode) < NON_INVERTED_PWM)
    2288:	ea 81       	ldd	r30, Y+2	; 0x02
    228a:	fb 81       	ldd	r31, Y+3	; 0x03
    228c:	83 81       	ldd	r24, Z+3	; 0x03
    228e:	84 30       	cpi	r24, 0x04	; 4
    2290:	d8 f4       	brcc	.+54     	; 0x22c8 <TIMER1_u8Init+0x188>
				{
					TCCR1A &= TIMER1_OCMATCH_B_MASK;
    2292:	af e4       	ldi	r26, 0x4F	; 79
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ef e4       	ldi	r30, 0x4F	; 79
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8f 7c       	andi	r24, 0xCF	; 207
    229e:	8c 93       	st	X, r24
					TCCR1A |= ((Copy_pstTimerConfig -> OCBMode) << 4);
    22a0:	af e4       	ldi	r26, 0x4F	; 79
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	ef e4       	ldi	r30, 0x4F	; 79
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	28 2f       	mov	r18, r24
    22ac:	ea 81       	ldd	r30, Y+2	; 0x02
    22ae:	fb 81       	ldd	r31, Y+3	; 0x03
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	82 95       	swap	r24
    22b8:	92 95       	swap	r25
    22ba:	90 7f       	andi	r25, 0xF0	; 240
    22bc:	98 27       	eor	r25, r24
    22be:	80 7f       	andi	r24, 0xF0	; 240
    22c0:	98 27       	eor	r25, r24
    22c2:	82 2b       	or	r24, r18
    22c4:	8c 93       	st	X, r24
    22c6:	aa c0       	rjmp	.+340    	; 0x241c <TIMER1_u8Init+0x2dc>
				}
				else if((Copy_pstTimerConfig -> OCBMode) == DO_NOT_CHANGE)
    22c8:	ea 81       	ldd	r30, Y+2	; 0x02
    22ca:	fb 81       	ldd	r31, Y+3	; 0x03
    22cc:	83 81       	ldd	r24, Z+3	; 0x03
    22ce:	86 30       	cpi	r24, 0x06	; 6
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <TIMER1_u8Init+0x194>
    22d2:	a4 c0       	rjmp	.+328    	; 0x241c <TIMER1_u8Init+0x2dc>
				{
					/*Do nothing*/
				}
				else
				{
					Local_u8ErrorState = NOK;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	a1 c0       	rjmp	.+322    	; 0x241c <TIMER1_u8Init+0x2dc>
			case PHASE_FREQ_CORR_ICR1:
			case PHASE_FREQ_CORR_OCR1A:
			case PHASE_CORR_ICR1:
			case PHASE_CORR_OCR1A:
				/*For Channel A*/
				switch(Copy_pstTimerConfig -> OCAMode)
    22da:	ea 81       	ldd	r30, Y+2	; 0x02
    22dc:	fb 81       	ldd	r31, Y+3	; 0x03
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	3f 83       	std	Y+7, r19	; 0x07
    22e6:	2e 83       	std	Y+6, r18	; 0x06
    22e8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ea:	9f 81       	ldd	r25, Y+7	; 0x07
    22ec:	84 30       	cpi	r24, 0x04	; 4
    22ee:	91 05       	cpc	r25, r1
    22f0:	19 f1       	breq	.+70     	; 0x2338 <TIMER1_u8Init+0x1f8>
    22f2:	2e 81       	ldd	r18, Y+6	; 0x06
    22f4:	3f 81       	ldd	r19, Y+7	; 0x07
    22f6:	25 30       	cpi	r18, 0x05	; 5
    22f8:	31 05       	cpc	r19, r1
    22fa:	2c f4       	brge	.+10     	; 0x2306 <TIMER1_u8Init+0x1c6>
    22fc:	8e 81       	ldd	r24, Y+6	; 0x06
    22fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	61 f0       	breq	.+24     	; 0x231c <TIMER1_u8Init+0x1dc>
    2304:	37 c0       	rjmp	.+110    	; 0x2374 <TIMER1_u8Init+0x234>
    2306:	2e 81       	ldd	r18, Y+6	; 0x06
    2308:	3f 81       	ldd	r19, Y+7	; 0x07
    230a:	25 30       	cpi	r18, 0x05	; 5
    230c:	31 05       	cpc	r19, r1
    230e:	19 f1       	breq	.+70     	; 0x2356 <TIMER1_u8Init+0x216>
    2310:	8e 81       	ldd	r24, Y+6	; 0x06
    2312:	9f 81       	ldd	r25, Y+7	; 0x07
    2314:	86 30       	cpi	r24, 0x06	; 6
    2316:	91 05       	cpc	r25, r1
    2318:	79 f1       	breq	.+94     	; 0x2378 <TIMER1_u8Init+0x238>
    231a:	2c c0       	rjmp	.+88     	; 0x2374 <TIMER1_u8Init+0x234>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    231c:	af e4       	ldi	r26, 0x4F	; 79
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	ef e4       	ldi	r30, 0x4F	; 79
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8f 73       	andi	r24, 0x3F	; 63
    2328:	8c 93       	st	X, r24
    232a:	af e4       	ldi	r26, 0x4F	; 79
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	ef e4       	ldi	r30, 0x4F	; 79
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8c 93       	st	X, r24
    2336:	20 c0       	rjmp	.+64     	; 0x2378 <TIMER1_u8Init+0x238>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    2338:	af e4       	ldi	r26, 0x4F	; 79
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ef e4       	ldi	r30, 0x4F	; 79
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8f 73       	andi	r24, 0x3F	; 63
    2344:	8c 93       	st	X, r24
    2346:	af e4       	ldi	r26, 0x4F	; 79
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 68       	ori	r24, 0x80	; 128
    2352:	8c 93       	st	X, r24
    2354:	11 c0       	rjmp	.+34     	; 0x2378 <TIMER1_u8Init+0x238>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    2356:	af e4       	ldi	r26, 0x4F	; 79
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	ef e4       	ldi	r30, 0x4F	; 79
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8f 73       	andi	r24, 0x3F	; 63
    2362:	8c 93       	st	X, r24
    2364:	af e4       	ldi	r26, 0x4F	; 79
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	ef e4       	ldi	r30, 0x4F	; 79
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	80 6c       	ori	r24, 0xC0	; 192
    2370:	8c 93       	st	X, r24
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <TIMER1_u8Init+0x238>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
				}
				/*For Channel B*/
				switch(Copy_pstTimerConfig -> OCBMode)
    2378:	ea 81       	ldd	r30, Y+2	; 0x02
    237a:	fb 81       	ldd	r31, Y+3	; 0x03
    237c:	83 81       	ldd	r24, Z+3	; 0x03
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	3d 83       	std	Y+5, r19	; 0x05
    2384:	2c 83       	std	Y+4, r18	; 0x04
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	84 30       	cpi	r24, 0x04	; 4
    238c:	91 05       	cpc	r25, r1
    238e:	19 f1       	breq	.+70     	; 0x23d6 <TIMER1_u8Init+0x296>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	25 30       	cpi	r18, 0x05	; 5
    2396:	31 05       	cpc	r19, r1
    2398:	2c f4       	brge	.+10     	; 0x23a4 <TIMER1_u8Init+0x264>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	61 f0       	breq	.+24     	; 0x23ba <TIMER1_u8Init+0x27a>
    23a2:	37 c0       	rjmp	.+110    	; 0x2412 <TIMER1_u8Init+0x2d2>
    23a4:	2c 81       	ldd	r18, Y+4	; 0x04
    23a6:	3d 81       	ldd	r19, Y+5	; 0x05
    23a8:	25 30       	cpi	r18, 0x05	; 5
    23aa:	31 05       	cpc	r19, r1
    23ac:	19 f1       	breq	.+70     	; 0x23f4 <TIMER1_u8Init+0x2b4>
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	9d 81       	ldd	r25, Y+5	; 0x05
    23b2:	86 30       	cpi	r24, 0x06	; 6
    23b4:	91 05       	cpc	r25, r1
    23b6:	91 f1       	breq	.+100    	; 0x241c <TIMER1_u8Init+0x2dc>
    23b8:	2c c0       	rjmp	.+88     	; 0x2412 <TIMER1_u8Init+0x2d2>
				{
				case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    23ba:	af e4       	ldi	r26, 0x4F	; 79
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	ef e4       	ldi	r30, 0x4F	; 79
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 7c       	andi	r24, 0xCF	; 207
    23c6:	8c 93       	st	X, r24
    23c8:	af e4       	ldi	r26, 0x4F	; 79
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ef e4       	ldi	r30, 0x4F	; 79
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8c 93       	st	X, r24
    23d4:	23 c0       	rjmp	.+70     	; 0x241c <TIMER1_u8Init+0x2dc>
				case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    23d6:	af e4       	ldi	r26, 0x4F	; 79
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	ef e4       	ldi	r30, 0x4F	; 79
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8f 7c       	andi	r24, 0xCF	; 207
    23e2:	8c 93       	st	X, r24
    23e4:	af e4       	ldi	r26, 0x4F	; 79
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ef e4       	ldi	r30, 0x4F	; 79
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 62       	ori	r24, 0x20	; 32
    23f0:	8c 93       	st	X, r24
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <TIMER1_u8Init+0x2dc>
				case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    23f4:	af e4       	ldi	r26, 0x4F	; 79
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ef e4       	ldi	r30, 0x4F	; 79
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 7c       	andi	r24, 0xCF	; 207
    2400:	8c 93       	st	X, r24
    2402:	af e4       	ldi	r26, 0x4F	; 79
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ef e4       	ldi	r30, 0x4F	; 79
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	80 63       	ori	r24, 0x30	; 48
    240e:	8c 93       	st	X, r24
    2410:	05 c0       	rjmp	.+10     	; 0x241c <TIMER1_u8Init+0x2dc>
				case DO_NOT_CHANGE:		/*Do nothing*/											break;
				default: Local_u8ErrorState = NOK;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	02 c0       	rjmp	.+4      	; 0x241c <TIMER1_u8Init+0x2dc>
				}
				break;

			default:Local_u8ErrorState = NOK;	break;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	89 83       	std	Y+1, r24	; 0x01
			}

			/*Select the clock*/
			TCCR1B &= PRESCALER_MASK;
    241c:	ae e4       	ldi	r26, 0x4E	; 78
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	ee e4       	ldi	r30, 0x4E	; 78
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	88 7f       	andi	r24, 0xF8	; 248
    2428:	8c 93       	st	X, r24
			TCCR1B |= Copy_pstTimerConfig -> ClkSelect;
    242a:	ae e4       	ldi	r26, 0x4E	; 78
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	ee e4       	ldi	r30, 0x4E	; 78
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	90 81       	ld	r25, Z
    2434:	ea 81       	ldd	r30, Y+2	; 0x02
    2436:	fb 81       	ldd	r31, Y+3	; 0x03
    2438:	80 81       	ld	r24, Z
    243a:	89 2b       	or	r24, r25
    243c:	8c 93       	st	X, r24
    243e:	05 c0       	rjmp	.+10     	; 0x244a <TIMER1_u8Init+0x30a>
//			OCR1A = 1000;
//			OCR1B = 2000;
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2440:	84 e0       	ldi	r24, 0x04	; 4
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	02 c0       	rjmp	.+4      	; 0x244a <TIMER1_u8Init+0x30a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    244a:	89 81       	ldd	r24, Y+1	; 0x01
}
    244c:	29 96       	adiw	r28, 0x09	; 9
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <TIMER2_u8Init>:
uint8 TIMER2_u8Init(const TIMER0_2_CFG_t *Copy_pstTimerConfig)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	27 97       	sbiw	r28, 0x07	; 7
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	9b 83       	std	Y+3, r25	; 0x03
    2474:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2476:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to structure*/
	if(Copy_pstTimerConfig != NULL)
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	9b 81       	ldd	r25, Y+3	; 0x03
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	09 f4       	brne	.+2      	; 0x2482 <TIMER2_u8Init+0x24>
    2480:	de c0       	rjmp	.+444    	; 0x263e <TIMER2_u8Init+0x1e0>
	{
		if(TIMERS_u8StateArr[TIMER2] == IDLE)
    2482:	80 91 82 01 	lds	r24, 0x0182
    2486:	88 23       	and	r24, r24
    2488:	09 f0       	breq	.+2      	; 0x248c <TIMER2_u8Init+0x2e>
    248a:	d6 c0       	rjmp	.+428    	; 0x2638 <TIMER2_u8Init+0x1da>
		{
			/*Inform others that timer 2 is busy from now*/
			TIMERS_u8StateArr[TIMER2] = BUSY;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	80 93 82 01 	sts	0x0182, r24

			/*Select Wave Generation Mode*/
			switch(Copy_pstTimerConfig -> WGM)
    2492:	ea 81       	ldd	r30, Y+2	; 0x02
    2494:	fb 81       	ldd	r31, Y+3	; 0x03
    2496:	81 81       	ldd	r24, Z+1	; 0x01
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	3f 83       	std	Y+7, r19	; 0x07
    249e:	2e 83       	std	Y+6, r18	; 0x06
    24a0:	8e 81       	ldd	r24, Y+6	; 0x06
    24a2:	9f 81       	ldd	r25, Y+7	; 0x07
    24a4:	81 30       	cpi	r24, 0x01	; 1
    24a6:	91 05       	cpc	r25, r1
    24a8:	21 f1       	breq	.+72     	; 0x24f2 <TIMER2_u8Init+0x94>
    24aa:	2e 81       	ldd	r18, Y+6	; 0x06
    24ac:	3f 81       	ldd	r19, Y+7	; 0x07
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	2c f4       	brge	.+10     	; 0x24be <TIMER2_u8Init+0x60>
    24b4:	8e 81       	ldd	r24, Y+6	; 0x06
    24b6:	9f 81       	ldd	r25, Y+7	; 0x07
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	61 f0       	breq	.+24     	; 0x24d4 <TIMER2_u8Init+0x76>
    24bc:	46 c0       	rjmp	.+140    	; 0x254a <TIMER2_u8Init+0xec>
    24be:	2e 81       	ldd	r18, Y+6	; 0x06
    24c0:	3f 81       	ldd	r19, Y+7	; 0x07
    24c2:	22 30       	cpi	r18, 0x02	; 2
    24c4:	31 05       	cpc	r19, r1
    24c6:	21 f1       	breq	.+72     	; 0x2510 <TIMER2_u8Init+0xb2>
    24c8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ca:	9f 81       	ldd	r25, Y+7	; 0x07
    24cc:	83 30       	cpi	r24, 0x03	; 3
    24ce:	91 05       	cpc	r25, r1
    24d0:	71 f1       	breq	.+92     	; 0x252e <TIMER2_u8Init+0xd0>
    24d2:	3b c0       	rjmp	.+118    	; 0x254a <TIMER2_u8Init+0xec>
			{
			case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    24d4:	a5 e4       	ldi	r26, 0x45	; 69
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e5 e4       	ldi	r30, 0x45	; 69
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8f 7b       	andi	r24, 0xBF	; 191
    24e0:	8c 93       	st	X, r24
    24e2:	a5 e4       	ldi	r26, 0x45	; 69
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e5 e4       	ldi	r30, 0x45	; 69
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	87 7f       	andi	r24, 0xF7	; 247
    24ee:	8c 93       	st	X, r24
    24f0:	2c c0       	rjmp	.+88     	; 0x254a <TIMER2_u8Init+0xec>
			case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    24f2:	a5 e4       	ldi	r26, 0x45	; 69
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e5 e4       	ldi	r30, 0x45	; 69
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	80 64       	ori	r24, 0x40	; 64
    24fe:	8c 93       	st	X, r24
    2500:	a5 e4       	ldi	r26, 0x45	; 69
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e5 e4       	ldi	r30, 0x45	; 69
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	87 7f       	andi	r24, 0xF7	; 247
    250c:	8c 93       	st	X, r24
    250e:	1d c0       	rjmp	.+58     	; 0x254a <TIMER2_u8Init+0xec>
			case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2510:	a5 e4       	ldi	r26, 0x45	; 69
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e5 e4       	ldi	r30, 0x45	; 69
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8f 7b       	andi	r24, 0xBF	; 191
    251c:	8c 93       	st	X, r24
    251e:	a5 e4       	ldi	r26, 0x45	; 69
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e5 e4       	ldi	r30, 0x45	; 69
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	88 60       	ori	r24, 0x08	; 8
    252a:	8c 93       	st	X, r24
    252c:	0e c0       	rjmp	.+28     	; 0x254a <TIMER2_u8Init+0xec>
			case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    252e:	a5 e4       	ldi	r26, 0x45	; 69
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e5 e4       	ldi	r30, 0x45	; 69
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 64       	ori	r24, 0x40	; 64
    253a:	8c 93       	st	X, r24
    253c:	a5 e4       	ldi	r26, 0x45	; 69
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e5 e4       	ldi	r30, 0x45	; 69
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	88 60       	ori	r24, 0x08	; 8
    2548:	8c 93       	st	X, r24
			}

			/*Select Output Compare Match Mode*/
			TCCR2 &= TIMER0_2_OCMATCH_MASK;
    254a:	a5 e4       	ldi	r26, 0x45	; 69
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e5 e4       	ldi	r30, 0x45	; 69
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 7c       	andi	r24, 0xCF	; 207
    2556:	8c 93       	st	X, r24
			if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2558:	ea 81       	ldd	r30, Y+2	; 0x02
    255a:	fb 81       	ldd	r31, Y+3	; 0x03
    255c:	81 81       	ldd	r24, Z+1	; 0x01
    255e:	88 23       	and	r24, r24
    2560:	29 f0       	breq	.+10     	; 0x256c <TIMER2_u8Init+0x10e>
    2562:	ea 81       	ldd	r30, Y+2	; 0x02
    2564:	fb 81       	ldd	r31, Y+3	; 0x03
    2566:	81 81       	ldd	r24, Z+1	; 0x01
    2568:	82 30       	cpi	r24, 0x02	; 2
    256a:	e1 f4       	brne	.+56     	; 0x25a4 <TIMER2_u8Init+0x146>
			{
				if((Copy_pstTimerConfig -> OCMode) < NON_INVERTED_PWM)
    256c:	ea 81       	ldd	r30, Y+2	; 0x02
    256e:	fb 81       	ldd	r31, Y+3	; 0x03
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	a0 f4       	brcc	.+40     	; 0x259e <TIMER2_u8Init+0x140>
				{
					TCCR2 |= ((Copy_pstTimerConfig -> OCMode) << 4);
    2576:	a5 e4       	ldi	r26, 0x45	; 69
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e4       	ldi	r30, 0x45	; 69
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	28 2f       	mov	r18, r24
    2582:	ea 81       	ldd	r30, Y+2	; 0x02
    2584:	fb 81       	ldd	r31, Y+3	; 0x03
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	82 95       	swap	r24
    258e:	92 95       	swap	r25
    2590:	90 7f       	andi	r25, 0xF0	; 240
    2592:	98 27       	eor	r25, r24
    2594:	80 7f       	andi	r24, 0xF0	; 240
    2596:	98 27       	eor	r25, r24
    2598:	82 2b       	or	r24, r18
    259a:	8c 93       	st	X, r24
    259c:	3b c0       	rjmp	.+118    	; 0x2614 <TIMER2_u8Init+0x1b6>
				}
				else
				{
					Local_u8ErrorState = NOK;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	38 c0       	rjmp	.+112    	; 0x2614 <TIMER2_u8Init+0x1b6>
				}
			}
			else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    25a4:	ea 81       	ldd	r30, Y+2	; 0x02
    25a6:	fb 81       	ldd	r31, Y+3	; 0x03
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	83 30       	cpi	r24, 0x03	; 3
    25ac:	29 f0       	breq	.+10     	; 0x25b8 <TIMER2_u8Init+0x15a>
    25ae:	ea 81       	ldd	r30, Y+2	; 0x02
    25b0:	fb 81       	ldd	r31, Y+3	; 0x03
    25b2:	81 81       	ldd	r24, Z+1	; 0x01
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	71 f5       	brne	.+92     	; 0x2614 <TIMER2_u8Init+0x1b6>
			{
				switch(Copy_pstTimerConfig -> OCMode)
    25b8:	ea 81       	ldd	r30, Y+2	; 0x02
    25ba:	fb 81       	ldd	r31, Y+3	; 0x03
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	3d 83       	std	Y+5, r19	; 0x05
    25c4:	2c 83       	std	Y+4, r18	; 0x04
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	84 30       	cpi	r24, 0x04	; 4
    25cc:	91 05       	cpc	r25, r1
    25ce:	81 f0       	breq	.+32     	; 0x25f0 <TIMER2_u8Init+0x192>
    25d0:	2c 81       	ldd	r18, Y+4	; 0x04
    25d2:	3d 81       	ldd	r19, Y+5	; 0x05
    25d4:	25 30       	cpi	r18, 0x05	; 5
    25d6:	31 05       	cpc	r19, r1
    25d8:	99 f0       	breq	.+38     	; 0x2600 <TIMER2_u8Init+0x1a2>
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	b9 f4       	brne	.+46     	; 0x2610 <TIMER2_u8Init+0x1b2>
				{
				case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    25e2:	e5 e4       	ldi	r30, 0x45	; 69
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	a5 e4       	ldi	r26, 0x45	; 69
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	8c 91       	ld	r24, X
    25ec:	80 83       	st	Z, r24
    25ee:	12 c0       	rjmp	.+36     	; 0x2614 <TIMER2_u8Init+0x1b6>
				case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    25f0:	a5 e4       	ldi	r26, 0x45	; 69
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e5 e4       	ldi	r30, 0x45	; 69
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	80 62       	ori	r24, 0x20	; 32
    25fc:	8c 93       	st	X, r24
    25fe:	0a c0       	rjmp	.+20     	; 0x2614 <TIMER2_u8Init+0x1b6>
				case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    2600:	a5 e4       	ldi	r26, 0x45	; 69
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e5 e4       	ldi	r30, 0x45	; 69
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	80 63       	ori	r24, 0x30	; 48
    260c:	8c 93       	st	X, r24
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <TIMER2_u8Init+0x1b6>
				default: Local_u8ErrorState = NOK;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/*Select the clock*/
			TCCR2 &= PRESCALER_MASK;
    2614:	a5 e4       	ldi	r26, 0x45	; 69
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e5 e4       	ldi	r30, 0x45	; 69
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	88 7f       	andi	r24, 0xF8	; 248
    2620:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2622:	a5 e4       	ldi	r26, 0x45	; 69
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e5 e4       	ldi	r30, 0x45	; 69
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	90 81       	ld	r25, Z
    262c:	ea 81       	ldd	r30, Y+2	; 0x02
    262e:	fb 81       	ldd	r31, Y+3	; 0x03
    2630:	80 81       	ld	r24, Z
    2632:	89 2b       	or	r24, r25
    2634:	8c 93       	st	X, r24
    2636:	05 c0       	rjmp	.+10     	; 0x2642 <TIMER2_u8Init+0x1e4>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    2638:	84 e0       	ldi	r24, 0x04	; 4
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <TIMER2_u8Init+0x1e4>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2642:	89 81       	ldd	r24, Y+1	; 0x01
}
    2644:	27 96       	adiw	r28, 0x07	; 7
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <TIMER0_u8SetCompOutMode>:



uint8 TIMER0_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	00 d0       	rcall	.+0      	; 0x265c <TIMER0_u8SetCompOutMode+0x6>
    265c:	00 d0       	rcall	.+0      	; 0x265e <TIMER0_u8SetCompOutMode+0x8>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <TIMER0_u8SetCompOutMode+0xa>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9b 83       	std	Y+3, r25	; 0x03
    2666:	8a 83       	std	Y+2, r24	; 0x02
    2668:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    266a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	09 f4       	brne	.+2      	; 0x2676 <TIMER0_u8SetCompOutMode+0x20>
    2674:	60 c0       	rjmp	.+192    	; 0x2736 <TIMER0_u8SetCompOutMode+0xe0>
	{
		TCCR0 &= TIMER0_2_OCMATCH_MASK;
    2676:	a3 e5       	ldi	r26, 0x53	; 83
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e3 e5       	ldi	r30, 0x53	; 83
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	8f 7c       	andi	r24, 0xCF	; 207
    2682:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2684:	ea 81       	ldd	r30, Y+2	; 0x02
    2686:	fb 81       	ldd	r31, Y+3	; 0x03
    2688:	81 81       	ldd	r24, Z+1	; 0x01
    268a:	88 23       	and	r24, r24
    268c:	29 f0       	breq	.+10     	; 0x2698 <TIMER0_u8SetCompOutMode+0x42>
    268e:	ea 81       	ldd	r30, Y+2	; 0x02
    2690:	fb 81       	ldd	r31, Y+3	; 0x03
    2692:	81 81       	ldd	r24, Z+1	; 0x01
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	c1 f4       	brne	.+48     	; 0x26c8 <TIMER0_u8SetCompOutMode+0x72>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	84 30       	cpi	r24, 0x04	; 4
    269c:	90 f4       	brcc	.+36     	; 0x26c2 <TIMER0_u8SetCompOutMode+0x6c>
			{
				TCCR0 |= (Copy_u8Mode << 4);
    269e:	a3 e5       	ldi	r26, 0x53	; 83
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e3 e5       	ldi	r30, 0x53	; 83
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	28 2f       	mov	r18, r24
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	82 95       	swap	r24
    26b2:	92 95       	swap	r25
    26b4:	90 7f       	andi	r25, 0xF0	; 240
    26b6:	98 27       	eor	r25, r24
    26b8:	80 7f       	andi	r24, 0xF0	; 240
    26ba:	98 27       	eor	r25, r24
    26bc:	82 2b       	or	r24, r18
    26be:	8c 93       	st	X, r24
    26c0:	3c c0       	rjmp	.+120    	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
			}
			else
			{
				Local_u8ErrorState = NOK;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	39 c0       	rjmp	.+114    	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    26c8:	ea 81       	ldd	r30, Y+2	; 0x02
    26ca:	fb 81       	ldd	r31, Y+3	; 0x03
    26cc:	81 81       	ldd	r24, Z+1	; 0x01
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	29 f0       	breq	.+10     	; 0x26dc <TIMER0_u8SetCompOutMode+0x86>
    26d2:	ea 81       	ldd	r30, Y+2	; 0x02
    26d4:	fb 81       	ldd	r31, Y+3	; 0x03
    26d6:	81 81       	ldd	r24, Z+1	; 0x01
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	79 f5       	brne	.+94     	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
		{
			switch(Copy_u8Mode)
    26dc:	8c 81       	ldd	r24, Y+4	; 0x04
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	3e 83       	std	Y+6, r19	; 0x06
    26e4:	2d 83       	std	Y+5, r18	; 0x05
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	84 30       	cpi	r24, 0x04	; 4
    26ec:	91 05       	cpc	r25, r1
    26ee:	81 f0       	breq	.+32     	; 0x2710 <TIMER0_u8SetCompOutMode+0xba>
    26f0:	2d 81       	ldd	r18, Y+5	; 0x05
    26f2:	3e 81       	ldd	r19, Y+6	; 0x06
    26f4:	25 30       	cpi	r18, 0x05	; 5
    26f6:	31 05       	cpc	r19, r1
    26f8:	99 f0       	breq	.+38     	; 0x2720 <TIMER0_u8SetCompOutMode+0xca>
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	b9 f4       	brne	.+46     	; 0x2730 <TIMER0_u8SetCompOutMode+0xda>
			{
			case OC_DISCONNECTED:	TCCR0 |= (0 << 4);	break;
    2702:	e3 e5       	ldi	r30, 0x53	; 83
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	a3 e5       	ldi	r26, 0x53	; 83
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	8c 91       	ld	r24, X
    270c:	80 83       	st	Z, r24
    270e:	15 c0       	rjmp	.+42     	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
			case NON_INVERTED_PWM:	TCCR0 |= (2 << 4);	break;
    2710:	a3 e5       	ldi	r26, 0x53	; 83
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e3 e5       	ldi	r30, 0x53	; 83
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 62       	ori	r24, 0x20	; 32
    271c:	8c 93       	st	X, r24
    271e:	0d c0       	rjmp	.+26     	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
			case INVERTED_PWM:		TCCR0 |= (3 << 4);	break;
    2720:	a3 e5       	ldi	r26, 0x53	; 83
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e3 e5       	ldi	r30, 0x53	; 83
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	80 63       	ori	r24, 0x30	; 48
    272c:	8c 93       	st	X, r24
    272e:	05 c0       	rjmp	.+10     	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
			default: Local_u8ErrorState = NOK;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	89 83       	std	Y+1, r24	; 0x01
    2734:	02 c0       	rjmp	.+4      	; 0x273a <TIMER0_u8SetCompOutMode+0xe4>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    273a:	89 81       	ldd	r24, Y+1	; 0x01
}
    273c:	26 96       	adiw	r28, 0x06	; 6
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <TIMER1_u8SetCompOutModeChA>:
uint8 TIMER1_u8SetCompOutModeChA(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	28 97       	sbiw	r28, 0x08	; 8
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	9b 83       	std	Y+3, r25	; 0x03
    2764:	8a 83       	std	Y+2, r24	; 0x02
    2766:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2768:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	09 f4       	brne	.+2      	; 0x2774 <TIMER1_u8SetCompOutModeChA+0x26>
    2772:	a5 c0       	rjmp	.+330    	; 0x28be <TIMER1_u8SetCompOutModeChA+0x170>
	{
		/*Select Output Compare Match Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    2774:	ea 81       	ldd	r30, Y+2	; 0x02
    2776:	fb 81       	ldd	r31, Y+3	; 0x03
    2778:	81 81       	ldd	r24, Z+1	; 0x01
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	38 87       	std	Y+8, r19	; 0x08
    2780:	2f 83       	std	Y+7, r18	; 0x07
    2782:	8f 81       	ldd	r24, Y+7	; 0x07
    2784:	98 85       	ldd	r25, Y+8	; 0x08
    2786:	8c 30       	cpi	r24, 0x0C	; 12
    2788:	91 05       	cpc	r25, r1
    278a:	ac f4       	brge	.+42     	; 0x27b6 <TIMER1_u8SetCompOutModeChA+0x68>
    278c:	2f 81       	ldd	r18, Y+7	; 0x07
    278e:	38 85       	ldd	r19, Y+8	; 0x08
    2790:	25 30       	cpi	r18, 0x05	; 5
    2792:	31 05       	cpc	r19, r1
    2794:	0c f0       	brlt	.+2      	; 0x2798 <TIMER1_u8SetCompOutModeChA+0x4a>
    2796:	42 c0       	rjmp	.+132    	; 0x281c <TIMER1_u8SetCompOutModeChA+0xce>
    2798:	8f 81       	ldd	r24, Y+7	; 0x07
    279a:	98 85       	ldd	r25, Y+8	; 0x08
    279c:	84 30       	cpi	r24, 0x04	; 4
    279e:	91 05       	cpc	r25, r1
    27a0:	bc f4       	brge	.+46     	; 0x27d0 <TIMER1_u8SetCompOutModeChA+0x82>
    27a2:	2f 81       	ldd	r18, Y+7	; 0x07
    27a4:	38 85       	ldd	r19, Y+8	; 0x08
    27a6:	21 30       	cpi	r18, 0x01	; 1
    27a8:	31 05       	cpc	r19, r1
    27aa:	c4 f5       	brge	.+112    	; 0x281c <TIMER1_u8SetCompOutModeChA+0xce>
    27ac:	8f 81       	ldd	r24, Y+7	; 0x07
    27ae:	98 85       	ldd	r25, Y+8	; 0x08
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	71 f0       	breq	.+28     	; 0x27d0 <TIMER1_u8SetCompOutModeChA+0x82>
    27b4:	81 c0       	rjmp	.+258    	; 0x28b8 <TIMER1_u8SetCompOutModeChA+0x16a>
    27b6:	2f 81       	ldd	r18, Y+7	; 0x07
    27b8:	38 85       	ldd	r19, Y+8	; 0x08
    27ba:	2c 30       	cpi	r18, 0x0C	; 12
    27bc:	31 05       	cpc	r19, r1
    27be:	41 f0       	breq	.+16     	; 0x27d0 <TIMER1_u8SetCompOutModeChA+0x82>
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	98 85       	ldd	r25, Y+8	; 0x08
    27c4:	0e 97       	sbiw	r24, 0x0e	; 14
    27c6:	82 30       	cpi	r24, 0x02	; 2
    27c8:	91 05       	cpc	r25, r1
    27ca:	08 f0       	brcs	.+2      	; 0x27ce <TIMER1_u8SetCompOutModeChA+0x80>
    27cc:	75 c0       	rjmp	.+234    	; 0x28b8 <TIMER1_u8SetCompOutModeChA+0x16a>
    27ce:	26 c0       	rjmp	.+76     	; 0x281c <TIMER1_u8SetCompOutModeChA+0xce>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel A*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	84 30       	cpi	r24, 0x04	; 4
    27d4:	e0 f4       	brcc	.+56     	; 0x280e <TIMER1_u8SetCompOutModeChA+0xc0>
			{
				TCCR1A &= TIMER1_OCMATCH_A_MASK;
    27d6:	af e4       	ldi	r26, 0x4F	; 79
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	ef e4       	ldi	r30, 0x4F	; 79
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	8f 73       	andi	r24, 0x3F	; 63
    27e2:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 6);
    27e4:	af e4       	ldi	r26, 0x4F	; 79
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	ef e4       	ldi	r30, 0x4F	; 79
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	28 2f       	mov	r18, r24
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	00 24       	eor	r0, r0
    27f8:	96 95       	lsr	r25
    27fa:	87 95       	ror	r24
    27fc:	07 94       	ror	r0
    27fe:	96 95       	lsr	r25
    2800:	87 95       	ror	r24
    2802:	07 94       	ror	r0
    2804:	98 2f       	mov	r25, r24
    2806:	80 2d       	mov	r24, r0
    2808:	82 2b       	or	r24, r18
    280a:	8c 93       	st	X, r24
    280c:	5a c0       	rjmp	.+180    	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    280e:	8c 81       	ldd	r24, Y+4	; 0x04
    2810:	86 30       	cpi	r24, 0x06	; 6
    2812:	09 f4       	brne	.+2      	; 0x2816 <TIMER1_u8SetCompOutModeChA+0xc8>
    2814:	56 c0       	rjmp	.+172    	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	53 c0       	rjmp	.+166    	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel A*/
			switch(Copy_u8Mode)
    281c:	8c 81       	ldd	r24, Y+4	; 0x04
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	3e 83       	std	Y+6, r19	; 0x06
    2824:	2d 83       	std	Y+5, r18	; 0x05
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	84 30       	cpi	r24, 0x04	; 4
    282c:	91 05       	cpc	r25, r1
    282e:	19 f1       	breq	.+70     	; 0x2876 <TIMER1_u8SetCompOutModeChA+0x128>
    2830:	2d 81       	ldd	r18, Y+5	; 0x05
    2832:	3e 81       	ldd	r19, Y+6	; 0x06
    2834:	25 30       	cpi	r18, 0x05	; 5
    2836:	31 05       	cpc	r19, r1
    2838:	2c f4       	brge	.+10     	; 0x2844 <TIMER1_u8SetCompOutModeChA+0xf6>
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	61 f0       	breq	.+24     	; 0x285a <TIMER1_u8SetCompOutModeChA+0x10c>
    2842:	37 c0       	rjmp	.+110    	; 0x28b2 <TIMER1_u8SetCompOutModeChA+0x164>
    2844:	2d 81       	ldd	r18, Y+5	; 0x05
    2846:	3e 81       	ldd	r19, Y+6	; 0x06
    2848:	25 30       	cpi	r18, 0x05	; 5
    284a:	31 05       	cpc	r19, r1
    284c:	19 f1       	breq	.+70     	; 0x2894 <TIMER1_u8SetCompOutModeChA+0x146>
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	86 30       	cpi	r24, 0x06	; 6
    2854:	91 05       	cpc	r25, r1
    2856:	a9 f1       	breq	.+106    	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
    2858:	2c c0       	rjmp	.+88     	; 0x28b2 <TIMER1_u8SetCompOutModeChA+0x164>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (0 << 6);	break;
    285a:	af e4       	ldi	r26, 0x4F	; 79
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	ef e4       	ldi	r30, 0x4F	; 79
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	8f 73       	andi	r24, 0x3F	; 63
    2866:	8c 93       	st	X, r24
    2868:	af e4       	ldi	r26, 0x4F	; 79
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ef e4       	ldi	r30, 0x4F	; 79
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	8c 93       	st	X, r24
    2874:	26 c0       	rjmp	.+76     	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (2 << 6);	break;
    2876:	af e4       	ldi	r26, 0x4F	; 79
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	ef e4       	ldi	r30, 0x4F	; 79
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	8f 73       	andi	r24, 0x3F	; 63
    2882:	8c 93       	st	X, r24
    2884:	af e4       	ldi	r26, 0x4F	; 79
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	ef e4       	ldi	r30, 0x4F	; 79
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	80 68       	ori	r24, 0x80	; 128
    2890:	8c 93       	st	X, r24
    2892:	17 c0       	rjmp	.+46     	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_A_MASK;	TCCR1A |= (3 << 6);	break;
    2894:	af e4       	ldi	r26, 0x4F	; 79
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	ef e4       	ldi	r30, 0x4F	; 79
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 73       	andi	r24, 0x3F	; 63
    28a0:	8c 93       	st	X, r24
    28a2:	af e4       	ldi	r26, 0x4F	; 79
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	ef e4       	ldi	r30, 0x4F	; 79
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	80 6c       	ori	r24, 0xC0	; 192
    28ae:	8c 93       	st	X, r24
    28b0:	08 c0       	rjmp	.+16     	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	05 c0       	rjmp	.+10     	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <TIMER1_u8SetCompOutModeChA+0x174>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c4:	28 96       	adiw	r28, 0x08	; 8
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <TIMER1_u8SetCompOutModeChB>:
uint8 TIMER1_u8SetCompOutModeChB(const TIMER1_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	28 97       	sbiw	r28, 0x08	; 8
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	9b 83       	std	Y+3, r25	; 0x03
    28ec:	8a 83       	std	Y+2, r24	; 0x02
    28ee:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    28f0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	9b 81       	ldd	r25, Y+3	; 0x03
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	09 f4       	brne	.+2      	; 0x28fc <TIMER1_u8SetCompOutModeChB+0x26>
    28fa:	a2 c0       	rjmp	.+324    	; 0x2a40 <TIMER1_u8SetCompOutModeChB+0x16a>
	{
		switch(Copy_pstTimerConfig -> WGM)
    28fc:	ea 81       	ldd	r30, Y+2	; 0x02
    28fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2900:	81 81       	ldd	r24, Z+1	; 0x01
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	38 87       	std	Y+8, r19	; 0x08
    2908:	2f 83       	std	Y+7, r18	; 0x07
    290a:	8f 81       	ldd	r24, Y+7	; 0x07
    290c:	98 85       	ldd	r25, Y+8	; 0x08
    290e:	8c 30       	cpi	r24, 0x0C	; 12
    2910:	91 05       	cpc	r25, r1
    2912:	ac f4       	brge	.+42     	; 0x293e <TIMER1_u8SetCompOutModeChB+0x68>
    2914:	2f 81       	ldd	r18, Y+7	; 0x07
    2916:	38 85       	ldd	r19, Y+8	; 0x08
    2918:	25 30       	cpi	r18, 0x05	; 5
    291a:	31 05       	cpc	r19, r1
    291c:	0c f0       	brlt	.+2      	; 0x2920 <TIMER1_u8SetCompOutModeChB+0x4a>
    291e:	3f c0       	rjmp	.+126    	; 0x299e <TIMER1_u8SetCompOutModeChB+0xc8>
    2920:	8f 81       	ldd	r24, Y+7	; 0x07
    2922:	98 85       	ldd	r25, Y+8	; 0x08
    2924:	84 30       	cpi	r24, 0x04	; 4
    2926:	91 05       	cpc	r25, r1
    2928:	bc f4       	brge	.+46     	; 0x2958 <TIMER1_u8SetCompOutModeChB+0x82>
    292a:	2f 81       	ldd	r18, Y+7	; 0x07
    292c:	38 85       	ldd	r19, Y+8	; 0x08
    292e:	21 30       	cpi	r18, 0x01	; 1
    2930:	31 05       	cpc	r19, r1
    2932:	ac f5       	brge	.+106    	; 0x299e <TIMER1_u8SetCompOutModeChB+0xc8>
    2934:	8f 81       	ldd	r24, Y+7	; 0x07
    2936:	98 85       	ldd	r25, Y+8	; 0x08
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	71 f0       	breq	.+28     	; 0x2958 <TIMER1_u8SetCompOutModeChB+0x82>
    293c:	7e c0       	rjmp	.+252    	; 0x2a3a <TIMER1_u8SetCompOutModeChB+0x164>
    293e:	2f 81       	ldd	r18, Y+7	; 0x07
    2940:	38 85       	ldd	r19, Y+8	; 0x08
    2942:	2c 30       	cpi	r18, 0x0C	; 12
    2944:	31 05       	cpc	r19, r1
    2946:	41 f0       	breq	.+16     	; 0x2958 <TIMER1_u8SetCompOutModeChB+0x82>
    2948:	8f 81       	ldd	r24, Y+7	; 0x07
    294a:	98 85       	ldd	r25, Y+8	; 0x08
    294c:	0e 97       	sbiw	r24, 0x0e	; 14
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	91 05       	cpc	r25, r1
    2952:	08 f0       	brcs	.+2      	; 0x2956 <TIMER1_u8SetCompOutModeChB+0x80>
    2954:	72 c0       	rjmp	.+228    	; 0x2a3a <TIMER1_u8SetCompOutModeChB+0x164>
    2956:	23 c0       	rjmp	.+70     	; 0x299e <TIMER1_u8SetCompOutModeChB+0xc8>
		{
		case NORMAL_16_BITS:
		case CTC_OCR1A:
		case CTC_ICR1:
			/*For Channel B*/
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	84 30       	cpi	r24, 0x04	; 4
    295c:	c8 f4       	brcc	.+50     	; 0x2990 <TIMER1_u8SetCompOutModeChB+0xba>
			{
				TCCR1A &= TIMER1_OCMATCH_B_MASK;
    295e:	af e4       	ldi	r26, 0x4F	; 79
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	ef e4       	ldi	r30, 0x4F	; 79
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8f 7c       	andi	r24, 0xCF	; 207
    296a:	8c 93       	st	X, r24
				TCCR1A |= (Copy_u8Mode << 4);
    296c:	af e4       	ldi	r26, 0x4F	; 79
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ef e4       	ldi	r30, 0x4F	; 79
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	28 2f       	mov	r18, r24
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	82 95       	swap	r24
    2980:	92 95       	swap	r25
    2982:	90 7f       	andi	r25, 0xF0	; 240
    2984:	98 27       	eor	r25, r24
    2986:	80 7f       	andi	r24, 0xF0	; 240
    2988:	98 27       	eor	r25, r24
    298a:	82 2b       	or	r24, r18
    298c:	8c 93       	st	X, r24
    298e:	5a c0       	rjmp	.+180    	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			else if(Copy_u8Mode == DO_NOT_CHANGE)
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	86 30       	cpi	r24, 0x06	; 6
    2994:	09 f4       	brne	.+2      	; 0x2998 <TIMER1_u8SetCompOutModeChB+0xc2>
    2996:	56 c0       	rjmp	.+172    	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
			{
				/*Do nothing*/
			}
			else
			{
				Local_u8ErrorState = NOK;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	53 c0       	rjmp	.+166    	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
		case PHASE_FREQ_CORR_ICR1:
		case PHASE_FREQ_CORR_OCR1A:
		case PHASE_CORR_ICR1:
		case PHASE_CORR_OCR1A:
			/*For Channel B*/
			switch(Copy_u8Mode)
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	3e 83       	std	Y+6, r19	; 0x06
    29a6:	2d 83       	std	Y+5, r18	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	84 30       	cpi	r24, 0x04	; 4
    29ae:	91 05       	cpc	r25, r1
    29b0:	19 f1       	breq	.+70     	; 0x29f8 <TIMER1_u8SetCompOutModeChB+0x122>
    29b2:	2d 81       	ldd	r18, Y+5	; 0x05
    29b4:	3e 81       	ldd	r19, Y+6	; 0x06
    29b6:	25 30       	cpi	r18, 0x05	; 5
    29b8:	31 05       	cpc	r19, r1
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <TIMER1_u8SetCompOutModeChB+0xf0>
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	61 f0       	breq	.+24     	; 0x29dc <TIMER1_u8SetCompOutModeChB+0x106>
    29c4:	37 c0       	rjmp	.+110    	; 0x2a34 <TIMER1_u8SetCompOutModeChB+0x15e>
    29c6:	2d 81       	ldd	r18, Y+5	; 0x05
    29c8:	3e 81       	ldd	r19, Y+6	; 0x06
    29ca:	25 30       	cpi	r18, 0x05	; 5
    29cc:	31 05       	cpc	r19, r1
    29ce:	19 f1       	breq	.+70     	; 0x2a16 <TIMER1_u8SetCompOutModeChB+0x140>
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	86 30       	cpi	r24, 0x06	; 6
    29d6:	91 05       	cpc	r25, r1
    29d8:	a9 f1       	breq	.+106    	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
    29da:	2c c0       	rjmp	.+88     	; 0x2a34 <TIMER1_u8SetCompOutModeChB+0x15e>
			{
			case OC_DISCONNECTED:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (0 << 4);	break;
    29dc:	af e4       	ldi	r26, 0x4F	; 79
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	ef e4       	ldi	r30, 0x4F	; 79
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	8f 7c       	andi	r24, 0xCF	; 207
    29e8:	8c 93       	st	X, r24
    29ea:	af e4       	ldi	r26, 0x4F	; 79
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	ef e4       	ldi	r30, 0x4F	; 79
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8c 93       	st	X, r24
    29f6:	26 c0       	rjmp	.+76     	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
			case NON_INVERTED_PWM:	TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (2 << 4);	break;
    29f8:	af e4       	ldi	r26, 0x4F	; 79
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	ef e4       	ldi	r30, 0x4F	; 79
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	8f 7c       	andi	r24, 0xCF	; 207
    2a04:	8c 93       	st	X, r24
    2a06:	af e4       	ldi	r26, 0x4F	; 79
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ef e4       	ldi	r30, 0x4F	; 79
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	80 62       	ori	r24, 0x20	; 32
    2a12:	8c 93       	st	X, r24
    2a14:	17 c0       	rjmp	.+46     	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
			case INVERTED_PWM:		TCCR1A &= TIMER1_OCMATCH_B_MASK;	TCCR1A |= (3 << 4);	break;
    2a16:	af e4       	ldi	r26, 0x4F	; 79
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	ef e4       	ldi	r30, 0x4F	; 79
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	8f 7c       	andi	r24, 0xCF	; 207
    2a22:	8c 93       	st	X, r24
    2a24:	af e4       	ldi	r26, 0x4F	; 79
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	ef e4       	ldi	r30, 0x4F	; 79
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	80 63       	ori	r24, 0x30	; 48
    2a30:	8c 93       	st	X, r24
    2a32:	08 c0       	rjmp	.+16     	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
			case DO_NOT_CHANGE:		/*Do nothing*/											break;
			default: Local_u8ErrorState = NOK;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	05 c0       	rjmp	.+10     	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
			}
			break;

		default:Local_u8ErrorState = NOK;	break;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <TIMER1_u8SetCompOutModeChB+0x16e>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a46:	28 96       	adiw	r28, 0x08	; 8
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <TIMER2_u8SetCompOutMode>:
uint8 TIMER2_u8SetCompOutMode(const TIMER0_2_CFG_t *Copy_pstTimerConfig, TIMERS_OC_MODE_t Copy_u8Mode)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	28 97       	sbiw	r28, 0x08	; 8
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	9b 83       	std	Y+3, r25	; 0x03
    2a6e:	8a 83       	std	Y+2, r24	; 0x02
    2a70:	6c 83       	std	Y+4, r22	; 0x04
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2a72:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pstTimerConfig != NULL)
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <TIMER2_u8SetCompOutMode+0x26>
    2a7c:	cd c0       	rjmp	.+410    	; 0x2c18 <TIMER2_u8SetCompOutMode+0x1c0>
	{
		/*Select Wave Generation Mode*/
		switch(Copy_pstTimerConfig -> WGM)
    2a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a80:	fb 81       	ldd	r31, Y+3	; 0x03
    2a82:	81 81       	ldd	r24, Z+1	; 0x01
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	38 87       	std	Y+8, r19	; 0x08
    2a8a:	2f 83       	std	Y+7, r18	; 0x07
    2a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a8e:	98 85       	ldd	r25, Y+8	; 0x08
    2a90:	81 30       	cpi	r24, 0x01	; 1
    2a92:	91 05       	cpc	r25, r1
    2a94:	21 f1       	breq	.+72     	; 0x2ade <TIMER2_u8SetCompOutMode+0x86>
    2a96:	2f 81       	ldd	r18, Y+7	; 0x07
    2a98:	38 85       	ldd	r19, Y+8	; 0x08
    2a9a:	22 30       	cpi	r18, 0x02	; 2
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	2c f4       	brge	.+10     	; 0x2aaa <TIMER2_u8SetCompOutMode+0x52>
    2aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa2:	98 85       	ldd	r25, Y+8	; 0x08
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	61 f0       	breq	.+24     	; 0x2ac0 <TIMER2_u8SetCompOutMode+0x68>
    2aa8:	46 c0       	rjmp	.+140    	; 0x2b36 <TIMER2_u8SetCompOutMode+0xde>
    2aaa:	2f 81       	ldd	r18, Y+7	; 0x07
    2aac:	38 85       	ldd	r19, Y+8	; 0x08
    2aae:	22 30       	cpi	r18, 0x02	; 2
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	21 f1       	breq	.+72     	; 0x2afc <TIMER2_u8SetCompOutMode+0xa4>
    2ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab6:	98 85       	ldd	r25, Y+8	; 0x08
    2ab8:	83 30       	cpi	r24, 0x03	; 3
    2aba:	91 05       	cpc	r25, r1
    2abc:	71 f1       	breq	.+92     	; 0x2b1a <TIMER2_u8SetCompOutMode+0xc2>
    2abe:	3b c0       	rjmp	.+118    	; 0x2b36 <TIMER2_u8SetCompOutMode+0xde>
		{
		case NORMAL:	CLR_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2ac0:	a5 e4       	ldi	r26, 0x45	; 69
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e5 e4       	ldi	r30, 0x45	; 69
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8f 7b       	andi	r24, 0xBF	; 191
    2acc:	8c 93       	st	X, r24
    2ace:	a5 e4       	ldi	r26, 0x45	; 69
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e5 e4       	ldi	r30, 0x45	; 69
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	87 7f       	andi	r24, 0xF7	; 247
    2ada:	8c 93       	st	X, r24
    2adc:	2c c0       	rjmp	.+88     	; 0x2b36 <TIMER2_u8SetCompOutMode+0xde>
		case PHASE_CORR:SET_BIT(TCCR2,TCCR2_WGM20);	CLR_BIT(TCCR2,TCCR2_WGM21);	break;
    2ade:	a5 e4       	ldi	r26, 0x45	; 69
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e5 e4       	ldi	r30, 0x45	; 69
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	80 64       	ori	r24, 0x40	; 64
    2aea:	8c 93       	st	X, r24
    2aec:	a5 e4       	ldi	r26, 0x45	; 69
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e5 e4       	ldi	r30, 0x45	; 69
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	87 7f       	andi	r24, 0xF7	; 247
    2af8:	8c 93       	st	X, r24
    2afa:	1d c0       	rjmp	.+58     	; 0x2b36 <TIMER2_u8SetCompOutMode+0xde>
		case CTC:		CLR_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2afc:	a5 e4       	ldi	r26, 0x45	; 69
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e5 e4       	ldi	r30, 0x45	; 69
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7b       	andi	r24, 0xBF	; 191
    2b08:	8c 93       	st	X, r24
    2b0a:	a5 e4       	ldi	r26, 0x45	; 69
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e5 e4       	ldi	r30, 0x45	; 69
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	88 60       	ori	r24, 0x08	; 8
    2b16:	8c 93       	st	X, r24
    2b18:	0e c0       	rjmp	.+28     	; 0x2b36 <TIMER2_u8SetCompOutMode+0xde>
		case FAST_PWM:	SET_BIT(TCCR2,TCCR2_WGM20);	SET_BIT(TCCR2,TCCR2_WGM21);	break;
    2b1a:	a5 e4       	ldi	r26, 0x45	; 69
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e5 e4       	ldi	r30, 0x45	; 69
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	80 64       	ori	r24, 0x40	; 64
    2b26:	8c 93       	st	X, r24
    2b28:	a5 e4       	ldi	r26, 0x45	; 69
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e5 e4       	ldi	r30, 0x45	; 69
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	88 60       	ori	r24, 0x08	; 8
    2b34:	8c 93       	st	X, r24
		}

		/*Select Output Compare Match Mode*/
		TCCR2 &= TIMER0_2_OCMATCH_MASK;
    2b36:	a5 e4       	ldi	r26, 0x45	; 69
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e5 e4       	ldi	r30, 0x45	; 69
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	8f 7c       	andi	r24, 0xCF	; 207
    2b42:	8c 93       	st	X, r24
		if((Copy_pstTimerConfig -> WGM == NORMAL) || (Copy_pstTimerConfig -> WGM == CTC))
    2b44:	ea 81       	ldd	r30, Y+2	; 0x02
    2b46:	fb 81       	ldd	r31, Y+3	; 0x03
    2b48:	81 81       	ldd	r24, Z+1	; 0x01
    2b4a:	88 23       	and	r24, r24
    2b4c:	29 f0       	breq	.+10     	; 0x2b58 <TIMER2_u8SetCompOutMode+0x100>
    2b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b50:	fb 81       	ldd	r31, Y+3	; 0x03
    2b52:	81 81       	ldd	r24, Z+1	; 0x01
    2b54:	82 30       	cpi	r24, 0x02	; 2
    2b56:	c1 f4       	brne	.+48     	; 0x2b88 <TIMER2_u8SetCompOutMode+0x130>
		{
			if(Copy_u8Mode < NON_INVERTED_PWM)
    2b58:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	90 f4       	brcc	.+36     	; 0x2b82 <TIMER2_u8SetCompOutMode+0x12a>
			{
				TCCR2 |= (Copy_u8Mode << 4);
    2b5e:	a5 e4       	ldi	r26, 0x45	; 69
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e5 e4       	ldi	r30, 0x45	; 69
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	28 2f       	mov	r18, r24
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	82 95       	swap	r24
    2b72:	92 95       	swap	r25
    2b74:	90 7f       	andi	r25, 0xF0	; 240
    2b76:	98 27       	eor	r25, r24
    2b78:	80 7f       	andi	r24, 0xF0	; 240
    2b7a:	98 27       	eor	r25, r24
    2b7c:	82 2b       	or	r24, r18
    2b7e:	8c 93       	st	X, r24
    2b80:	39 c0       	rjmp	.+114    	; 0x2bf4 <TIMER2_u8SetCompOutMode+0x19c>
			}
			else
			{
				Local_u8ErrorState = NOK;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	36 c0       	rjmp	.+108    	; 0x2bf4 <TIMER2_u8SetCompOutMode+0x19c>
			}
		}
		else if((Copy_pstTimerConfig -> WGM == FAST_PWM) || (Copy_pstTimerConfig -> WGM == PHASE_CORR))
    2b88:	ea 81       	ldd	r30, Y+2	; 0x02
    2b8a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b8c:	81 81       	ldd	r24, Z+1	; 0x01
    2b8e:	83 30       	cpi	r24, 0x03	; 3
    2b90:	29 f0       	breq	.+10     	; 0x2b9c <TIMER2_u8SetCompOutMode+0x144>
    2b92:	ea 81       	ldd	r30, Y+2	; 0x02
    2b94:	fb 81       	ldd	r31, Y+3	; 0x03
    2b96:	81 81       	ldd	r24, Z+1	; 0x01
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	61 f5       	brne	.+88     	; 0x2bf4 <TIMER2_u8SetCompOutMode+0x19c>
		{
			switch(Copy_u8Mode)
    2b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	3e 83       	std	Y+6, r19	; 0x06
    2ba4:	2d 83       	std	Y+5, r18	; 0x05
    2ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    2baa:	84 30       	cpi	r24, 0x04	; 4
    2bac:	91 05       	cpc	r25, r1
    2bae:	81 f0       	breq	.+32     	; 0x2bd0 <TIMER2_u8SetCompOutMode+0x178>
    2bb0:	2d 81       	ldd	r18, Y+5	; 0x05
    2bb2:	3e 81       	ldd	r19, Y+6	; 0x06
    2bb4:	25 30       	cpi	r18, 0x05	; 5
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	99 f0       	breq	.+38     	; 0x2be0 <TIMER2_u8SetCompOutMode+0x188>
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	b9 f4       	brne	.+46     	; 0x2bf0 <TIMER2_u8SetCompOutMode+0x198>
			{
			case OC_DISCONNECTED:	TCCR2 |= (0 << 4);	break;
    2bc2:	e5 e4       	ldi	r30, 0x45	; 69
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	a5 e4       	ldi	r26, 0x45	; 69
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	8c 91       	ld	r24, X
    2bcc:	80 83       	st	Z, r24
    2bce:	12 c0       	rjmp	.+36     	; 0x2bf4 <TIMER2_u8SetCompOutMode+0x19c>
			case NON_INVERTED_PWM:	TCCR2 |= (2 << 4);	break;
    2bd0:	a5 e4       	ldi	r26, 0x45	; 69
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e5 e4       	ldi	r30, 0x45	; 69
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 62       	ori	r24, 0x20	; 32
    2bdc:	8c 93       	st	X, r24
    2bde:	0a c0       	rjmp	.+20     	; 0x2bf4 <TIMER2_u8SetCompOutMode+0x19c>
			case INVERTED_PWM:		TCCR2 |= (3 << 4);	break;
    2be0:	a5 e4       	ldi	r26, 0x45	; 69
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e5 e4       	ldi	r30, 0x45	; 69
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	80 63       	ori	r24, 0x30	; 48
    2bec:	8c 93       	st	X, r24
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <TIMER2_u8SetCompOutMode+0x19c>
			default: Local_u8ErrorState = NOK;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	89 83       	std	Y+1, r24	; 0x01
			}
		}

		/*Select the clock*/
		TCCR2 &= PRESCALER_MASK;
    2bf4:	a5 e4       	ldi	r26, 0x45	; 69
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e5 e4       	ldi	r30, 0x45	; 69
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	88 7f       	andi	r24, 0xF8	; 248
    2c00:	8c 93       	st	X, r24
		TCCR2 |= Copy_pstTimerConfig -> ClkSelect;
    2c02:	a5 e4       	ldi	r26, 0x45	; 69
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e5 e4       	ldi	r30, 0x45	; 69
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	90 81       	ld	r25, Z
    2c0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c10:	80 81       	ld	r24, Z
    2c12:	89 2b       	or	r24, r25
    2c14:	8c 93       	st	X, r24
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <TIMER2_u8SetCompOutMode+0x1c4>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Return Error State*/
	return Local_u8ErrorState;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c1e:	28 96       	adiw	r28, 0x08	; 8
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <TIMERS_u8IntEnable>:



uint8 TIMERS_u8IntEnable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <TIMERS_u8IntEnable+0x6>
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <TIMERS_u8IntEnable+0x8>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2c3e:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	3c 83       	std	Y+4, r19	; 0x04
    2c48:	2b 83       	std	Y+3, r18	; 0x03
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	83 30       	cpi	r24, 0x03	; 3
    2c50:	91 05       	cpc	r25, r1
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <TIMERS_u8IntEnable+0x26>
    2c54:	42 c0       	rjmp	.+132    	; 0x2cda <TIMERS_u8IntEnable+0xaa>
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	24 30       	cpi	r18, 0x04	; 4
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	7c f4       	brge	.+30     	; 0x2c7e <TIMERS_u8IntEnable+0x4e>
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	91 05       	cpc	r25, r1
    2c68:	41 f1       	breq	.+80     	; 0x2cba <TIMERS_u8IntEnable+0x8a>
    2c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6e:	22 30       	cpi	r18, 0x02	; 2
    2c70:	31 05       	cpc	r19, r1
    2c72:	5c f5       	brge	.+86     	; 0x2cca <TIMERS_u8IntEnable+0x9a>
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	b9 f0       	breq	.+46     	; 0x2caa <TIMERS_u8IntEnable+0x7a>
    2c7c:	56 c0       	rjmp	.+172    	; 0x2d2a <TIMERS_u8IntEnable+0xfa>
    2c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c80:	3c 81       	ldd	r19, Y+4	; 0x04
    2c82:	25 30       	cpi	r18, 0x05	; 5
    2c84:	31 05       	cpc	r19, r1
    2c86:	c9 f1       	breq	.+114    	; 0x2cfa <TIMERS_u8IntEnable+0xca>
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8c:	85 30       	cpi	r24, 0x05	; 5
    2c8e:	91 05       	cpc	r25, r1
    2c90:	64 f1       	brlt	.+88     	; 0x2cea <TIMERS_u8IntEnable+0xba>
    2c92:	2b 81       	ldd	r18, Y+3	; 0x03
    2c94:	3c 81       	ldd	r19, Y+4	; 0x04
    2c96:	26 30       	cpi	r18, 0x06	; 6
    2c98:	31 05       	cpc	r19, r1
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <TIMERS_u8IntEnable+0x6e>
    2c9c:	3e c0       	rjmp	.+124    	; 0x2d1a <TIMERS_u8IntEnable+0xea>
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	87 30       	cpi	r24, 0x07	; 7
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	89 f1       	breq	.+98     	; 0x2d0a <TIMERS_u8IntEnable+0xda>
    2ca8:	40 c0       	rjmp	.+128    	; 0x2d2a <TIMERS_u8IntEnable+0xfa>
	{
	case TIMER0_OVF:	SET_BIT(TIMSK,TIMSK_TOIE0);	break;
    2caa:	a9 e5       	ldi	r26, 0x59	; 89
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	e9 e5       	ldi	r30, 0x59	; 89
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	8c 93       	st	X, r24
    2cb8:	3a c0       	rjmp	.+116    	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER0_COMP:	SET_BIT(TIMSK,TIMSK_OCIE0);	break;
    2cba:	a9 e5       	ldi	r26, 0x59	; 89
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e9 e5       	ldi	r30, 0x59	; 89
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	82 60       	ori	r24, 0x02	; 2
    2cc6:	8c 93       	st	X, r24
    2cc8:	32 c0       	rjmp	.+100    	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER1_OVF:	SET_BIT(TIMSK,TIMSK_TOIE1);	break;
    2cca:	a9 e5       	ldi	r26, 0x59	; 89
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e9 e5       	ldi	r30, 0x59	; 89
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	84 60       	ori	r24, 0x04	; 4
    2cd6:	8c 93       	st	X, r24
    2cd8:	2a c0       	rjmp	.+84     	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPA:	SET_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2cda:	a9 e5       	ldi	r26, 0x59	; 89
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e9 e5       	ldi	r30, 0x59	; 89
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 61       	ori	r24, 0x10	; 16
    2ce6:	8c 93       	st	X, r24
    2ce8:	22 c0       	rjmp	.+68     	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER1_COMPB:	SET_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2cea:	a9 e5       	ldi	r26, 0x59	; 89
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e9 e5       	ldi	r30, 0x59	; 89
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	88 60       	ori	r24, 0x08	; 8
    2cf6:	8c 93       	st	X, r24
    2cf8:	1a c0       	rjmp	.+52     	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER1_CAPT:	SET_BIT(TIMSK,TIMSK_TICIE1);	break;
    2cfa:	a9 e5       	ldi	r26, 0x59	; 89
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e9 e5       	ldi	r30, 0x59	; 89
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	80 62       	ori	r24, 0x20	; 32
    2d06:	8c 93       	st	X, r24
    2d08:	12 c0       	rjmp	.+36     	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER2_COMP:	SET_BIT(TIMSK,TIMSK_OCIE2); break;
    2d0a:	a9 e5       	ldi	r26, 0x59	; 89
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e9 e5       	ldi	r30, 0x59	; 89
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	80 68       	ori	r24, 0x80	; 128
    2d16:	8c 93       	st	X, r24
    2d18:	0a c0       	rjmp	.+20     	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	case TIMER2_OVF:	SET_BIT(TIMSK,TIMSK_TOIE2);	break;
    2d1a:	a9 e5       	ldi	r26, 0x59	; 89
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e9 e5       	ldi	r30, 0x59	; 89
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	80 64       	ori	r24, 0x40	; 64
    2d26:	8c 93       	st	X, r24
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <TIMERS_u8IntEnable+0xfe>
	default:Local_u8ErrorState = NOK;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <TIMERS_u8IntDisable>:
uint8 TIMERS_u8IntDisable(TIMERS_Int_Src_t Copy_u8TimerInt)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <TIMERS_u8IntDisable+0x6>
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <TIMERS_u8IntDisable+0x8>
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State*/
	uint8 Local_u8ErrorState = OK;
    2d4c:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the interrupt*/
	switch(Copy_u8TimerInt)
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	3c 83       	std	Y+4, r19	; 0x04
    2d56:	2b 83       	std	Y+3, r18	; 0x03
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	83 30       	cpi	r24, 0x03	; 3
    2d5e:	91 05       	cpc	r25, r1
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <TIMERS_u8IntDisable+0x26>
    2d62:	42 c0       	rjmp	.+132    	; 0x2de8 <TIMERS_u8IntDisable+0xaa>
    2d64:	2b 81       	ldd	r18, Y+3	; 0x03
    2d66:	3c 81       	ldd	r19, Y+4	; 0x04
    2d68:	24 30       	cpi	r18, 0x04	; 4
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	7c f4       	brge	.+30     	; 0x2d8c <TIMERS_u8IntDisable+0x4e>
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	91 05       	cpc	r25, r1
    2d76:	41 f1       	breq	.+80     	; 0x2dc8 <TIMERS_u8IntDisable+0x8a>
    2d78:	2b 81       	ldd	r18, Y+3	; 0x03
    2d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7c:	22 30       	cpi	r18, 0x02	; 2
    2d7e:	31 05       	cpc	r19, r1
    2d80:	5c f5       	brge	.+86     	; 0x2dd8 <TIMERS_u8IntDisable+0x9a>
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	9c 81       	ldd	r25, Y+4	; 0x04
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	b9 f0       	breq	.+46     	; 0x2db8 <TIMERS_u8IntDisable+0x7a>
    2d8a:	56 c0       	rjmp	.+172    	; 0x2e38 <TIMERS_u8IntDisable+0xfa>
    2d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d90:	25 30       	cpi	r18, 0x05	; 5
    2d92:	31 05       	cpc	r19, r1
    2d94:	c9 f1       	breq	.+114    	; 0x2e08 <TIMERS_u8IntDisable+0xca>
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	85 30       	cpi	r24, 0x05	; 5
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	64 f1       	brlt	.+88     	; 0x2df8 <TIMERS_u8IntDisable+0xba>
    2da0:	2b 81       	ldd	r18, Y+3	; 0x03
    2da2:	3c 81       	ldd	r19, Y+4	; 0x04
    2da4:	26 30       	cpi	r18, 0x06	; 6
    2da6:	31 05       	cpc	r19, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <TIMERS_u8IntDisable+0x6e>
    2daa:	3e c0       	rjmp	.+124    	; 0x2e28 <TIMERS_u8IntDisable+0xea>
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	87 30       	cpi	r24, 0x07	; 7
    2db2:	91 05       	cpc	r25, r1
    2db4:	89 f1       	breq	.+98     	; 0x2e18 <TIMERS_u8IntDisable+0xda>
    2db6:	40 c0       	rjmp	.+128    	; 0x2e38 <TIMERS_u8IntDisable+0xfa>
	{
	case TIMER0_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE0);	break;
    2db8:	a9 e5       	ldi	r26, 0x59	; 89
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e9 e5       	ldi	r30, 0x59	; 89
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8e 7f       	andi	r24, 0xFE	; 254
    2dc4:	8c 93       	st	X, r24
    2dc6:	3a c0       	rjmp	.+116    	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER0_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE0);	break;
    2dc8:	a9 e5       	ldi	r26, 0x59	; 89
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e9 e5       	ldi	r30, 0x59	; 89
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8d 7f       	andi	r24, 0xFD	; 253
    2dd4:	8c 93       	st	X, r24
    2dd6:	32 c0       	rjmp	.+100    	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER1_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE1);	break;
    2dd8:	a9 e5       	ldi	r26, 0x59	; 89
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e9 e5       	ldi	r30, 0x59	; 89
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	8b 7f       	andi	r24, 0xFB	; 251
    2de4:	8c 93       	st	X, r24
    2de6:	2a c0       	rjmp	.+84     	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPA:	CLR_BIT(TIMSK,TIMSK_OCIE1A);	break;
    2de8:	a9 e5       	ldi	r26, 0x59	; 89
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	e9 e5       	ldi	r30, 0x59	; 89
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	8f 7e       	andi	r24, 0xEF	; 239
    2df4:	8c 93       	st	X, r24
    2df6:	22 c0       	rjmp	.+68     	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER1_COMPB:	CLR_BIT(TIMSK,TIMSK_OCIE1B);	break;
    2df8:	a9 e5       	ldi	r26, 0x59	; 89
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e9 e5       	ldi	r30, 0x59	; 89
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	87 7f       	andi	r24, 0xF7	; 247
    2e04:	8c 93       	st	X, r24
    2e06:	1a c0       	rjmp	.+52     	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER1_CAPT:	CLR_BIT(TIMSK,TIMSK_TICIE1);	break;
    2e08:	a9 e5       	ldi	r26, 0x59	; 89
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	e9 e5       	ldi	r30, 0x59	; 89
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8f 7d       	andi	r24, 0xDF	; 223
    2e14:	8c 93       	st	X, r24
    2e16:	12 c0       	rjmp	.+36     	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER2_COMP:	CLR_BIT(TIMSK,TIMSK_OCIE2); break;
    2e18:	a9 e5       	ldi	r26, 0x59	; 89
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e9 e5       	ldi	r30, 0x59	; 89
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	8f 77       	andi	r24, 0x7F	; 127
    2e24:	8c 93       	st	X, r24
    2e26:	0a c0       	rjmp	.+20     	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	case TIMER2_OVF:	CLR_BIT(TIMSK,TIMSK_TOIE2);	break;
    2e28:	a9 e5       	ldi	r26, 0x59	; 89
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e9 e5       	ldi	r30, 0x59	; 89
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	8f 7b       	andi	r24, 0xBF	; 191
    2e34:	8c 93       	st	X, r24
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <TIMERS_u8IntDisable+0xfe>
	default:Local_u8ErrorState = NOK;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <TIMERS_u8Disable>:

uint8 TIMERS_u8Disable(TIMERS_NUM Copy_u8Timer)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <TIMERS_u8Disable+0x6>
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <TIMERS_u8Disable+0x8>
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2e5a:	19 82       	std	Y+1, r1	; 0x01

	/*Switch the timer*/
	switch(Copy_u8Timer)
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	3c 83       	std	Y+4, r19	; 0x04
    2e64:	2b 83       	std	Y+3, r18	; 0x03
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	99 f0       	breq	.+38     	; 0x2e96 <TIMERS_u8Disable+0x4a>
    2e70:	2b 81       	ldd	r18, Y+3	; 0x03
    2e72:	3c 81       	ldd	r19, Y+4	; 0x04
    2e74:	22 30       	cpi	r18, 0x02	; 2
    2e76:	31 05       	cpc	r19, r1
    2e78:	c1 f0       	breq	.+48     	; 0x2eaa <TIMERS_u8Disable+0x5e>
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	f1 f4       	brne	.+60     	; 0x2ebe <TIMERS_u8Disable+0x72>
	{
	case TIMER0: TIMERS_u8StateArr[TIMER0] = IDLE;	TCCR0 &= PRESCALER_MASK;	break;
    2e82:	10 92 80 01 	sts	0x0180, r1
    2e86:	a3 e5       	ldi	r26, 0x53	; 83
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e3 e5       	ldi	r30, 0x53	; 83
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 7f       	andi	r24, 0xF8	; 248
    2e92:	8c 93       	st	X, r24
    2e94:	16 c0       	rjmp	.+44     	; 0x2ec2 <TIMERS_u8Disable+0x76>
	case TIMER1: TIMERS_u8StateArr[TIMER1] = IDLE;	TCCR1B &= PRESCALER_MASK;	break;
    2e96:	10 92 81 01 	sts	0x0181, r1
    2e9a:	ae e4       	ldi	r26, 0x4E	; 78
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	ee e4       	ldi	r30, 0x4E	; 78
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 7f       	andi	r24, 0xF8	; 248
    2ea6:	8c 93       	st	X, r24
    2ea8:	0c c0       	rjmp	.+24     	; 0x2ec2 <TIMERS_u8Disable+0x76>
	case TIMER2: TIMERS_u8StateArr[TIMER2] = IDLE;	TCCR2 &= PRESCALER_MASK;	break;
    2eaa:	10 92 82 01 	sts	0x0182, r1
    2eae:	a5 e4       	ldi	r26, 0x45	; 69
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e5 e4       	ldi	r30, 0x45	; 69
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 7f       	andi	r24, 0xF8	; 248
    2eba:	8c 93       	st	X, r24
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <TIMERS_u8Disable+0x76>
	default:	Local_u8ErrorState = NOK;	break;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <TIMERS_u8SetCallBack>:
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_u8TimerIntSource, void (* Copy_pvCallBackFunc)(void))
{
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <TIMERS_u8SetCallBack+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <TIMERS_u8SetCallBack+0x8>
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	7c 83       	std	Y+4, r23	; 0x04
    2ee2:	6b 83       	std	Y+3, r22	; 0x03
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    2ee4:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer of function*/
	if(Copy_pvCallBackFunc != NULL)
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f0       	breq	.+26     	; 0x2f08 <TIMERS_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFuncArr[Copy_u8TimerIntSource] = Copy_pvCallBackFunc;
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	88 2f       	mov	r24, r24
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	fc 01       	movw	r30, r24
    2efa:	ed 57       	subi	r30, 0x7D	; 125
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	9c 81       	ldd	r25, Y+4	; 0x04
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <TIMERS_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <TIMER0_voidSetCompValue>:



void TIMER0_voidSetCompValue(uint8 Copy_u8Value)
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	0f 92       	push	r0
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 0*/
	OCR0 = Copy_u8Value;
    2f28:	ec e5       	ldi	r30, 0x5C	; 92
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	80 83       	st	Z, r24
}
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <TIMER0_voidSetOvfValue>:
void TIMER0_voidSetOvfValue(uint8 Copy_u8Value)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	0f 92       	push	r0
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 0*/
	TCNT0 = Copy_u8Value;
    2f44:	e2 e5       	ldi	r30, 0x52	; 82
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	80 83       	st	Z, r24
}
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <TIMER0_u8GetTimerValue>:
uint8 TIMER0_u8GetTimerValue(void)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 0*/
	return TCNT0;
    2f5c:	e2 e5       	ldi	r30, 0x52	; 82
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
}
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <TIMER2_voidSetCompValue>:



void TIMER2_voidSetCompValue(uint8 Copy_u8Value)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	0f 92       	push	r0
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 2*/
	OCR2 = Copy_u8Value;
    2f74:	e3 e4       	ldi	r30, 0x43	; 67
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	80 83       	st	Z, r24
}
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <TIMER2_voidSetOvfValue>:
void TIMER2_voidSetOvfValue(uint8 Copy_u8Value)
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	0f 92       	push	r0
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 2*/
	TCNT2 = Copy_u8Value;
    2f90:	e4 e4       	ldi	r30, 0x44	; 68
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	80 83       	st	Z, r24
}
    2f98:	0f 90       	pop	r0
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <TIMER2_u8GetTimerValue>:
uint8 TIMER2_u8GetTimerValue(void)
{
    2fa0:	df 93       	push	r29
    2fa2:	cf 93       	push	r28
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 2*/
	return TCNT2;
    2fa8:	e4 e4       	ldi	r30, 0x44	; 68
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
}
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <TIMER1_voidSetCompValueChA>:



void TIMER1_voidSetCompValueChA(uint16 Copy_u16Value)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <TIMER1_voidSetCompValueChA+0x6>
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel A*/
	OCR1A = Copy_u16Value;
    2fc2:	ea e4       	ldi	r30, 0x4A	; 74
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	80 83       	st	Z, r24
}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <TIMER1_voidSetCompValueChB>:
void TIMER1_voidSetCompValueChB(uint16 Copy_u16Value)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <TIMER1_voidSetCompValueChB+0x6>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Match Value of Timer 1 Channel B*/
	OCR1B = Copy_u16Value;
    2fe6:	e8 e4       	ldi	r30, 0x48	; 72
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	9a 81       	ldd	r25, Y+2	; 0x02
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	80 83       	st	Z, r24
}
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <TIMER1_voidSetOvfValue>:
void TIMER1_voidSetOvfValue(uint16 Copy_u16Value)
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <TIMER1_voidSetOvfValue+0x6>
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	9a 83       	std	Y+2, r25	; 0x02
    3008:	89 83       	std	Y+1, r24	; 0x01
	/*Set Overflow Value of Timer 1*/
	TCNT1 = Copy_u16Value;
    300a:	ec e4       	ldi	r30, 0x4C	; 76
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	9a 81       	ldd	r25, Y+2	; 0x02
    3012:	91 83       	std	Z+1, r25	; 0x01
    3014:	80 83       	st	Z, r24
}
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <TIMER1_voidSetInputCaptValue>:
void TIMER1_voidSetInputCaptValue(uint16 Copy_u16Value)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <TIMER1_voidSetInputCaptValue+0x6>
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	9a 83       	std	Y+2, r25	; 0x02
    302c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Input Capture Value of Timer 1*/
	ICR1 = Copy_u16Value;
    302e:	e6 e4       	ldi	r30, 0x46	; 70
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
}
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <TIMER1_u16GetTimerValue>:
uint16 TIMER1_u16GetTimerValue(void)
{
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
	/*Return Timer Value of Timer 1*/
	return TCNT1;
    304c:	ec e4       	ldi	r30, 0x4C	; 76
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
}
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <TIMER1_u16GetInputCaptValue>:
uint16 TIMER1_u16GetInputCaptValue(void)
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
	/*Return Input Capture Register Value*/
	return ICR1;
    3062:	e6 e4       	ldi	r30, 0x46	; 70
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
}
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <TIMER1_u8SetInputCaptTriggerSrc>:
uint8 TIMER1_u8SetInputCaptTriggerSrc(uint8 Copy_u8TriggerSrc)
{
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	00 d0       	rcall	.+0      	; 0x3076 <TIMER1_u8SetInputCaptTriggerSrc+0x6>
    3076:	00 d0       	rcall	.+0      	; 0x3078 <TIMER1_u8SetInputCaptTriggerSrc+0x8>
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    307e:	19 82       	std	Y+1, r1	; 0x01

	/*Set the trigger source selected*/
	switch(Copy_u8TriggerSrc)
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	3c 83       	std	Y+4, r19	; 0x04
    3088:	2b 83       	std	Y+3, r18	; 0x03
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	9c 81       	ldd	r25, Y+4	; 0x04
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	31 f0       	breq	.+12     	; 0x309e <TIMER1_u8SetInputCaptTriggerSrc+0x2e>
    3092:	2b 81       	ldd	r18, Y+3	; 0x03
    3094:	3c 81       	ldd	r19, Y+4	; 0x04
    3096:	21 30       	cpi	r18, 0x01	; 1
    3098:	31 05       	cpc	r19, r1
    309a:	49 f0       	breq	.+18     	; 0x30ae <TIMER1_u8SetInputCaptTriggerSrc+0x3e>
    309c:	10 c0       	rjmp	.+32     	; 0x30be <TIMER1_u8SetInputCaptTriggerSrc+0x4e>
	{
	case TIMER1_u8ICU_RISING_EDGE:	SET_BIT(TCCR1B,TCCR1B_ICES1);	break;
    309e:	ae e4       	ldi	r26, 0x4E	; 78
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	ee e4       	ldi	r30, 0x4E	; 78
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	80 64       	ori	r24, 0x40	; 64
    30aa:	8c 93       	st	X, r24
    30ac:	0a c0       	rjmp	.+20     	; 0x30c2 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	case TIMER1_u8ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1);	break;
    30ae:	ae e4       	ldi	r26, 0x4E	; 78
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	ee e4       	ldi	r30, 0x4E	; 78
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	8f 7b       	andi	r24, 0xBF	; 191
    30ba:	8c 93       	st	X, r24
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <TIMER1_u8SetInputCaptTriggerSrc+0x52>
	default: Local_u8ErrorState = NOK;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    30c4:	0f 90       	pop	r0
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <WDT_voidEnable>:



void WDT_voidEnable(void)
{
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
    30da:	a1 e4       	ldi	r26, 0x41	; 65
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e1 e4       	ldi	r30, 0x41	; 65
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	88 60       	ori	r24, 0x08	; 8
    30e6:	8c 93       	st	X, r24
}
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <WDT_voidDisable>:
void WDT_voidDisable(void)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1 << WDTCR_WDTOE) | (1 << WDTCR_WDE);
    30f6:	a1 e4       	ldi	r26, 0x41	; 65
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e1 e4       	ldi	r30, 0x41	; 65
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	88 61       	ori	r24, 0x18	; 24
    3102:	8c 93       	st	X, r24
	WDTCR &= 0b11110111;
    3104:	a1 e4       	ldi	r26, 0x41	; 65
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e1 e4       	ldi	r30, 0x41	; 65
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	87 7f       	andi	r24, 0xF7	; 247
    3110:	8c 93       	st	X, r24
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <WDT_u8SetTime>:
uint8 WDT_u8SetTime(uint8 Copy_u8WatchDogTime)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	00 d0       	rcall	.+0      	; 0x311e <WDT_u8SetTime+0x6>
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	8a 83       	std	Y+2, r24	; 0x02
	/*Define variables*/
	uint8 Local_u8ErrorState = OK;
    3124:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8WatchDogTime < 8u)
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	88 30       	cpi	r24, 0x08	; 8
    312a:	80 f4       	brcc	.+32     	; 0x314c <WDT_u8SetTime+0x34>
	{
		WDTCR &= WDT_PRESCALER_MASK;
    312c:	a1 e4       	ldi	r26, 0x41	; 65
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e1 e4       	ldi	r30, 0x41	; 65
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	88 7f       	andi	r24, 0xF8	; 248
    3138:	8c 93       	st	X, r24
		WDTCR |= Copy_u8WatchDogTime;
    313a:	a1 e4       	ldi	r26, 0x41	; 65
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e1 e4       	ldi	r30, 0x41	; 65
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	90 81       	ld	r25, Z
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	89 2b       	or	r24, r25
    3148:	8c 93       	st	X, r24
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <WDT_u8SetTime+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3150:	89 81       	ldd	r24, Y+1	; 0x01
}
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <__vector_11>:


/*Timer/Counter 0 OverFlow Event ISR*/
void __vector_11 (void) __attribute((signal));
void __vector_11 (void)
{
    315c:	1f 92       	push	r1
    315e:	0f 92       	push	r0
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	0f 92       	push	r0
    3164:	11 24       	eor	r1, r1
    3166:	2f 93       	push	r18
    3168:	3f 93       	push	r19
    316a:	4f 93       	push	r20
    316c:	5f 93       	push	r21
    316e:	6f 93       	push	r22
    3170:	7f 93       	push	r23
    3172:	8f 93       	push	r24
    3174:	9f 93       	push	r25
    3176:	af 93       	push	r26
    3178:	bf 93       	push	r27
    317a:	ef 93       	push	r30
    317c:	ff 93       	push	r31
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    3186:	80 91 83 01 	lds	r24, 0x0183
    318a:	90 91 84 01 	lds	r25, 0x0184
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	29 f0       	breq	.+10     	; 0x319c <__vector_11+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    3192:	e0 91 83 01 	lds	r30, 0x0183
    3196:	f0 91 84 01 	lds	r31, 0x0184
    319a:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	ff 91       	pop	r31
    31a2:	ef 91       	pop	r30
    31a4:	bf 91       	pop	r27
    31a6:	af 91       	pop	r26
    31a8:	9f 91       	pop	r25
    31aa:	8f 91       	pop	r24
    31ac:	7f 91       	pop	r23
    31ae:	6f 91       	pop	r22
    31b0:	5f 91       	pop	r21
    31b2:	4f 91       	pop	r20
    31b4:	3f 91       	pop	r19
    31b6:	2f 91       	pop	r18
    31b8:	0f 90       	pop	r0
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <__vector_10>:

/*Timer/Counter 0 Compare Match Event ISR*/
void __vector_10 (void) __attribute((signal));
void __vector_10 (void)
{
    31c2:	1f 92       	push	r1
    31c4:	0f 92       	push	r0
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	0f 92       	push	r0
    31ca:	11 24       	eor	r1, r1
    31cc:	2f 93       	push	r18
    31ce:	3f 93       	push	r19
    31d0:	4f 93       	push	r20
    31d2:	5f 93       	push	r21
    31d4:	6f 93       	push	r22
    31d6:	7f 93       	push	r23
    31d8:	8f 93       	push	r24
    31da:	9f 93       	push	r25
    31dc:	af 93       	push	r26
    31de:	bf 93       	push	r27
    31e0:	ef 93       	push	r30
    31e2:	ff 93       	push	r31
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    31ec:	80 91 85 01 	lds	r24, 0x0185
    31f0:	90 91 86 01 	lds	r25, 0x0186
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	29 f0       	breq	.+10     	; 0x3202 <__vector_10+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    31f8:	e0 91 85 01 	lds	r30, 0x0185
    31fc:	f0 91 86 01 	lds	r31, 0x0186
    3200:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3202:	cf 91       	pop	r28
    3204:	df 91       	pop	r29
    3206:	ff 91       	pop	r31
    3208:	ef 91       	pop	r30
    320a:	bf 91       	pop	r27
    320c:	af 91       	pop	r26
    320e:	9f 91       	pop	r25
    3210:	8f 91       	pop	r24
    3212:	7f 91       	pop	r23
    3214:	6f 91       	pop	r22
    3216:	5f 91       	pop	r21
    3218:	4f 91       	pop	r20
    321a:	3f 91       	pop	r19
    321c:	2f 91       	pop	r18
    321e:	0f 90       	pop	r0
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	0f 90       	pop	r0
    3224:	1f 90       	pop	r1
    3226:	18 95       	reti

00003228 <__vector_9>:

/*Timer/Counter 1 OverFlow Event ISR*/
void __vector_9 (void) __attribute((signal));
void __vector_9 (void)
{
    3228:	1f 92       	push	r1
    322a:	0f 92       	push	r0
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	0f 92       	push	r0
    3230:	11 24       	eor	r1, r1
    3232:	2f 93       	push	r18
    3234:	3f 93       	push	r19
    3236:	4f 93       	push	r20
    3238:	5f 93       	push	r21
    323a:	6f 93       	push	r22
    323c:	7f 93       	push	r23
    323e:	8f 93       	push	r24
    3240:	9f 93       	push	r25
    3242:	af 93       	push	r26
    3244:	bf 93       	push	r27
    3246:	ef 93       	push	r30
    3248:	ff 93       	push	r31
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    3252:	80 91 87 01 	lds	r24, 0x0187
    3256:	90 91 88 01 	lds	r25, 0x0188
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	29 f0       	breq	.+10     	; 0x3268 <__vector_9+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    325e:	e0 91 87 01 	lds	r30, 0x0187
    3262:	f0 91 88 01 	lds	r31, 0x0188
    3266:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	ff 91       	pop	r31
    326e:	ef 91       	pop	r30
    3270:	bf 91       	pop	r27
    3272:	af 91       	pop	r26
    3274:	9f 91       	pop	r25
    3276:	8f 91       	pop	r24
    3278:	7f 91       	pop	r23
    327a:	6f 91       	pop	r22
    327c:	5f 91       	pop	r21
    327e:	4f 91       	pop	r20
    3280:	3f 91       	pop	r19
    3282:	2f 91       	pop	r18
    3284:	0f 90       	pop	r0
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	0f 90       	pop	r0
    328a:	1f 90       	pop	r1
    328c:	18 95       	reti

0000328e <__vector_8>:

/*Timer/Counter 1 Channel B Compare Match Event ISR*/
void __vector_8 (void) __attribute((signal));
void __vector_8 (void)
{
    328e:	1f 92       	push	r1
    3290:	0f 92       	push	r0
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	0f 92       	push	r0
    3296:	11 24       	eor	r1, r1
    3298:	2f 93       	push	r18
    329a:	3f 93       	push	r19
    329c:	4f 93       	push	r20
    329e:	5f 93       	push	r21
    32a0:	6f 93       	push	r22
    32a2:	7f 93       	push	r23
    32a4:	8f 93       	push	r24
    32a6:	9f 93       	push	r25
    32a8:	af 93       	push	r26
    32aa:	bf 93       	push	r27
    32ac:	ef 93       	push	r30
    32ae:	ff 93       	push	r31
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPB] != NULL)
    32b8:	80 91 8b 01 	lds	r24, 0x018B
    32bc:	90 91 8c 01 	lds	r25, 0x018C
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	29 f0       	breq	.+10     	; 0x32ce <__vector_8+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPB]();
    32c4:	e0 91 8b 01 	lds	r30, 0x018B
    32c8:	f0 91 8c 01 	lds	r31, 0x018C
    32cc:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	ff 91       	pop	r31
    32d4:	ef 91       	pop	r30
    32d6:	bf 91       	pop	r27
    32d8:	af 91       	pop	r26
    32da:	9f 91       	pop	r25
    32dc:	8f 91       	pop	r24
    32de:	7f 91       	pop	r23
    32e0:	6f 91       	pop	r22
    32e2:	5f 91       	pop	r21
    32e4:	4f 91       	pop	r20
    32e6:	3f 91       	pop	r19
    32e8:	2f 91       	pop	r18
    32ea:	0f 90       	pop	r0
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	0f 90       	pop	r0
    32f0:	1f 90       	pop	r1
    32f2:	18 95       	reti

000032f4 <__vector_7>:

/*Timer/Counter 1 Channel A Compare Match Event ISR*/
void __vector_7 (void) __attribute((signal));
void __vector_7 (void)
{
    32f4:	1f 92       	push	r1
    32f6:	0f 92       	push	r0
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	0f 92       	push	r0
    32fc:	11 24       	eor	r1, r1
    32fe:	2f 93       	push	r18
    3300:	3f 93       	push	r19
    3302:	4f 93       	push	r20
    3304:	5f 93       	push	r21
    3306:	6f 93       	push	r22
    3308:	7f 93       	push	r23
    330a:	8f 93       	push	r24
    330c:	9f 93       	push	r25
    330e:	af 93       	push	r26
    3310:	bf 93       	push	r27
    3312:	ef 93       	push	r30
    3314:	ff 93       	push	r31
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMPA] != NULL)
    331e:	80 91 89 01 	lds	r24, 0x0189
    3322:	90 91 8a 01 	lds	r25, 0x018A
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	29 f0       	breq	.+10     	; 0x3334 <__vector_7+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_COMPA]();
    332a:	e0 91 89 01 	lds	r30, 0x0189
    332e:	f0 91 8a 01 	lds	r31, 0x018A
    3332:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	ff 91       	pop	r31
    333a:	ef 91       	pop	r30
    333c:	bf 91       	pop	r27
    333e:	af 91       	pop	r26
    3340:	9f 91       	pop	r25
    3342:	8f 91       	pop	r24
    3344:	7f 91       	pop	r23
    3346:	6f 91       	pop	r22
    3348:	5f 91       	pop	r21
    334a:	4f 91       	pop	r20
    334c:	3f 91       	pop	r19
    334e:	2f 91       	pop	r18
    3350:	0f 90       	pop	r0
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	0f 90       	pop	r0
    3356:	1f 90       	pop	r1
    3358:	18 95       	reti

0000335a <__vector_6>:

/*Timer/Counter 1 Input Capture Event ISR*/
void __vector_6 (void) __attribute((signal));
void __vector_6 (void)
{
    335a:	1f 92       	push	r1
    335c:	0f 92       	push	r0
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	0f 92       	push	r0
    3362:	11 24       	eor	r1, r1
    3364:	2f 93       	push	r18
    3366:	3f 93       	push	r19
    3368:	4f 93       	push	r20
    336a:	5f 93       	push	r21
    336c:	6f 93       	push	r22
    336e:	7f 93       	push	r23
    3370:	8f 93       	push	r24
    3372:	9f 93       	push	r25
    3374:	af 93       	push	r26
    3376:	bf 93       	push	r27
    3378:	ef 93       	push	r30
    337a:	ff 93       	push	r31
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    3384:	80 91 8d 01 	lds	r24, 0x018D
    3388:	90 91 8e 01 	lds	r25, 0x018E
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	29 f0       	breq	.+10     	; 0x339a <__vector_6+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    3390:	e0 91 8d 01 	lds	r30, 0x018D
    3394:	f0 91 8e 01 	lds	r31, 0x018E
    3398:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    339a:	cf 91       	pop	r28
    339c:	df 91       	pop	r29
    339e:	ff 91       	pop	r31
    33a0:	ef 91       	pop	r30
    33a2:	bf 91       	pop	r27
    33a4:	af 91       	pop	r26
    33a6:	9f 91       	pop	r25
    33a8:	8f 91       	pop	r24
    33aa:	7f 91       	pop	r23
    33ac:	6f 91       	pop	r22
    33ae:	5f 91       	pop	r21
    33b0:	4f 91       	pop	r20
    33b2:	3f 91       	pop	r19
    33b4:	2f 91       	pop	r18
    33b6:	0f 90       	pop	r0
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	0f 90       	pop	r0
    33bc:	1f 90       	pop	r1
    33be:	18 95       	reti

000033c0 <__vector_5>:

/*Timer/Counter 2 OverFlow Event ISR*/
void __vector_5 (void) __attribute((signal));
void __vector_5 (void)
{
    33c0:	1f 92       	push	r1
    33c2:	0f 92       	push	r0
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	0f 92       	push	r0
    33c8:	11 24       	eor	r1, r1
    33ca:	2f 93       	push	r18
    33cc:	3f 93       	push	r19
    33ce:	4f 93       	push	r20
    33d0:	5f 93       	push	r21
    33d2:	6f 93       	push	r22
    33d4:	7f 93       	push	r23
    33d6:	8f 93       	push	r24
    33d8:	9f 93       	push	r25
    33da:	af 93       	push	r26
    33dc:	bf 93       	push	r27
    33de:	ef 93       	push	r30
    33e0:	ff 93       	push	r31
    33e2:	df 93       	push	r29
    33e4:	cf 93       	push	r28
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    33ea:	80 91 8f 01 	lds	r24, 0x018F
    33ee:	90 91 90 01 	lds	r25, 0x0190
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	29 f0       	breq	.+10     	; 0x3400 <__vector_5+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    33f6:	e0 91 8f 01 	lds	r30, 0x018F
    33fa:	f0 91 90 01 	lds	r31, 0x0190
    33fe:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	ff 91       	pop	r31
    3406:	ef 91       	pop	r30
    3408:	bf 91       	pop	r27
    340a:	af 91       	pop	r26
    340c:	9f 91       	pop	r25
    340e:	8f 91       	pop	r24
    3410:	7f 91       	pop	r23
    3412:	6f 91       	pop	r22
    3414:	5f 91       	pop	r21
    3416:	4f 91       	pop	r20
    3418:	3f 91       	pop	r19
    341a:	2f 91       	pop	r18
    341c:	0f 90       	pop	r0
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	0f 90       	pop	r0
    3422:	1f 90       	pop	r1
    3424:	18 95       	reti

00003426 <__vector_4>:

/*Timer/Counter 2 Compare Match Event ISR*/
void __vector_4 (void) __attribute((signal));
void __vector_4 (void)
{
    3426:	1f 92       	push	r1
    3428:	0f 92       	push	r0
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	0f 92       	push	r0
    342e:	11 24       	eor	r1, r1
    3430:	2f 93       	push	r18
    3432:	3f 93       	push	r19
    3434:	4f 93       	push	r20
    3436:	5f 93       	push	r21
    3438:	6f 93       	push	r22
    343a:	7f 93       	push	r23
    343c:	8f 93       	push	r24
    343e:	9f 93       	push	r25
    3440:	af 93       	push	r26
    3442:	bf 93       	push	r27
    3444:	ef 93       	push	r30
    3446:	ff 93       	push	r31
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
	/*Validate the pointer*/
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    3450:	80 91 91 01 	lds	r24, 0x0191
    3454:	90 91 92 01 	lds	r25, 0x0192
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	29 f0       	breq	.+10     	; 0x3466 <__vector_4+0x40>
	{
		/*Calling the ISR function*/
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    345c:	e0 91 91 01 	lds	r30, 0x0191
    3460:	f0 91 92 01 	lds	r31, 0x0192
    3464:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	ff 91       	pop	r31
    346c:	ef 91       	pop	r30
    346e:	bf 91       	pop	r27
    3470:	af 91       	pop	r26
    3472:	9f 91       	pop	r25
    3474:	8f 91       	pop	r24
    3476:	7f 91       	pop	r23
    3478:	6f 91       	pop	r22
    347a:	5f 91       	pop	r21
    347c:	4f 91       	pop	r20
    347e:	3f 91       	pop	r19
    3480:	2f 91       	pop	r18
    3482:	0f 90       	pop	r0
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	0f 90       	pop	r0
    3488:	1f 90       	pop	r1
    348a:	18 95       	reti

0000348c <TWI_enMasterInit>:
#include "TWI_private.h"
#include "TWI_register.h"


TWI_ERROR_STATUS_t TWI_enMasterInit(uint8 Copy_u8Address)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	00 d0       	rcall	.+0      	; 0x3492 <TWI_enMasterInit+0x6>
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    3498:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the Address with the standards of TWI protocol*/
	if(Copy_u8Address <= 127u)
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	88 23       	and	r24, r24
    349e:	94 f1       	brlt	.+100    	; 0x3504 <TWI_enMasterInit+0x78>
	{
		if(((Copy_u8Address >> 3) != 15u) || (Copy_u8Address != 0u))
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	86 95       	lsr	r24
    34a4:	86 95       	lsr	r24
    34a6:	86 95       	lsr	r24
    34a8:	8f 30       	cpi	r24, 0x0F	; 15
    34aa:	19 f4       	brne	.+6      	; 0x34b2 <TWI_enMasterInit+0x26>
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	88 23       	and	r24, r24
    34b0:	31 f1       	breq	.+76     	; 0x34fe <TWI_enMasterInit+0x72>
		{
			/*Set the Address into its register*/
			TWAR = Copy_u8Address << 1u;
    34b2:	e2 e2       	ldi	r30, 0x22	; 34
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	8a 81       	ldd	r24, Y+2	; 0x02
    34b8:	88 0f       	add	r24, r24
    34ba:	80 83       	st	Z, r24

			/*Enable Acknowledge*/
			SET_BIT(TWCR,TWCR_TWEA);
    34bc:	a6 e5       	ldi	r26, 0x56	; 86
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e6 e5       	ldi	r30, 0x56	; 86
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	80 64       	ori	r24, 0x40	; 64
    34c8:	8c 93       	st	X, r24

			/*Set the Communication Frequency to 400 KHz*/
			CLR_BIT(TWSR,TWSR_TWPS0);
    34ca:	a1 e2       	ldi	r26, 0x21	; 33
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e1 e2       	ldi	r30, 0x21	; 33
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	8e 7f       	andi	r24, 0xFE	; 254
    34d6:	8c 93       	st	X, r24
			CLR_BIT(TWSR,TWSR_TWPS1);
    34d8:	a1 e2       	ldi	r26, 0x21	; 33
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e1 e2       	ldi	r30, 0x21	; 33
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	8d 7f       	andi	r24, 0xFD	; 253
    34e4:	8c 93       	st	X, r24
			TWBR = 2u;
    34e6:	e0 e2       	ldi	r30, 0x20	; 32
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	80 83       	st	Z, r24

			/*Enable TWI*/
			SET_BIT(TWCR,TWCR_TWEN);
    34ee:	a6 e5       	ldi	r26, 0x56	; 86
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	e6 e5       	ldi	r30, 0x56	; 86
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	84 60       	ori	r24, 0x04	; 4
    34fa:	8c 93       	st	X, r24
    34fc:	05 c0       	rjmp	.+10     	; 0x3508 <TWI_enMasterInit+0x7c>
		}
		else
		{
			Local_enErrorState = RESERVED_ADDRESS_ERROR;
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	89 83       	std	Y+1, r24	; 0x01
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <TWI_enMasterInit+0x7c>
		}
	}
	else
	{
		Local_enErrorState = FETAL_ERROR;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_enErrorState;
    3508:	89 81       	ldd	r24, Y+1	; 0x01
}
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <TWI_enSlaveInit>:

TWI_ERROR_STATUS_t TWI_enSlaveInit(uint8 Copy_u8Address)
{
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <TWI_enSlaveInit+0x6>
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    3520:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the Address with the standards of TWI protocol*/
	if(Copy_u8Address > 127u)
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	88 23       	and	r24, r24
    3526:	04 f5       	brge	.+64     	; 0x3568 <TWI_enSlaveInit+0x54>
	{
		if(((Copy_u8Address >> 3) != 15u) || (Copy_u8Address != 0u))
    3528:	8a 81       	ldd	r24, Y+2	; 0x02
    352a:	86 95       	lsr	r24
    352c:	86 95       	lsr	r24
    352e:	86 95       	lsr	r24
    3530:	8f 30       	cpi	r24, 0x0F	; 15
    3532:	19 f4       	brne	.+6      	; 0x353a <TWI_enSlaveInit+0x26>
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	88 23       	and	r24, r24
    3538:	a1 f0       	breq	.+40     	; 0x3562 <TWI_enSlaveInit+0x4e>
		{
			/*Set the Address into its register*/
			TWAR = Copy_u8Address << 1u;
    353a:	e2 e2       	ldi	r30, 0x22	; 34
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	88 0f       	add	r24, r24
    3542:	80 83       	st	Z, r24

			/*Enable Acknowledge*/
			SET_BIT(TWCR,TWCR_TWEA);
    3544:	a6 e5       	ldi	r26, 0x56	; 86
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e6 e5       	ldi	r30, 0x56	; 86
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	80 64       	ori	r24, 0x40	; 64
    3550:	8c 93       	st	X, r24

			/*Enable TWI*/
			SET_BIT(TWCR,TWCR_TWEN);
    3552:	a6 e5       	ldi	r26, 0x56	; 86
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	e6 e5       	ldi	r30, 0x56	; 86
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	84 60       	ori	r24, 0x04	; 4
    355e:	8c 93       	st	X, r24
    3560:	05 c0       	rjmp	.+10     	; 0x356c <TWI_enSlaveInit+0x58>
		}
		else
		{
			Local_enErrorState = RESERVED_ADDRESS_ERROR;
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	89 83       	std	Y+1, r24	; 0x01
    3566:	02 c0       	rjmp	.+4      	; 0x356c <TWI_enSlaveInit+0x58>
		}
	}
	else
	{
		Local_enErrorState = FETAL_ERROR;
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_enErrorState;
    356c:	89 81       	ldd	r24, Y+1	; 0x01
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <TWI_enSendStartCondition>:

TWI_ERROR_STATUS_t TWI_enSendStartCondition(void)
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	0f 92       	push	r0
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    3582:	19 82       	std	Y+1, r1	; 0x01

	/*Set Start Condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    3584:	a6 e5       	ldi	r26, 0x56	; 86
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e6 e5       	ldi	r30, 0x56	; 86
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 62       	ori	r24, 0x20	; 32
    3590:	8c 93       	st	X, r24

	/*Clear the interrupt flag to enable the previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    3592:	a6 e5       	ldi	r26, 0x56	; 86
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e6 e5       	ldi	r30, 0x56	; 86
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	80 68       	ori	r24, 0x80	; 128
    359e:	8c 93       	st	X, r24


	/*Wait until the previous action finished and the interrupt flag is raised again*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0u);
    35a0:	e6 e5       	ldi	r30, 0x56	; 86
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	88 23       	and	r24, r24
    35a8:	dc f7       	brge	.-10     	; 0x35a0 <TWI_enSendStartCondition+0x28>

	/*Check the status register*/
	if((TWSR & STATUS_REGISTER_MASK) != START_ACK)
    35aa:	e1 e2       	ldi	r30, 0x21	; 33
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	88 2f       	mov	r24, r24
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	88 7f       	andi	r24, 0xF8	; 248
    35b6:	90 70       	andi	r25, 0x00	; 0
    35b8:	88 30       	cpi	r24, 0x08	; 8
    35ba:	91 05       	cpc	r25, r1
    35bc:	11 f0       	breq	.+4      	; 0x35c2 <TWI_enSendStartCondition+0x4a>
	{
		Local_enErrorState = START_CONDITION_ERROR;
    35be:	83 e0       	ldi	r24, 0x03	; 3
    35c0:	89 83       	std	Y+1, r24	; 0x01

		/*Do nothing*/
	}

	/*Return Error State*/
	return Local_enErrorState;
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    35c4:	0f 90       	pop	r0
    35c6:	cf 91       	pop	r28
    35c8:	df 91       	pop	r29
    35ca:	08 95       	ret

000035cc <TWI_enSendRepeatedStart>:

TWI_ERROR_STATUS_t TWI_enSendRepeatedStart(void)
{
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	0f 92       	push	r0
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    35d6:	19 82       	std	Y+1, r1	; 0x01

	/*Set Start Condition*/
	SET_BIT(TWCR,TWCR_TWSTA);
    35d8:	a6 e5       	ldi	r26, 0x56	; 86
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	e6 e5       	ldi	r30, 0x56	; 86
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	80 62       	ori	r24, 0x20	; 32
    35e4:	8c 93       	st	X, r24

	/*Clear the interrupt flag to enable the previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    35e6:	a6 e5       	ldi	r26, 0x56	; 86
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e6 e5       	ldi	r30, 0x56	; 86
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	80 68       	ori	r24, 0x80	; 128
    35f2:	8c 93       	st	X, r24

	/*Wait until the previous action finished and the interrupt flag is raised again*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0u);
    35f4:	e6 e5       	ldi	r30, 0x56	; 86
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	88 23       	and	r24, r24
    35fc:	dc f7       	brge	.-10     	; 0x35f4 <TWI_enSendRepeatedStart+0x28>

	/*Check the status register*/
	if((TWSR & STATUS_REGISTER_MASK) != REP_START_ACK)
    35fe:	e1 e2       	ldi	r30, 0x21	; 33
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	80 81       	ld	r24, Z
    3604:	88 2f       	mov	r24, r24
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	88 7f       	andi	r24, 0xF8	; 248
    360a:	90 70       	andi	r25, 0x00	; 0
    360c:	80 31       	cpi	r24, 0x10	; 16
    360e:	91 05       	cpc	r25, r1
    3610:	11 f0       	breq	.+4      	; 0x3616 <TWI_enSendRepeatedStart+0x4a>
	{
		Local_enErrorState = REP_START_CONDITION_ERROR;
    3612:	84 e0       	ldi	r24, 0x04	; 4
    3614:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Do nothing*/
	}

	/*Return Error State*/
	return Local_enErrorState;
    3616:	89 81       	ldd	r24, Y+1	; 0x01
}
    3618:	0f 90       	pop	r0
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <TWI_enSendSlaveAddressWithWrite>:

TWI_ERROR_STATUS_t TWI_enSendSlaveAddressWithWrite(uint8 Copy_u8SlaveAddress)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	00 d0       	rcall	.+0      	; 0x3626 <TWI_enSendSlaveAddressWithWrite+0x6>
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    362c:	19 82       	std	Y+1, r1	; 0x01

	/*Set the slave address into the data register*/
	TWDR = Copy_u8SlaveAddress << 1u;
    362e:	e3 e2       	ldi	r30, 0x23	; 35
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	88 0f       	add	r24, r24
    3636:	80 83       	st	Z, r24

	/*Clear bit 0 for write operation*/
	CLR_BIT(TWDR,0u);
    3638:	a3 e2       	ldi	r26, 0x23	; 35
    363a:	b0 e0       	ldi	r27, 0x00	; 0
    363c:	e3 e2       	ldi	r30, 0x23	; 35
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	80 81       	ld	r24, Z
    3642:	8e 7f       	andi	r24, 0xFE	; 254
    3644:	8c 93       	st	X, r24

	/*Clear Start Condition*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    3646:	a6 e5       	ldi	r26, 0x56	; 86
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	e6 e5       	ldi	r30, 0x56	; 86
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	8f 7d       	andi	r24, 0xDF	; 223
    3652:	8c 93       	st	X, r24

	/*Clear the interrupt flag to enable the previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    3654:	a6 e5       	ldi	r26, 0x56	; 86
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	e6 e5       	ldi	r30, 0x56	; 86
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	80 68       	ori	r24, 0x80	; 128
    3660:	8c 93       	st	X, r24

	/*Wait until the previous action finished and the interrupt flag is raised again*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0u);
    3662:	e6 e5       	ldi	r30, 0x56	; 86
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	88 23       	and	r24, r24
    366a:	dc f7       	brge	.-10     	; 0x3662 <TWI_enSendSlaveAddressWithWrite+0x42>

	/*Check the status register*/
	if((TWSR & STATUS_REGISTER_MASK) != SLAVE_ADD_AND_WR_ACK)
    366c:	e1 e2       	ldi	r30, 0x21	; 33
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	88 7f       	andi	r24, 0xF8	; 248
    3678:	90 70       	andi	r25, 0x00	; 0
    367a:	88 31       	cpi	r24, 0x18	; 24
    367c:	91 05       	cpc	r25, r1
    367e:	11 f0       	breq	.+4      	; 0x3684 <TWI_enSendSlaveAddressWithWrite+0x64>
	{
		Local_enErrorState = SLAVE_ADD_WITH_WR_ERROR;
    3680:	85 e0       	ldi	r24, 0x05	; 5
    3682:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Do nothing*/
	}

	/*Return Error State*/
	return Local_enErrorState;
    3684:	89 81       	ldd	r24, Y+1	; 0x01
}
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <TWI_enSendSlaveAddressWithRead>:

TWI_ERROR_STATUS_t TWI_enSendSlaveAddressWithRead(uint8 Copy_u8SlaveAddress)
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	00 d0       	rcall	.+0      	; 0x3696 <TWI_enSendSlaveAddressWithRead+0x6>
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    369c:	19 82       	std	Y+1, r1	; 0x01

	/*Set the slave address into the data register*/
	TWDR = Copy_u8SlaveAddress << 1u;
    369e:	e3 e2       	ldi	r30, 0x23	; 35
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	88 0f       	add	r24, r24
    36a6:	80 83       	st	Z, r24

	/*Set bit 0 for read operation*/
	SET_BIT(TWDR,0u);
    36a8:	a3 e2       	ldi	r26, 0x23	; 35
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e3 e2       	ldi	r30, 0x23	; 35
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	81 60       	ori	r24, 0x01	; 1
    36b4:	8c 93       	st	X, r24

	/*Clear Start Condition*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    36b6:	a6 e5       	ldi	r26, 0x56	; 86
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	e6 e5       	ldi	r30, 0x56	; 86
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	8f 7d       	andi	r24, 0xDF	; 223
    36c2:	8c 93       	st	X, r24

	/*Clear the interrupt flag to enable the previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    36c4:	a6 e5       	ldi	r26, 0x56	; 86
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e6 e5       	ldi	r30, 0x56	; 86
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	80 68       	ori	r24, 0x80	; 128
    36d0:	8c 93       	st	X, r24

	/*Wait until the previous action finished and the interrupt flag is raised again*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0u);
    36d2:	e6 e5       	ldi	r30, 0x56	; 86
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	88 23       	and	r24, r24
    36da:	dc f7       	brge	.-10     	; 0x36d2 <TWI_enSendSlaveAddressWithRead+0x42>

	/*Check the status register*/
	if((TWSR & STATUS_REGISTER_MASK) != SLAVE_ADD_AND_RD_ACK)
    36dc:	e1 e2       	ldi	r30, 0x21	; 33
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	80 81       	ld	r24, Z
    36e2:	88 2f       	mov	r24, r24
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	88 7f       	andi	r24, 0xF8	; 248
    36e8:	90 70       	andi	r25, 0x00	; 0
    36ea:	80 34       	cpi	r24, 0x40	; 64
    36ec:	91 05       	cpc	r25, r1
    36ee:	11 f0       	breq	.+4      	; 0x36f4 <TWI_enSendSlaveAddressWithRead+0x64>
	{
		Local_enErrorState = SLAVE_ADD_WITH_RD_ERROR;
    36f0:	86 e0       	ldi	r24, 0x06	; 6
    36f2:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Do nothing*/
	}

	/*Return Error State*/
	return Local_enErrorState;
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <TWI_enMasterWriteDataByte>:

TWI_ERROR_STATUS_t TWI_enMasterWriteDataByte(uint8 Copy_u8Data)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <TWI_enMasterWriteDataByte+0x6>
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    370c:	19 82       	std	Y+1, r1	; 0x01

	/*Set the data byte into the data register*/
	TWDR = Copy_u8Data;
    370e:	e3 e2       	ldi	r30, 0x23	; 35
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	80 83       	st	Z, r24

	/*Clear the interrupt flag to enable the previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    3716:	a6 e5       	ldi	r26, 0x56	; 86
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e6 e5       	ldi	r30, 0x56	; 86
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 81       	ld	r24, Z
    3720:	80 68       	ori	r24, 0x80	; 128
    3722:	8c 93       	st	X, r24

	/*Wait until the previous action finished and the interrupt flag is raised again*/
	while((GET_BIT(TWCR,TWCR_TWINT)) == 0u);
    3724:	e6 e5       	ldi	r30, 0x56	; 86
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	88 23       	and	r24, r24
    372c:	dc f7       	brge	.-10     	; 0x3724 <TWI_enMasterWriteDataByte+0x24>

	/*Check the status register*/
	if((TWSR & STATUS_REGISTER_MASK) != MSTR_WR_BYTE_ACK)
    372e:	e1 e2       	ldi	r30, 0x21	; 33
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	88 2f       	mov	r24, r24
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	88 7f       	andi	r24, 0xF8	; 248
    373a:	90 70       	andi	r25, 0x00	; 0
    373c:	88 32       	cpi	r24, 0x28	; 40
    373e:	91 05       	cpc	r25, r1
    3740:	11 f0       	breq	.+4      	; 0x3746 <TWI_enMasterWriteDataByte+0x46>
	{
		Local_enErrorState = MASTER_WR_BYTE_WITH_ACK_ERROR;
    3742:	87 e0       	ldi	r24, 0x07	; 7
    3744:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Do nothing*/
	}

	/*Return Error State*/
	return Local_enErrorState;
    3746:	89 81       	ldd	r24, Y+1	; 0x01
}
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <TWI_enMasterReadDataByte>:

TWI_ERROR_STATUS_t TWI_enMasterReadDataByte(uint8 *Copy_pu8Data)
{
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	00 d0       	rcall	.+0      	; 0x3758 <TWI_enMasterReadDataByte+0x6>
    3758:	0f 92       	push	r0
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	9b 83       	std	Y+3, r25	; 0x03
    3760:	8a 83       	std	Y+2, r24	; 0x02
	/*Define Error State variable*/
	TWI_ERROR_STATUS_t Local_enErrorState = NO_ERROR;
    3762:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer to data that will be returned*/
	if(Copy_pu8Data != NULL)
    3764:	8a 81       	ldd	r24, Y+2	; 0x02
    3766:	9b 81       	ldd	r25, Y+3	; 0x03
    3768:	00 97       	sbiw	r24, 0x00	; 0
    376a:	01 f1       	breq	.+64     	; 0x37ac <TWI_enMasterReadDataByte+0x5a>
	{
		/*Clear the interrupt flag to enable the slave to send data*/
		SET_BIT(TWCR,TWCR_TWINT);
    376c:	a6 e5       	ldi	r26, 0x56	; 86
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e6 e5       	ldi	r30, 0x56	; 86
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	80 68       	ori	r24, 0x80	; 128
    3778:	8c 93       	st	X, r24

		/*Wait until the slave finished writing the data and the interrupt flag is raised again*/
		while((GET_BIT(TWCR,TWCR_TWINT)) == 0u);
    377a:	e6 e5       	ldi	r30, 0x56	; 86
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	88 23       	and	r24, r24
    3782:	dc f7       	brge	.-10     	; 0x377a <TWI_enMasterReadDataByte+0x28>

		/*Check the status register*/
		if((TWSR & STATUS_REGISTER_MASK) != MSTR_RD_BYTE_WITH_ACK)
    3784:	e1 e2       	ldi	r30, 0x21	; 33
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	88 7f       	andi	r24, 0xF8	; 248
    3790:	90 70       	andi	r25, 0x00	; 0
    3792:	80 35       	cpi	r24, 0x50	; 80
    3794:	91 05       	cpc	r25, r1
    3796:	19 f0       	breq	.+6      	; 0x379e <TWI_enMasterReadDataByte+0x4c>
		{
			Local_enErrorState = MASTER_RD_BYTE_WITH_ACK_ERROR;
    3798:	88 e0       	ldi	r24, 0x08	; 8
    379a:	89 83       	std	Y+1, r24	; 0x01
    379c:	09 c0       	rjmp	.+18     	; 0x37b0 <TWI_enMasterReadDataByte+0x5e>
		}
		else
		{
			/*Return the data received to the user*/
			*Copy_pu8Data = TWDR;
    379e:	e3 e2       	ldi	r30, 0x23	; 35
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	80 81       	ld	r24, Z
    37a4:	ea 81       	ldd	r30, Y+2	; 0x02
    37a6:	fb 81       	ldd	r31, Y+3	; 0x03
    37a8:	80 83       	st	Z, r24
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <TWI_enMasterReadDataByte+0x5e>
		}
	}
	else
	{
		Local_enErrorState = NULL_PTR_ERROR;
    37ac:	89 e0       	ldi	r24, 0x09	; 9
    37ae:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_enErrorState;
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <TWI_enSendStopCondition>:

void TWI_enSendStopCondition(void)
{
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
	/*Set stop Condition*/
	SET_BIT(TWCR,TWCR_TWSTO);
    37c6:	a6 e5       	ldi	r26, 0x56	; 86
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	e6 e5       	ldi	r30, 0x56	; 86
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	80 61       	ori	r24, 0x10	; 16
    37d2:	8c 93       	st	X, r24

	/*Clear the interrupt flag to enable the previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    37d4:	a6 e5       	ldi	r26, 0x56	; 86
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	e6 e5       	ldi	r30, 0x56	; 86
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	80 68       	ori	r24, 0x80	; 128
    37e0:	8c 93       	st	X, r24
}
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <USART_voidInit>:

/**
 * @brief A function to initialize the USART peripheral.
 */
void USART_voidInit(void)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	0f 92       	push	r0
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
	/*Define Temporary Variable for UCSRC*/
	uint8 Local_u8TempUCSRC = 0u;
    37f2:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    37f4:	aa e2       	ldi	r26, 0x2A	; 42
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	ea e2       	ldi	r30, 0x2A	; 42
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	80 61       	ori	r24, 0x10	; 16
    3800:	8c 93       	st	X, r24

	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    3802:	aa e2       	ldi	r26, 0x2A	; 42
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	ea e2       	ldi	r30, 0x2A	; 42
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	88 60       	ori	r24, 0x08	; 8
    380e:	8c 93       	st	X, r24

	/*Disable Double Transmission Speed*/
	CLR_BIT(UCSRA,UCSRA_U2X);
    3810:	ab e2       	ldi	r26, 0x2B	; 43
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	eb e2       	ldi	r30, 0x2B	; 43
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	80 81       	ld	r24, Z
    381a:	8d 7f       	andi	r24, 0xFD	; 253
    381c:	8c 93       	st	X, r24
	CLR_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_u8CHAR_SIZE == EIGHT_BITS_CHAR_SIZE
	Local_u8TempUCSRC &= CHAR_SIZE_MASK;
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	89 7f       	andi	r24, 0xF9	; 249
    3822:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ0);
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	82 60       	ori	r24, 0x02	; 2
    3828:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8TempUCSRC, UCSRC_UCSZ1);
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	84 60       	ori	r24, 0x04	; 4
    382e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    3830:	aa e2       	ldi	r26, 0x2A	; 42
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	ea e2       	ldi	r30, 0x2A	; 42
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	8b 7f       	andi	r24, 0xFB	; 251
    383c:	8c 93       	st	X, r24
	/*Select Synchronization Mode*/
#if USART_u8SYNCH_MODE == SYNCHRONOUS_MODE
	SET_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);

#elif USART_u8SYNCH_MODE == ASYNCHRONOUS_MODE
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UMSEL);
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	8f 7b       	andi	r24, 0xBF	; 191
    3842:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8SYNCH_MODE configuration type
#endif

	/*Select Parity Mode*/
#if USART_u8PARITY_MODE == DISABLED
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM0);
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	8f 7e       	andi	r24, 0xEF	; 239
    3848:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8TempUCSRC,UCSRC_UPM1);
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	8f 7d       	andi	r24, 0xDF	; 223
    384e:	89 83       	std	Y+1, r24	; 0x01
#error Wrong USART_u8PARITY_MODE configuration type
#endif

	/*Select Stop Bit Mode*/
#if USART_u8STOP_BITS_NUM == ONE_BIT
	CLR_BIT(Local_u8TempUCSRC,UCSRC_USBS);
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	87 7f       	andi	r24, 0xF7	; 247
    3854:	89 83       	std	Y+1, r24	; 0x01
#else
#error Wrong USART_u8STOP_BITS_NUM configuration type
#endif

	/*Select Mode of UCSRC Register to write on it*/
	SET_BIT(Local_u8TempUCSRC,UCSRC_URSEL);
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	80 68       	ori	r24, 0x80	; 128
    385a:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = Local_u8TempUCSRC;
    385c:	e0 e4       	ldi	r30, 0x40	; 64
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	80 83       	st	Z, r24

	/*Set Baud Rate*/
	UBRRL = USART_u8BAUD_RATE;
    3864:	e9 e2       	ldi	r30, 0x29	; 41
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	83 e3       	ldi	r24, 0x33	; 51
    386a:	80 83       	st	Z, r24
}
    386c:	0f 90       	pop	r0
    386e:	cf 91       	pop	r28
    3870:	df 91       	pop	r29
    3872:	08 95       	ret

00003874 <USART_u8Send>:
 * @brief A function to transmit data with USART.
 * @param Copy_u16Data	Data that will be transmitted by USART.
 * @return Error State.
 */
uint8 USART_u8Send(uint16 Copy_u16Data)
{
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	27 97       	sbiw	r28, 0x07	; 7
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	9f 83       	std	Y+7, r25	; 0x07
    388a:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    388c:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    388e:	19 82       	std	Y+1, r1	; 0x01
    3890:	1a 82       	std	Y+2, r1	; 0x02
    3892:	1b 82       	std	Y+3, r1	; 0x03
    3894:	1c 82       	std	Y+4, r1	; 0x04

	/*Check if USART Transmitter is idle or not*/
	if((USART_u8TransmitBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
    3896:	80 91 9f 01 	lds	r24, 0x019F
    389a:	88 23       	and	r24, r24
    389c:	21 f0       	breq	.+8      	; 0x38a6 <USART_u8Send+0x32>
    389e:	80 91 a1 01 	lds	r24, 0x01A1
    38a2:	81 30       	cpi	r24, 0x01	; 1
    38a4:	e9 f5       	brne	.+122    	; 0x3920 <USART_u8Send+0xac>
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	80 93 9f 01 	sts	0x019F, r24
    38ac:	0b c0       	rjmp	.+22     	; 0x38c4 <USART_u8Send+0x50>

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	9a 81       	ldd	r25, Y+2	; 0x02
    38b2:	ab 81       	ldd	r26, Y+3	; 0x03
    38b4:	bc 81       	ldd	r27, Y+4	; 0x04
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	a1 1d       	adc	r26, r1
    38ba:	b1 1d       	adc	r27, r1
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	9a 83       	std	Y+2, r25	; 0x02
    38c0:	ab 83       	std	Y+3, r26	; 0x03
    38c2:	bc 83       	std	Y+4, r27	; 0x04
	{
		/*Inform Others that transmit channel is busy from now*/
		USART_u8TransmitBusyState = BUSY;

		/*Polling until Transmit Buffer is ready*/
		while(((GET_BIT(UCSRA,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
    38c4:	eb e2       	ldi	r30, 0x2B	; 43
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	82 95       	swap	r24
    38cc:	86 95       	lsr	r24
    38ce:	87 70       	andi	r24, 0x07	; 7
    38d0:	88 2f       	mov	r24, r24
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	81 70       	andi	r24, 0x01	; 1
    38d6:	90 70       	andi	r25, 0x00	; 0
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	61 f4       	brne	.+24     	; 0x38f4 <USART_u8Send+0x80>
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	9a 81       	ldd	r25, Y+2	; 0x02
    38e0:	ab 81       	ldd	r26, Y+3	; 0x03
    38e2:	bc 81       	ldd	r27, Y+4	; 0x04
    38e4:	80 3a       	cpi	r24, 0xA0	; 160
    38e6:	26 e8       	ldi	r18, 0x86	; 134
    38e8:	92 07       	cpc	r25, r18
    38ea:	21 e0       	ldi	r18, 0x01	; 1
    38ec:	a2 07       	cpc	r26, r18
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	b2 07       	cpc	r27, r18
    38f2:	e8 f2       	brcs	.-70     	; 0x38ae <USART_u8Send+0x3a>
		{
			Local_u32TimeoutCounter++;
		}

		/*Check why the loop has been broken*/
		if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
    38f8:	ab 81       	ldd	r26, Y+3	; 0x03
    38fa:	bc 81       	ldd	r27, Y+4	; 0x04
    38fc:	80 3a       	cpi	r24, 0xA0	; 160
    38fe:	26 e8       	ldi	r18, 0x86	; 134
    3900:	92 07       	cpc	r25, r18
    3902:	21 e0       	ldi	r18, 0x01	; 1
    3904:	a2 07       	cpc	r26, r18
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	b2 07       	cpc	r27, r18
    390a:	19 f4       	brne	.+6      	; 0x3912 <USART_u8Send+0x9e>
		{
			/*Loop is broken because the counter exceed timeout counts*/
			Local_u8ErrorState = TIMEOUT_ERR;
    390c:	83 e0       	ldi	r24, 0x03	; 3
    390e:	8d 83       	std	Y+5, r24	; 0x05
    3910:	04 c0       	rjmp	.+8      	; 0x391a <USART_u8Send+0xa6>
		else
		{
			/*Loop is broken because the transmit buffer is ready*/

			/*Set the transmit data*/
			UDR = (uint8) Copy_u16Data;
    3912:	ec e2       	ldi	r30, 0x2C	; 44
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	8e 81       	ldd	r24, Y+6	; 0x06
    3918:	80 83       	st	Z, r24
			}
#endif
		}

		/*Reset busy flag to be idle*/
		USART_u8TransmitBusyState = IDLE;
    391a:	10 92 9f 01 	sts	0x019F, r1
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <USART_u8Send+0xb0>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE_ERR;
    3920:	84 e0       	ldi	r24, 0x04	; 4
    3922:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error state*/
	return Local_u8ErrorState;
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3926:	27 96       	adiw	r28, 0x07	; 7
    3928:	0f b6       	in	r0, 0x3f	; 63
    392a:	f8 94       	cli
    392c:	de bf       	out	0x3e, r29	; 62
    392e:	0f be       	out	0x3f, r0	; 63
    3930:	cd bf       	out	0x3d, r28	; 61
    3932:	cf 91       	pop	r28
    3934:	df 91       	pop	r29
    3936:	08 95       	ret

00003938 <USART_u8Receive>:
 * @brief A function to receive data by USART up to nine bits.
 * @param Copy_pvData Pointer to return the data received.
 * @return Error State.
 */
uint8 USART_u8Receive(void *Copy_pvData)
{
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	27 97       	sbiw	r28, 0x07	; 7
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	9f 83       	std	Y+7, r25	; 0x07
    394e:	8e 83       	std	Y+6, r24	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3950:	1d 82       	std	Y+5, r1	; 0x05
	uint32 Local_u32TimeoutCounter = 0u;
    3952:	19 82       	std	Y+1, r1	; 0x01
    3954:	1a 82       	std	Y+2, r1	; 0x02
    3956:	1b 82       	std	Y+3, r1	; 0x03
    3958:	1c 82       	std	Y+4, r1	; 0x04

	/*Validate the pointer*/
	if(Copy_pvData != NULL)
    395a:	8e 81       	ldd	r24, Y+6	; 0x06
    395c:	9f 81       	ldd	r25, Y+7	; 0x07
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	09 f4       	brne	.+2      	; 0x3964 <USART_u8Receive+0x2c>
    3962:	43 c0       	rjmp	.+134    	; 0x39ea <USART_u8Receive+0xb2>
	{
		if((USART_u8ReceiveBusyState == IDLE) || (USART_u8TransmitCallSrc == SYNCH_FUNC_CALL))
    3964:	80 91 a0 01 	lds	r24, 0x01A0
    3968:	88 23       	and	r24, r24
    396a:	21 f0       	breq	.+8      	; 0x3974 <USART_u8Receive+0x3c>
    396c:	80 91 a1 01 	lds	r24, 0x01A1
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	c1 f5       	brne	.+112    	; 0x39e4 <USART_u8Receive+0xac>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	80 93 a0 01 	sts	0x01A0, r24
    397a:	0b c0       	rjmp	.+22     	; 0x3992 <USART_u8Receive+0x5a>

			/*Polling until USART receive data in receive buffer*/
			while(((GET_BIT(UCSRA,UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++;
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	ab 81       	ldd	r26, Y+3	; 0x03
    3982:	bc 81       	ldd	r27, Y+4	; 0x04
    3984:	01 96       	adiw	r24, 0x01	; 1
    3986:	a1 1d       	adc	r26, r1
    3988:	b1 1d       	adc	r27, r1
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	9a 83       	std	Y+2, r25	; 0x02
    398e:	ab 83       	std	Y+3, r26	; 0x03
    3990:	bc 83       	std	Y+4, r27	; 0x04
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;

			/*Polling until USART receive data in receive buffer*/
			while(((GET_BIT(UCSRA,UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < USART_u32TIMEOUT))
    3992:	eb e2       	ldi	r30, 0x2B	; 43
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	88 23       	and	r24, r24
    399a:	64 f0       	brlt	.+24     	; 0x39b4 <USART_u8Receive+0x7c>
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	9a 81       	ldd	r25, Y+2	; 0x02
    39a0:	ab 81       	ldd	r26, Y+3	; 0x03
    39a2:	bc 81       	ldd	r27, Y+4	; 0x04
    39a4:	80 3a       	cpi	r24, 0xA0	; 160
    39a6:	26 e8       	ldi	r18, 0x86	; 134
    39a8:	92 07       	cpc	r25, r18
    39aa:	21 e0       	ldi	r18, 0x01	; 1
    39ac:	a2 07       	cpc	r26, r18
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	b2 07       	cpc	r27, r18
    39b2:	20 f3       	brcs	.-56     	; 0x397c <USART_u8Receive+0x44>
			{
				Local_u32TimeoutCounter++;
			}

			/*Check why the loop has been broken*/
			if(Local_u32TimeoutCounter == USART_u32TIMEOUT)
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	9a 81       	ldd	r25, Y+2	; 0x02
    39b8:	ab 81       	ldd	r26, Y+3	; 0x03
    39ba:	bc 81       	ldd	r27, Y+4	; 0x04
    39bc:	80 3a       	cpi	r24, 0xA0	; 160
    39be:	26 e8       	ldi	r18, 0x86	; 134
    39c0:	92 07       	cpc	r25, r18
    39c2:	21 e0       	ldi	r18, 0x01	; 1
    39c4:	a2 07       	cpc	r26, r18
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	b2 07       	cpc	r27, r18
    39ca:	19 f4       	brne	.+6      	; 0x39d2 <USART_u8Receive+0x9a>
			{
				/*Loop is broken because the counter exceed timeout counts*/
				Local_u8ErrorState = TIMEOUT_ERR;
    39cc:	83 e0       	ldi	r24, 0x03	; 3
    39ce:	8d 83       	std	Y+5, r24	; 0x05
    39d0:	06 c0       	rjmp	.+12     	; 0x39de <USART_u8Receive+0xa6>
			{
				/*Loop is broken because USART receive data*/

				/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				*(uint8 *) Copy_pvData = UDR;
    39d2:	ee 81       	ldd	r30, Y+6	; 0x06
    39d4:	ff 81       	ldd	r31, Y+7	; 0x07
    39d6:	ac e2       	ldi	r26, 0x2C	; 44
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	8c 91       	ld	r24, X
    39dc:	80 83       	st	Z, r24
				}
#endif
			}

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    39de:	10 92 a0 01 	sts	0x01A0, r1
    39e2:	05 c0       	rjmp	.+10     	; 0x39ee <USART_u8Receive+0xb6>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    39e4:	84 e0       	ldi	r24, 0x04	; 4
    39e6:	8d 83       	std	Y+5, r24	; 0x05
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <USART_u8Receive+0xb6>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    39ea:	82 e0       	ldi	r24, 0x02	; 2
    39ec:	8d 83       	std	Y+5, r24	; 0x05
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    39ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    39f0:	27 96       	adiw	r28, 0x07	; 7
    39f2:	0f b6       	in	r0, 0x3f	; 63
    39f4:	f8 94       	cli
    39f6:	de bf       	out	0x3e, r29	; 62
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	08 95       	ret

00003a02 <USART_u8SendBufferSynch>:
 * @param Copy_pvBufferArr	A pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return Error State.
 */
uint8 USART_u8SendBufferSynch(const void *Copy_pvBufferArr, uint8 Copy_u8BufferSize)
{
    3a02:	df 93       	push	r29
    3a04:	cf 93       	push	r28
    3a06:	00 d0       	rcall	.+0      	; 0x3a08 <USART_u8SendBufferSynch+0x6>
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <USART_u8SendBufferSynch+0x8>
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <USART_u8SendBufferSynch+0xa>
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	9d 83       	std	Y+5, r25	; 0x05
    3a12:	8c 83       	std	Y+4, r24	; 0x04
    3a14:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3a16:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    3a18:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    3a1a:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pvBufferArr != NULL)
    3a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	79 f1       	breq	.+94     	; 0x3a82 <USART_u8SendBufferSynch+0x80>
	{
		if(USART_u8TransmitBusyState == IDLE)
    3a24:	80 91 9f 01 	lds	r24, 0x019F
    3a28:	88 23       	and	r24, r24
    3a2a:	41 f5       	brne	.+80     	; 0x3a7c <USART_u8SendBufferSynch+0x7a>
		{
			/*Inform Others that transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	80 93 9f 01 	sts	0x019F, r24

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	80 93 a1 01 	sts	0x01A1, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    3a38:	19 82       	std	Y+1, r1	; 0x01
    3a3a:	17 c0       	rjmp	.+46     	; 0x3a6a <USART_u8SendBufferSynch+0x68>
			{
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
				/*Transmit each element with function USART_u8Send*/
				Local_u8ErrorFounder = USART_u8Send((uint8) (*((uint8 *) Copy_pvBufferArr + Local_u8Counter)));
    3a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a40:	89 81       	ldd	r24, Y+1	; 0x01
    3a42:	88 2f       	mov	r24, r24
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	f9 01       	movw	r30, r18
    3a48:	e8 0f       	add	r30, r24
    3a4a:	f9 1f       	adc	r31, r25
    3a4c:	80 81       	ld	r24, Z
    3a4e:	88 2f       	mov	r24, r24
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	0e 94 3a 1c 	call	0x3874	; 0x3874 <USART_u8Send>
    3a56:	8a 83       	std	Y+2, r24	; 0x02
				Local_u8ErrorFounder = USART_u8Send(*((uint16 *) Copy_pvBufferArr + Local_u8Counter));

#endif

				/*Check that the transmission operation goes well*/
				if(Local_u8ErrorFounder != OK)
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	88 23       	and	r24, r24
    3a5c:	19 f0       	breq	.+6      	; 0x3a64 <USART_u8SendBufferSynch+0x62>
				{
					Local_u8ErrorState = NOK;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	8b 83       	std	Y+3, r24	; 0x03
    3a62:	07 c0       	rjmp	.+14     	; 0x3a72 <USART_u8SendBufferSynch+0x70>

			/*Inform function USART_u8Send that I am the caller*/
			USART_u8TransmitCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	8f 5f       	subi	r24, 0xFF	; 255
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	99 81       	ldd	r25, Y+1	; 0x01
    3a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a6e:	98 17       	cp	r25, r24
    3a70:	28 f3       	brcs	.-54     	; 0x3a3c <USART_u8SendBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Send that main is the caller from now*/
			USART_u8TransmitCallSrc = MAIN_CALL;
    3a72:	10 92 a1 01 	sts	0x01A1, r1

			/*Reset busy flag to be idle*/
			USART_u8TransmitBusyState = IDLE;
    3a76:	10 92 9f 01 	sts	0x019F, r1
    3a7a:	05 c0       	rjmp	.+10     	; 0x3a86 <USART_u8SendBufferSynch+0x84>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3a7c:	84 e0       	ldi	r24, 0x04	; 4
    3a7e:	8b 83       	std	Y+3, r24	; 0x03
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <USART_u8SendBufferSynch+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3a86:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a88:	26 96       	adiw	r28, 0x06	; 6
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <USART_u8ReceiveBufferSynch>:
 * @param Copy_pu16BufferArr	A pointer to buffer array to be transmitted.
 * @param Copy_u8BufferSize Size of the buffer array.
 * @return Error State.
 */
uint8 USART_u8ReceiveBufferSynch(uint16 *Copy_pu16BufferArr, uint8 Copy_u8BufferSize)
{
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	00 d0       	rcall	.+0      	; 0x3aa0 <USART_u8ReceiveBufferSynch+0x6>
    3aa0:	00 d0       	rcall	.+0      	; 0x3aa2 <USART_u8ReceiveBufferSynch+0x8>
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <USART_u8ReceiveBufferSynch+0xa>
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	9d 83       	std	Y+5, r25	; 0x05
    3aaa:	8c 83       	std	Y+4, r24	; 0x04
    3aac:	6e 83       	std	Y+6, r22	; 0x06
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3aae:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Local_u8ErrorFounder = OK;
    3ab0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter = 0u;
    3ab2:	19 82       	std	Y+1, r1	; 0x01

	/*Validate the pointer*/
	if(Copy_pu16BufferArr != NULL)
    3ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ab8:	00 97       	sbiw	r24, 0x00	; 0
    3aba:	71 f1       	breq	.+92     	; 0x3b18 <USART_u8ReceiveBufferSynch+0x7e>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    3abc:	80 91 a0 01 	lds	r24, 0x01A0
    3ac0:	88 23       	and	r24, r24
    3ac2:	39 f5       	brne	.+78     	; 0x3b12 <USART_u8ReceiveBufferSynch+0x78>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	80 93 a0 01 	sts	0x01A0, r24

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	80 93 a2 01 	sts	0x01A2, r24

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    3ad0:	19 82       	std	Y+1, r1	; 0x01
    3ad2:	16 c0       	rjmp	.+44     	; 0x3b00 <USART_u8ReceiveBufferSynch+0x66>
			{
				/*Transmit each element with function USART_u8Transmit*/
				Local_u8ErrorFounder = USART_u8Receive(&Copy_pu16BufferArr[Local_u8Counter]);
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	88 2f       	mov	r24, r24
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	9c 01       	movw	r18, r24
    3adc:	22 0f       	add	r18, r18
    3ade:	33 1f       	adc	r19, r19
    3ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae4:	82 0f       	add	r24, r18
    3ae6:	93 1f       	adc	r25, r19
    3ae8:	0e 94 9c 1c 	call	0x3938	; 0x3938 <USART_u8Receive>
    3aec:	8a 83       	std	Y+2, r24	; 0x02

				/*Check that the Receive operation goes well*/
				if(Local_u8ErrorFounder != OK)
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	88 23       	and	r24, r24
    3af2:	19 f0       	breq	.+6      	; 0x3afa <USART_u8ReceiveBufferSynch+0x60>
				{
					Local_u8ErrorState = NOK;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	8b 83       	std	Y+3, r24	; 0x03
    3af8:	07 c0       	rjmp	.+14     	; 0x3b08 <USART_u8ReceiveBufferSynch+0x6e>

			/*Inform function USART_u8Receive that I am the caller*/
			USART_u8ReceiveCallSrc = SYNCH_FUNC_CALL;

			/*Pass over all the buffer elements*/
			for(Local_u8Counter = 0u; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	8f 5f       	subi	r24, 0xFF	; 255
    3afe:	89 83       	std	Y+1, r24	; 0x01
    3b00:	99 81       	ldd	r25, Y+1	; 0x01
    3b02:	8e 81       	ldd	r24, Y+6	; 0x06
    3b04:	98 17       	cp	r25, r24
    3b06:	30 f3       	brcs	.-52     	; 0x3ad4 <USART_u8ReceiveBufferSynch+0x3a>
					break;
				}
			}

			/*Inform function USART_u8Receive that main is the caller from now*/
			USART_u8ReceiveCallSrc = MAIN_CALL;
    3b08:	10 92 a2 01 	sts	0x01A2, r1

			/*Reset busy flag to be idle*/
			USART_u8ReceiveBusyState = IDLE;
    3b0c:	10 92 a0 01 	sts	0x01A0, r1
    3b10:	05 c0       	rjmp	.+10     	; 0x3b1c <USART_u8ReceiveBufferSynch+0x82>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3b12:	84 e0       	ldi	r24, 0x04	; 4
    3b14:	8b 83       	std	Y+3, r24	; 0x03
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <USART_u8ReceiveBufferSynch+0x82>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	8b 83       	std	Y+3, r24	; 0x03
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3b1c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3b1e:	26 96       	adiw	r28, 0x06	; 6
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <USART_u8SendBufferAsynch>:
 * @param Copy_u8BufferSize	Size of the buffer array.
 * @param Copy_pvNotificationFunc A pointer to the notification function.
 * @return Error state.
 */
uint8 USART_u8SendBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8BufferSize, void (*Copy_pvNotificationFunc)(void))
{
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <USART_u8SendBufferAsynch+0x6>
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <USART_u8SendBufferAsynch+0x8>
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <USART_u8SendBufferAsynch+0xa>
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	9b 83       	std	Y+3, r25	; 0x03
    3b40:	8a 83       	std	Y+2, r24	; 0x02
    3b42:	6c 83       	std	Y+4, r22	; 0x04
    3b44:	5e 83       	std	Y+6, r21	; 0x06
    3b46:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3b48:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    3b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	39 f1       	breq	.+78     	; 0x3ba0 <USART_u8SendBufferAsynch+0x70>
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
    3b54:	9e 81       	ldd	r25, Y+6	; 0x06
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	19 f1       	breq	.+70     	; 0x3ba0 <USART_u8SendBufferAsynch+0x70>
	{
		if(USART_u8TransmitBusyState == IDLE)
    3b5a:	80 91 9f 01 	lds	r24, 0x019F
    3b5e:	88 23       	and	r24, r24
    3b60:	e1 f4       	brne	.+56     	; 0x3b9a <USART_u8SendBufferAsynch+0x6a>
		{
			/*Inform Others that Transmit channel is busy from now*/
			USART_u8TransmitBusyState = BUSY;
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	80 93 9f 01 	sts	0x019F, r24

			/*Initialize buffer pointer as global*/
			USART_pvTransmitBufferArr = Copy_pvBufferArr;
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6c:	90 93 97 01 	sts	0x0197, r25
    3b70:	80 93 96 01 	sts	0x0196, r24

			/*Initialize buffer size as global*/
			USART_u8TransmitBufferSize = Copy_u8BufferSize;
    3b74:	8c 81       	ldd	r24, Y+4	; 0x04
    3b76:	80 93 95 01 	sts	0x0195, r24

			/*Initialize notification function as global*/
			USART_pvTransmitNotificationFunc = Copy_pvNotificationFunc;
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	90 93 94 01 	sts	0x0194, r25
    3b82:	80 93 93 01 	sts	0x0193, r24

			/*Set the buffer counter to 0*/
			USART_u8TransmitBufferCounter = 0u;
    3b86:	10 92 98 01 	sts	0x0198, r1

			/*Enable USART Data Register Empty Interrupt*/
			SET_BIT(UCSRB,UCSRB_UDRIE);
    3b8a:	aa e2       	ldi	r26, 0x2A	; 42
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	ea e2       	ldi	r30, 0x2A	; 42
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	80 62       	ori	r24, 0x20	; 32
    3b96:	8c 93       	st	X, r24
    3b98:	05 c0       	rjmp	.+10     	; 0x3ba4 <USART_u8SendBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3b9a:	84 e0       	ldi	r24, 0x04	; 4
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <USART_u8SendBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ba6:	26 96       	adiw	r28, 0x06	; 6
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <USART_u8ReceiveBufferAsynch>:
 * @param Copy_u8Bufferize Size of the buffer array.
 * @param Copy_pvNotificationFunc A pointer to the notification function.
 * @return Error State.
 */
uint8 USART_u8ReceiveBufferAsynch(void *Copy_pvBufferArr, uint8 Copy_u8Bufferize, void (*Copy_pvNotificationFunc)(void))
{
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	00 d0       	rcall	.+0      	; 0x3bbe <USART_u8ReceiveBufferAsynch+0x6>
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <USART_u8ReceiveBufferAsynch+0x8>
    3bc0:	00 d0       	rcall	.+0      	; 0x3bc2 <USART_u8ReceiveBufferAsynch+0xa>
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	9b 83       	std	Y+3, r25	; 0x03
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
    3bca:	6c 83       	std	Y+4, r22	; 0x04
    3bcc:	5e 83       	std	Y+6, r21	; 0x06
    3bce:	4d 83       	std	Y+5, r20	; 0x05
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3bd0:	19 82       	std	Y+1, r1	; 0x01

	/*Validate Pointers passed*/
	if((Copy_pvBufferArr != NULL) && (Copy_pvNotificationFunc != NULL))
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	39 f1       	breq	.+78     	; 0x3c28 <USART_u8ReceiveBufferAsynch+0x70>
    3bda:	8d 81       	ldd	r24, Y+5	; 0x05
    3bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	19 f1       	breq	.+70     	; 0x3c28 <USART_u8ReceiveBufferAsynch+0x70>
	{
		if(USART_u8ReceiveBusyState == IDLE)
    3be2:	80 91 a0 01 	lds	r24, 0x01A0
    3be6:	88 23       	and	r24, r24
    3be8:	e1 f4       	brne	.+56     	; 0x3c22 <USART_u8ReceiveBufferAsynch+0x6a>
		{
			/*Inform Others that Receive channel is busy from now*/
			USART_u8ReceiveBusyState = BUSY;
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	80 93 a0 01 	sts	0x01A0, r24

			/*Initialize buffer pointer as global*/
			USART_pvReceiveBufferArr = Copy_pvBufferArr;
    3bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf4:	90 93 9d 01 	sts	0x019D, r25
    3bf8:	80 93 9c 01 	sts	0x019C, r24

			/*Initialize buffer size as global*/
			USART_u8ReceiveBufferSize = Copy_u8Bufferize;
    3bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfe:	80 93 9b 01 	sts	0x019B, r24

			/*Initialize notification function as global*/
			USART_pvReceiveNotificationFunc = Copy_pvNotificationFunc;
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	90 93 9a 01 	sts	0x019A, r25
    3c0a:	80 93 99 01 	sts	0x0199, r24

			/*Set the buffer counter to 0*/
			USART_u8ReceiveBufferCounter = 0u;
    3c0e:	10 92 9e 01 	sts	0x019E, r1

			/*Enable USART RX Complete Interrupt*/
			SET_BIT(UCSRB,UCSRB_RXCIE);
    3c12:	aa e2       	ldi	r26, 0x2A	; 42
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	ea e2       	ldi	r30, 0x2A	; 42
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	80 68       	ori	r24, 0x80	; 128
    3c1e:	8c 93       	st	X, r24
    3c20:	05 c0       	rjmp	.+10     	; 0x3c2c <USART_u8ReceiveBufferAsynch+0x74>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
    3c22:	84 e0       	ldi	r24, 0x04	; 4
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <USART_u8ReceiveBufferAsynch+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    3c28:	82 e0       	ldi	r24, 0x02	; 2
    3c2a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c2e:	26 96       	adiw	r28, 0x06	; 6
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <__vector_13>:
/**
 * @brief USART Receive Complete ISR.
 */
void __vector_13 (void) __attribute((signal));
void __vector_13 (void)
{
    3c40:	1f 92       	push	r1
    3c42:	0f 92       	push	r0
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	0f 92       	push	r0
    3c48:	11 24       	eor	r1, r1
    3c4a:	2f 93       	push	r18
    3c4c:	3f 93       	push	r19
    3c4e:	4f 93       	push	r20
    3c50:	5f 93       	push	r21
    3c52:	6f 93       	push	r22
    3c54:	7f 93       	push	r23
    3c56:	8f 93       	push	r24
    3c58:	9f 93       	push	r25
    3c5a:	af 93       	push	r26
    3c5c:	bf 93       	push	r27
    3c5e:	ef 93       	push	r30
    3c60:	ff 93       	push	r31
    3c62:	df 93       	push	r29
    3c64:	cf 93       	push	r28
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
	/*Return data received*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	*((uint8 *) USART_pvReceiveBufferArr + USART_u8ReceiveBufferCounter) = UDR;
    3c6a:	80 91 9c 01 	lds	r24, 0x019C
    3c6e:	90 91 9d 01 	lds	r25, 0x019D
    3c72:	9c 01       	movw	r18, r24
    3c74:	80 91 9e 01 	lds	r24, 0x019E
    3c78:	88 2f       	mov	r24, r24
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	d9 01       	movw	r26, r18
    3c7e:	a8 0f       	add	r26, r24
    3c80:	b9 1f       	adc	r27, r25
    3c82:	ec e2       	ldi	r30, 0x2C	; 44
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	8c 93       	st	X, r24
	case 1u: SET_BIT(*(((uint16 *) USART_pvReceiveBufferArr) + USART_u8ReceiveBufferCounter),9u);	break;
	}
#endif

	/*Increment Receive Buffer Counter*/
	USART_u8ReceiveBufferCounter++;
    3c8a:	80 91 9e 01 	lds	r24, 0x019E
    3c8e:	8f 5f       	subi	r24, 0xFF	; 255
    3c90:	80 93 9e 01 	sts	0x019E, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8ReceiveBufferCounter == USART_u8ReceiveBufferSize)
    3c94:	90 91 9e 01 	lds	r25, 0x019E
    3c98:	80 91 9b 01 	lds	r24, 0x019B
    3c9c:	98 17       	cp	r25, r24
    3c9e:	a1 f4       	brne	.+40     	; 0x3cc8 <__vector_13+0x88>
	{
		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_RXCIE);
    3ca0:	aa e2       	ldi	r26, 0x2A	; 42
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	ea e2       	ldi	r30, 0x2A	; 42
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	80 81       	ld	r24, Z
    3caa:	8f 77       	andi	r24, 0x7F	; 127
    3cac:	8c 93       	st	X, r24

		/*Reset busy flag for receive channel to be idle*/
		USART_u8ReceiveBusyState = IDLE;
    3cae:	10 92 a0 01 	sts	0x01A0, r1

		/*Call Notification Function*/
		if(USART_pvReceiveNotificationFunc != NULL)
    3cb2:	80 91 99 01 	lds	r24, 0x0199
    3cb6:	90 91 9a 01 	lds	r25, 0x019A
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	29 f0       	breq	.+10     	; 0x3cc8 <__vector_13+0x88>
		{
			USART_pvReceiveNotificationFunc();
    3cbe:	e0 91 99 01 	lds	r30, 0x0199
    3cc2:	f0 91 9a 01 	lds	r31, 0x019A
    3cc6:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	ff 91       	pop	r31
    3cce:	ef 91       	pop	r30
    3cd0:	bf 91       	pop	r27
    3cd2:	af 91       	pop	r26
    3cd4:	9f 91       	pop	r25
    3cd6:	8f 91       	pop	r24
    3cd8:	7f 91       	pop	r23
    3cda:	6f 91       	pop	r22
    3cdc:	5f 91       	pop	r21
    3cde:	4f 91       	pop	r20
    3ce0:	3f 91       	pop	r19
    3ce2:	2f 91       	pop	r18
    3ce4:	0f 90       	pop	r0
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	0f 90       	pop	r0
    3cea:	1f 90       	pop	r1
    3cec:	18 95       	reti

00003cee <__vector_14>:
/**
 * @brief USART Data Register Empty ISR.
 */
void __vector_14 (void) __attribute((signal));
void __vector_14 (void)
{
    3cee:	1f 92       	push	r1
    3cf0:	0f 92       	push	r0
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	0f 92       	push	r0
    3cf6:	11 24       	eor	r1, r1
    3cf8:	2f 93       	push	r18
    3cfa:	3f 93       	push	r19
    3cfc:	4f 93       	push	r20
    3cfe:	5f 93       	push	r21
    3d00:	6f 93       	push	r22
    3d02:	7f 93       	push	r23
    3d04:	8f 93       	push	r24
    3d06:	9f 93       	push	r25
    3d08:	af 93       	push	r26
    3d0a:	bf 93       	push	r27
    3d0c:	ef 93       	push	r30
    3d0e:	ff 93       	push	r31
    3d10:	df 93       	push	r29
    3d12:	cf 93       	push	r28
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
	/*Set the data to the transmit register*/
#if USART_u8CHAR_SIZE < NINE_BITS_CHAR_SIZE
	UDR = *(((uint8 *) USART_pvTransmitBufferArr) + USART_u8TransmitBufferCounter);
    3d18:	ac e2       	ldi	r26, 0x2C	; 44
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	80 91 96 01 	lds	r24, 0x0196
    3d20:	90 91 97 01 	lds	r25, 0x0197
    3d24:	9c 01       	movw	r18, r24
    3d26:	80 91 98 01 	lds	r24, 0x0198
    3d2a:	88 2f       	mov	r24, r24
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	f9 01       	movw	r30, r18
    3d30:	e8 0f       	add	r30, r24
    3d32:	f9 1f       	adc	r31, r25
    3d34:	80 81       	ld	r24, Z
    3d36:	8c 93       	st	X, r24
	case 1u: SET_BIT(UCSRB,UCSRB_TXB8);	break;
	}
#endif

	/*Increment Transmit Buffer Counter*/
	USART_u8TransmitBufferCounter++;
    3d38:	80 91 98 01 	lds	r24, 0x0198
    3d3c:	8f 5f       	subi	r24, 0xFF	; 255
    3d3e:	80 93 98 01 	sts	0x0198, r24

	/*If USART reached the end of the buffer*/
	if(USART_u8TransmitBufferCounter == USART_u8TransmitBufferSize)
    3d42:	90 91 98 01 	lds	r25, 0x0198
    3d46:	80 91 95 01 	lds	r24, 0x0195
    3d4a:	98 17       	cp	r25, r24
    3d4c:	a1 f4       	brne	.+40     	; 0x3d76 <__vector_14+0x88>
	{
		/*Disable USART Data Register Empty Interrupt*/
		CLR_BIT(UCSRB,UCSRB_UDRIE);
    3d4e:	aa e2       	ldi	r26, 0x2A	; 42
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	ea e2       	ldi	r30, 0x2A	; 42
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
    3d58:	8f 7d       	andi	r24, 0xDF	; 223
    3d5a:	8c 93       	st	X, r24

		/*Reset busy flag for transmit channel to be idle*/
		USART_u8TransmitBusyState = IDLE;
    3d5c:	10 92 9f 01 	sts	0x019F, r1

		/*Call Notification Function*/
		if(USART_pvTransmitNotificationFunc != NULL)
    3d60:	80 91 93 01 	lds	r24, 0x0193
    3d64:	90 91 94 01 	lds	r25, 0x0194
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	29 f0       	breq	.+10     	; 0x3d76 <__vector_14+0x88>
		{
			USART_pvTransmitNotificationFunc();
    3d6c:	e0 91 93 01 	lds	r30, 0x0193
    3d70:	f0 91 94 01 	lds	r31, 0x0194
    3d74:	09 95       	icall
		else
		{
			/*Do nothing*/
		}
	}
}
    3d76:	cf 91       	pop	r28
    3d78:	df 91       	pop	r29
    3d7a:	ff 91       	pop	r31
    3d7c:	ef 91       	pop	r30
    3d7e:	bf 91       	pop	r27
    3d80:	af 91       	pop	r26
    3d82:	9f 91       	pop	r25
    3d84:	8f 91       	pop	r24
    3d86:	7f 91       	pop	r23
    3d88:	6f 91       	pop	r22
    3d8a:	5f 91       	pop	r21
    3d8c:	4f 91       	pop	r20
    3d8e:	3f 91       	pop	r19
    3d90:	2f 91       	pop	r18
    3d92:	0f 90       	pop	r0
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	0f 90       	pop	r0
    3d98:	1f 90       	pop	r1
    3d9a:	18 95       	reti

00003d9c <__vector_15>:
/**
 * @brief USART transmission Complete ISR.
 */
void __vector_15 (void) __attribute((signal));
void __vector_15 (void)
{
    3d9c:	1f 92       	push	r1
    3d9e:	0f 92       	push	r0
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	0f 92       	push	r0
    3da4:	11 24       	eor	r1, r1
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62

}
    3dae:	cf 91       	pop	r28
    3db0:	df 91       	pop	r29
    3db2:	0f 90       	pop	r0
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	0f 90       	pop	r0
    3db8:	1f 90       	pop	r1
    3dba:	18 95       	reti

00003dbc <ULTSONIC_u8MeasureDistance>:
 * @param Copy_stUltsonicData Pointer to struct that carry the ultrasonic data.
 * @param Copy_u16Distance Pointer to return the distance in cm.
 * @return Error State.
 */
uint8 ULTSONIC_u8MeasureDistance(const ULTSONIC_t *Copy_stUltsonicData, uint16 *Copy_u16Distance)
{
    3dbc:	df 93       	push	r29
    3dbe:	cf 93       	push	r28
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	aa 97       	sbiw	r28, 0x2a	; 42
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	f8 94       	cli
    3dca:	de bf       	out	0x3e, r29	; 62
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	cd bf       	out	0x3d, r28	; 61
    3dd0:	98 a7       	std	Y+40, r25	; 0x28
    3dd2:	8f a3       	std	Y+39, r24	; 0x27
    3dd4:	7a a7       	std	Y+42, r23	; 0x2a
    3dd6:	69 a7       	std	Y+41, r22	; 0x29
	/*Define Variables*/
	uint8 Local_u8ErrorState = OK;
    3dd8:	1a a2       	std	Y+34, r1	; 0x22
	uint8 Local_u8ErrorFounder = OK;
    3dda:	19 a2       	std	Y+33, r1	; 0x21
	uint32 Local_u32EchoTime = 0u;
    3ddc:	1d 8e       	std	Y+29, r1	; 0x1d
    3dde:	1e 8e       	std	Y+30, r1	; 0x1e
    3de0:	1f 8e       	std	Y+31, r1	; 0x1f
    3de2:	18 a2       	std	Y+32, r1	; 0x20
	uint32 Local_u32TimeoutCounter = 0u;
    3de4:	19 8e       	std	Y+25, r1	; 0x19
    3de6:	1a 8e       	std	Y+26, r1	; 0x1a
    3de8:	1b 8e       	std	Y+27, r1	; 0x1b
    3dea:	1c 8e       	std	Y+28, r1	; 0x1c

	/*Initialize timer 1*/
	TIMER1_CFG_t Local_stTimer1Cfg;
	Local_stTimer1Cfg.ClkSelect = TIMER1_u8SYS_CLK_BY_8;
    3dec:	82 e0       	ldi	r24, 0x02	; 2
    3dee:	8b a3       	std	Y+35, r24	; 0x23
	Local_stTimer1Cfg.WGM = NORMAL_16_BITS;
    3df0:	1c a2       	std	Y+36, r1	; 0x24
	Local_stTimer1Cfg.OCAMode = OC_DISCONNECTED;
    3df2:	1d a2       	std	Y+37, r1	; 0x25
	Local_stTimer1Cfg.OCBMode = OC_DISCONNECTED;
    3df4:	1e a2       	std	Y+38, r1	; 0x26
	Local_u8ErrorFounder = TIMER1_u8Init(&Local_stTimer1Cfg);
    3df6:	ce 01       	movw	r24, r28
    3df8:	83 96       	adiw	r24, 0x23	; 35
    3dfa:	0e 94 a0 10 	call	0x2140	; 0x2140 <TIMER1_u8Init>
    3dfe:	89 a3       	std	Y+33, r24	; 0x21

	if(Local_u8ErrorFounder == OK)
    3e00:	89 a1       	ldd	r24, Y+33	; 0x21
    3e02:	88 23       	and	r24, r24
    3e04:	09 f0       	breq	.+2      	; 0x3e08 <ULTSONIC_u8MeasureDistance+0x4c>
    3e06:	bb c1       	rjmp	.+886    	; 0x417e <ULTSONIC_u8MeasureDistance+0x3c2>
	{
		/*Initialize and Enable Capture Unit and Overflow Interrupts of timer 1*/
		TIMERS_u8SetCallBack(TIMER1_OVF, ULTSONIC_voidOvfISR);
    3e08:	2c ef       	ldi	r18, 0xFC	; 252
    3e0a:	30 e2       	ldi	r19, 0x20	; 32
    3e0c:	82 e0       	ldi	r24, 0x02	; 2
    3e0e:	b9 01       	movw	r22, r18
    3e10:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <TIMERS_u8SetCallBack>
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_RISING_EDGE);
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	0e 94 38 18 	call	0x3070	; 0x3070 <TIMER1_u8SetInputCaptTriggerSrc>
		TIMERS_u8SetCallBack(TIMER1_CAPT, ULTSONIC_voidCaptureISR);
    3e1a:	2b ec       	ldi	r18, 0xCB	; 203
    3e1c:	30 e2       	ldi	r19, 0x20	; 32
    3e1e:	85 e0       	ldi	r24, 0x05	; 5
    3e20:	b9 01       	movw	r22, r18
    3e22:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <TIMERS_u8SetCallBack>
		TIMERS_u8IntEnable(TIMER1_CAPT);
    3e26:	85 e0       	ldi	r24, 0x05	; 5
    3e28:	0e 94 18 16 	call	0x2c30	; 0x2c30 <TIMERS_u8IntEnable>

		/*Trigger the ultrasonic to return its echo*/
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_HIGH);
    3e2c:	ef a1       	ldd	r30, Y+39	; 0x27
    3e2e:	f8 a5       	ldd	r31, Y+40	; 0x28
    3e30:	80 81       	ld	r24, Z
    3e32:	ef a1       	ldd	r30, Y+39	; 0x27
    3e34:	f8 a5       	ldd	r31, Y+40	; 0x28
    3e36:	91 81       	ldd	r25, Z+1	; 0x01
    3e38:	69 2f       	mov	r22, r25
    3e3a:	41 e0       	ldi	r20, 0x01	; 1
    3e3c:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a8 ec       	ldi	r26, 0xC8	; 200
    3e46:	b2 e4       	ldi	r27, 0x42	; 66
    3e48:	8d 8b       	std	Y+21, r24	; 0x15
    3e4a:	9e 8b       	std	Y+22, r25	; 0x16
    3e4c:	af 8b       	std	Y+23, r26	; 0x17
    3e4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e50:	6d 89       	ldd	r22, Y+21	; 0x15
    3e52:	7e 89       	ldd	r23, Y+22	; 0x16
    3e54:	8f 89       	ldd	r24, Y+23	; 0x17
    3e56:	98 8d       	ldd	r25, Y+24	; 0x18
    3e58:	2b ea       	ldi	r18, 0xAB	; 171
    3e5a:	3a ea       	ldi	r19, 0xAA	; 170
    3e5c:	4a e2       	ldi	r20, 0x2A	; 42
    3e5e:	50 e4       	ldi	r21, 0x40	; 64
    3e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	89 8b       	std	Y+17, r24	; 0x11
    3e6a:	9a 8b       	std	Y+18, r25	; 0x12
    3e6c:	ab 8b       	std	Y+19, r26	; 0x13
    3e6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3e70:	69 89       	ldd	r22, Y+17	; 0x11
    3e72:	7a 89       	ldd	r23, Y+18	; 0x12
    3e74:	8b 89       	ldd	r24, Y+19	; 0x13
    3e76:	9c 89       	ldd	r25, Y+20	; 0x14
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e8       	ldi	r20, 0x80	; 128
    3e7e:	5f e3       	ldi	r21, 0x3F	; 63
    3e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e84:	88 23       	and	r24, r24
    3e86:	1c f4       	brge	.+6      	; 0x3e8e <ULTSONIC_u8MeasureDistance+0xd2>
		__ticks = 1;
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	88 8b       	std	Y+16, r24	; 0x10
    3e8c:	91 c0       	rjmp	.+290    	; 0x3fb0 <ULTSONIC_u8MeasureDistance+0x1f4>
	else if (__tmp > 255)
    3e8e:	69 89       	ldd	r22, Y+17	; 0x11
    3e90:	7a 89       	ldd	r23, Y+18	; 0x12
    3e92:	8b 89       	ldd	r24, Y+19	; 0x13
    3e94:	9c 89       	ldd	r25, Y+20	; 0x14
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4f e7       	ldi	r20, 0x7F	; 127
    3e9c:	53 e4       	ldi	r21, 0x43	; 67
    3e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ea2:	18 16       	cp	r1, r24
    3ea4:	0c f0       	brlt	.+2      	; 0x3ea8 <ULTSONIC_u8MeasureDistance+0xec>
    3ea6:	7b c0       	rjmp	.+246    	; 0x3f9e <ULTSONIC_u8MeasureDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
    3ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    3eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    3eac:	8f 89       	ldd	r24, Y+23	; 0x17
    3eae:	98 8d       	ldd	r25, Y+24	; 0x18
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	4a e7       	ldi	r20, 0x7A	; 122
    3eb6:	54 e4       	ldi	r21, 0x44	; 68
    3eb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	8c 87       	std	Y+12, r24	; 0x0c
    3ec2:	9d 87       	std	Y+13, r25	; 0x0d
    3ec4:	ae 87       	std	Y+14, r26	; 0x0e
    3ec6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec8:	6c 85       	ldd	r22, Y+12	; 0x0c
    3eca:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	4a ef       	ldi	r20, 0xFA	; 250
    3ed6:	54 e4       	ldi	r21, 0x44	; 68
    3ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	88 87       	std	Y+8, r24	; 0x08
    3ee2:	99 87       	std	Y+9, r25	; 0x09
    3ee4:	aa 87       	std	Y+10, r26	; 0x0a
    3ee6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ee8:	68 85       	ldd	r22, Y+8	; 0x08
    3eea:	79 85       	ldd	r23, Y+9	; 0x09
    3eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e8       	ldi	r20, 0x80	; 128
    3ef6:	5f e3       	ldi	r21, 0x3F	; 63
    3ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3efc:	88 23       	and	r24, r24
    3efe:	2c f4       	brge	.+10     	; 0x3f0a <ULTSONIC_u8MeasureDistance+0x14e>
		__ticks = 1;
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	9f 83       	std	Y+7, r25	; 0x07
    3f06:	8e 83       	std	Y+6, r24	; 0x06
    3f08:	3f c0       	rjmp	.+126    	; 0x3f88 <ULTSONIC_u8MeasureDistance+0x1cc>
	else if (__tmp > 65535)
    3f0a:	68 85       	ldd	r22, Y+8	; 0x08
    3f0c:	79 85       	ldd	r23, Y+9	; 0x09
    3f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f10:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	3f ef       	ldi	r19, 0xFF	; 255
    3f16:	4f e7       	ldi	r20, 0x7F	; 127
    3f18:	57 e4       	ldi	r21, 0x47	; 71
    3f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1e:	18 16       	cp	r1, r24
    3f20:	4c f5       	brge	.+82     	; 0x3f74 <ULTSONIC_u8MeasureDistance+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f22:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f24:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f26:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f28:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	9f 83       	std	Y+7, r25	; 0x07
    3f48:	8e 83       	std	Y+6, r24	; 0x06
    3f4a:	0f c0       	rjmp	.+30     	; 0x3f6a <ULTSONIC_u8MeasureDistance+0x1ae>
    3f4c:	88 ec       	ldi	r24, 0xC8	; 200
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	9d 83       	std	Y+5, r25	; 0x05
    3f52:	8c 83       	std	Y+4, r24	; 0x04
    3f54:	8c 81       	ldd	r24, Y+4	; 0x04
    3f56:	9d 81       	ldd	r25, Y+5	; 0x05
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <ULTSONIC_u8MeasureDistance+0x19c>
    3f5c:	9d 83       	std	Y+5, r25	; 0x05
    3f5e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f60:	8e 81       	ldd	r24, Y+6	; 0x06
    3f62:	9f 81       	ldd	r25, Y+7	; 0x07
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	9f 83       	std	Y+7, r25	; 0x07
    3f68:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f6e:	00 97       	sbiw	r24, 0x00	; 0
    3f70:	69 f7       	brne	.-38     	; 0x3f4c <ULTSONIC_u8MeasureDistance+0x190>
    3f72:	24 c0       	rjmp	.+72     	; 0x3fbc <ULTSONIC_u8MeasureDistance+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f74:	68 85       	ldd	r22, Y+8	; 0x08
    3f76:	79 85       	ldd	r23, Y+9	; 0x09
    3f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9f 83       	std	Y+7, r25	; 0x07
    3f86:	8e 83       	std	Y+6, r24	; 0x06
    3f88:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f8c:	9b 83       	std	Y+3, r25	; 0x03
    3f8e:	8a 83       	std	Y+2, r24	; 0x02
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	9b 81       	ldd	r25, Y+3	; 0x03
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <ULTSONIC_u8MeasureDistance+0x1d8>
    3f98:	9b 83       	std	Y+3, r25	; 0x03
    3f9a:	8a 83       	std	Y+2, r24	; 0x02
    3f9c:	0f c0       	rjmp	.+30     	; 0x3fbc <ULTSONIC_u8MeasureDistance+0x200>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f9e:	69 89       	ldd	r22, Y+17	; 0x11
    3fa0:	7a 89       	ldd	r23, Y+18	; 0x12
    3fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	88 8b       	std	Y+16, r24	; 0x10
    3fb0:	88 89       	ldd	r24, Y+16	; 0x10
    3fb2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	8a 95       	dec	r24
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <ULTSONIC_u8MeasureDistance+0x1fa>
    3fba:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);
    3fbc:	ef a1       	ldd	r30, Y+39	; 0x27
    3fbe:	f8 a5       	ldd	r31, Y+40	; 0x28
    3fc0:	80 81       	ld	r24, Z
    3fc2:	ef a1       	ldd	r30, Y+39	; 0x27
    3fc4:	f8 a5       	ldd	r31, Y+40	; 0x28
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	69 2f       	mov	r22, r25
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
    3fd0:	0b c0       	rjmp	.+22     	; 0x3fe8 <ULTSONIC_u8MeasureDistance+0x22c>


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    3fd2:	89 8d       	ldd	r24, Y+25	; 0x19
    3fd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3fd6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3fd8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	a1 1d       	adc	r26, r1
    3fde:	b1 1d       	adc	r27, r1
    3fe0:	89 8f       	std	Y+25, r24	; 0x19
    3fe2:	9a 8f       	std	Y+26, r25	; 0x1a
    3fe4:	ab 8f       	std	Y+27, r26	; 0x1b
    3fe6:	bc 8f       	std	Y+28, r27	; 0x1c
		_delay_us(100);
		DIO_u8SetPinValue(Copy_stUltsonicData -> TrigPort, Copy_stUltsonicData -> TrigPin, DIO_u8PIN_LOW);


		/*Polling until the echo time is measured*/
		while(((ULTSONIC_u16Capture1 == 0u) || (ULTSONIC_u16Capture2 == 0u)) && (Local_u32TimeoutCounter < ULTSOINC_u32TIMEOUT))
    3fe8:	80 91 a3 01 	lds	r24, 0x01A3
    3fec:	90 91 a4 01 	lds	r25, 0x01A4
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	31 f0       	breq	.+12     	; 0x4000 <ULTSONIC_u8MeasureDistance+0x244>
    3ff4:	80 91 a5 01 	lds	r24, 0x01A5
    3ff8:	90 91 a6 01 	lds	r25, 0x01A6
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	61 f4       	brne	.+24     	; 0x4018 <ULTSONIC_u8MeasureDistance+0x25c>
    4000:	89 8d       	ldd	r24, Y+25	; 0x19
    4002:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4004:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4006:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4008:	80 35       	cpi	r24, 0x50	; 80
    400a:	23 ec       	ldi	r18, 0xC3	; 195
    400c:	92 07       	cpc	r25, r18
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	a2 07       	cpc	r26, r18
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	b2 07       	cpc	r27, r18
    4016:	e8 f2       	brcs	.-70     	; 0x3fd2 <ULTSONIC_u8MeasureDistance+0x216>
		{
			Local_u32TimeoutCounter++;
		}

		/*Disable timer 1 and overflow interrupt of it*/
		TIMERS_u8IntDisable(TIMER1_OVF);
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <TIMERS_u8IntDisable>
		TIMERS_u8IntDisable(TIMER1_CAPT);
    401e:	85 e0       	ldi	r24, 0x05	; 5
    4020:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <TIMERS_u8IntDisable>
		TIMERS_u8Disable(TIMER1);
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <TIMERS_u8Disable>

		/*Check if there was overflow interrupts or not*/
		if(ULTSONIC_u16EchoOvfCounter == 0u)
    402a:	80 91 a9 01 	lds	r24, 0x01A9
    402e:	90 91 aa 01 	lds	r25, 0x01AA
    4032:	00 97       	sbiw	r24, 0x00	; 0
    4034:	a1 f4       	brne	.+40     	; 0x405e <ULTSONIC_u8MeasureDistance+0x2a2>
		{
			/*Calculate Echo Time in microseconds*/
			Local_u32EchoTime = ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1;
    4036:	20 91 a5 01 	lds	r18, 0x01A5
    403a:	30 91 a6 01 	lds	r19, 0x01A6
    403e:	80 91 a3 01 	lds	r24, 0x01A3
    4042:	90 91 a4 01 	lds	r25, 0x01A4
    4046:	a9 01       	movw	r20, r18
    4048:	48 1b       	sub	r20, r24
    404a:	59 0b       	sbc	r21, r25
    404c:	ca 01       	movw	r24, r20
    404e:	cc 01       	movw	r24, r24
    4050:	a0 e0       	ldi	r26, 0x00	; 0
    4052:	b0 e0       	ldi	r27, 0x00	; 0
    4054:	8d 8f       	std	Y+29, r24	; 0x1d
    4056:	9e 8f       	std	Y+30, r25	; 0x1e
    4058:	af 8f       	std	Y+31, r26	; 0x1f
    405a:	b8 a3       	std	Y+32, r27	; 0x20
    405c:	59 c0       	rjmp	.+178    	; 0x4110 <ULTSONIC_u8MeasureDistance+0x354>
		}
		else
		{
			/*Calculate Echo Time in microseconds*/
			if(ULTSONIC_u16Capture2 >= ULTSONIC_u16Capture1)
    405e:	20 91 a5 01 	lds	r18, 0x01A5
    4062:	30 91 a6 01 	lds	r19, 0x01A6
    4066:	80 91 a3 01 	lds	r24, 0x01A3
    406a:	90 91 a4 01 	lds	r25, 0x01A4
    406e:	28 17       	cp	r18, r24
    4070:	39 07       	cpc	r19, r25
    4072:	10 f1       	brcs	.+68     	; 0x40b8 <ULTSONIC_u8MeasureDistance+0x2fc>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture2 - ULTSONIC_u16Capture1) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    4074:	20 91 a5 01 	lds	r18, 0x01A5
    4078:	30 91 a6 01 	lds	r19, 0x01A6
    407c:	80 91 a3 01 	lds	r24, 0x01A3
    4080:	90 91 a4 01 	lds	r25, 0x01A4
    4084:	a9 01       	movw	r20, r18
    4086:	48 1b       	sub	r20, r24
    4088:	59 0b       	sbc	r21, r25
    408a:	ca 01       	movw	r24, r20
    408c:	9c 01       	movw	r18, r24
    408e:	40 e0       	ldi	r20, 0x00	; 0
    4090:	50 e0       	ldi	r21, 0x00	; 0
    4092:	80 91 a9 01 	lds	r24, 0x01A9
    4096:	90 91 aa 01 	lds	r25, 0x01AA
    409a:	cc 01       	movw	r24, r24
    409c:	a0 e0       	ldi	r26, 0x00	; 0
    409e:	b0 e0       	ldi	r27, 0x00	; 0
    40a0:	dc 01       	movw	r26, r24
    40a2:	99 27       	eor	r25, r25
    40a4:	88 27       	eor	r24, r24
    40a6:	82 0f       	add	r24, r18
    40a8:	93 1f       	adc	r25, r19
    40aa:	a4 1f       	adc	r26, r20
    40ac:	b5 1f       	adc	r27, r21
    40ae:	8d 8f       	std	Y+29, r24	; 0x1d
    40b0:	9e 8f       	std	Y+30, r25	; 0x1e
    40b2:	af 8f       	std	Y+31, r26	; 0x1f
    40b4:	b8 a3       	std	Y+32, r27	; 0x20
    40b6:	2c c0       	rjmp	.+88     	; 0x4110 <ULTSONIC_u8MeasureDistance+0x354>
			}
			else if(ULTSONIC_u16Capture2 < ULTSONIC_u16Capture1)
    40b8:	20 91 a5 01 	lds	r18, 0x01A5
    40bc:	30 91 a6 01 	lds	r19, 0x01A6
    40c0:	80 91 a3 01 	lds	r24, 0x01A3
    40c4:	90 91 a4 01 	lds	r25, 0x01A4
    40c8:	28 17       	cp	r18, r24
    40ca:	39 07       	cpc	r19, r25
    40cc:	08 f5       	brcc	.+66     	; 0x4110 <ULTSONIC_u8MeasureDistance+0x354>
			{
				Local_u32EchoTime = (ULTSONIC_u16Capture1 - ULTSONIC_u16Capture2) + (ULTSONIC_u16EchoOvfCounter * 65536u);
    40ce:	20 91 a3 01 	lds	r18, 0x01A3
    40d2:	30 91 a4 01 	lds	r19, 0x01A4
    40d6:	80 91 a5 01 	lds	r24, 0x01A5
    40da:	90 91 a6 01 	lds	r25, 0x01A6
    40de:	a9 01       	movw	r20, r18
    40e0:	48 1b       	sub	r20, r24
    40e2:	59 0b       	sbc	r21, r25
    40e4:	ca 01       	movw	r24, r20
    40e6:	9c 01       	movw	r18, r24
    40e8:	40 e0       	ldi	r20, 0x00	; 0
    40ea:	50 e0       	ldi	r21, 0x00	; 0
    40ec:	80 91 a9 01 	lds	r24, 0x01A9
    40f0:	90 91 aa 01 	lds	r25, 0x01AA
    40f4:	cc 01       	movw	r24, r24
    40f6:	a0 e0       	ldi	r26, 0x00	; 0
    40f8:	b0 e0       	ldi	r27, 0x00	; 0
    40fa:	dc 01       	movw	r26, r24
    40fc:	99 27       	eor	r25, r25
    40fe:	88 27       	eor	r24, r24
    4100:	82 0f       	add	r24, r18
    4102:	93 1f       	adc	r25, r19
    4104:	a4 1f       	adc	r26, r20
    4106:	b5 1f       	adc	r27, r21
    4108:	8d 8f       	std	Y+29, r24	; 0x1d
    410a:	9e 8f       	std	Y+30, r25	; 0x1e
    410c:	af 8f       	std	Y+31, r26	; 0x1f
    410e:	b8 a3       	std	Y+32, r27	; 0x20
			}
		}

		/*Measure Distance using Echo Time*/
		*Copy_u16Distance = (((f32) Local_u32EchoTime / 2.0) * (34.0 / 1000.0));
    4110:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4112:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4116:	98 a1       	ldd	r25, Y+32	; 0x20
    4118:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	bc 01       	movw	r22, r24
    4122:	cd 01       	movw	r24, r26
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	50 e4       	ldi	r21, 0x40	; 64
    412c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	bc 01       	movw	r22, r24
    4136:	cd 01       	movw	r24, r26
    4138:	26 e9       	ldi	r18, 0x96	; 150
    413a:	33 e4       	ldi	r19, 0x43	; 67
    413c:	4b e0       	ldi	r20, 0x0B	; 11
    413e:	5d e3       	ldi	r21, 0x3D	; 61
    4140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	bc 01       	movw	r22, r24
    414a:	cd 01       	movw	r24, r26
    414c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	e9 a5       	ldd	r30, Y+41	; 0x29
    4156:	fa a5       	ldd	r31, Y+42	; 0x2a
    4158:	91 83       	std	Z+1, r25	; 0x01
    415a:	80 83       	st	Z, r24

		/*Reset the global variables*/
		ULTSONIC_u16Capture1 = 0u;
    415c:	10 92 a4 01 	sts	0x01A4, r1
    4160:	10 92 a3 01 	sts	0x01A3, r1
		ULTSONIC_u16Capture2 = 0u;
    4164:	10 92 a6 01 	sts	0x01A6, r1
    4168:	10 92 a5 01 	sts	0x01A5, r1
		ULTSONIC_u16OvfCounter = 0u;
    416c:	10 92 a8 01 	sts	0x01A8, r1
    4170:	10 92 a7 01 	sts	0x01A7, r1
		ULTSONIC_u16EchoOvfCounter = 0u;
    4174:	10 92 aa 01 	sts	0x01AA, r1
    4178:	10 92 a9 01 	sts	0x01A9, r1
    417c:	02 c0       	rjmp	.+4      	; 0x4182 <ULTSONIC_u8MeasureDistance+0x3c6>
	}
	else
	{
		Local_u8ErrorState = NOK;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	8a a3       	std	Y+34, r24	; 0x22
	}

	/*Return Error State*/
	return Local_u8ErrorState;
    4182:	8a a1       	ldd	r24, Y+34	; 0x22
}
    4184:	aa 96       	adiw	r28, 0x2a	; 42
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	de bf       	out	0x3e, r29	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	cd bf       	out	0x3d, r28	; 61
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <ULTSONIC_voidCaptureISR>:

/*Input Capture ISR*/
static void ULTSONIC_voidCaptureISR(void)
{
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    419e:	80 91 ab 01 	lds	r24, 0x01AB
    41a2:	8f 5f       	subi	r24, 0xFF	; 255
    41a4:	80 93 ab 01 	sts	0x01AB, r24

	if(Local_u8Counter == 1u)
    41a8:	80 91 ab 01 	lds	r24, 0x01AB
    41ac:	81 30       	cpi	r24, 0x01	; 1
    41ae:	69 f4       	brne	.+26     	; 0x41ca <ULTSONIC_voidCaptureISR+0x34>
	{
		/*Enable Overflow interrupt of timer1*/
		TIMERS_u8IntEnable(TIMER1_OVF);
    41b0:	82 e0       	ldi	r24, 0x02	; 2
    41b2:	0e 94 18 16 	call	0x2c30	; 0x2c30 <TIMERS_u8IntEnable>
		ULTSONIC_u16Capture1 = TIMER1_u16GetInputCaptValue();
    41b6:	0e 94 2d 18 	call	0x305a	; 0x305a <TIMER1_u16GetInputCaptValue>
    41ba:	90 93 a4 01 	sts	0x01A4, r25
    41be:	80 93 a3 01 	sts	0x01A3, r24
		TIMER1_u8SetInputCaptTriggerSrc(TIMER1_u8ICU_FALLING_EDGE);
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	0e 94 38 18 	call	0x3070	; 0x3070 <TIMER1_u8SetInputCaptTriggerSrc>
    41c8:	14 c0       	rjmp	.+40     	; 0x41f2 <ULTSONIC_voidCaptureISR+0x5c>
	}
	else if(Local_u8Counter == 2u)
    41ca:	80 91 ab 01 	lds	r24, 0x01AB
    41ce:	82 30       	cpi	r24, 0x02	; 2
    41d0:	81 f4       	brne	.+32     	; 0x41f2 <ULTSONIC_voidCaptureISR+0x5c>
	{
		ULTSONIC_u16Capture2 = TIMER1_u16GetInputCaptValue();
    41d2:	0e 94 2d 18 	call	0x305a	; 0x305a <TIMER1_u16GetInputCaptValue>
    41d6:	90 93 a6 01 	sts	0x01A6, r25
    41da:	80 93 a5 01 	sts	0x01A5, r24
		ULTSONIC_u16EchoOvfCounter = ULTSONIC_u16OvfCounter;
    41de:	80 91 a7 01 	lds	r24, 0x01A7
    41e2:	90 91 a8 01 	lds	r25, 0x01A8
    41e6:	90 93 aa 01 	sts	0x01AA, r25
    41ea:	80 93 a9 01 	sts	0x01A9, r24
		Local_u8Counter = 0;
    41ee:	10 92 ab 01 	sts	0x01AB, r1
	}
}
    41f2:	cf 91       	pop	r28
    41f4:	df 91       	pop	r29
    41f6:	08 95       	ret

000041f8 <ULTSONIC_voidOvfISR>:

/*Overflow ISR*/
static void ULTSONIC_voidOvfISR(void)
{
    41f8:	df 93       	push	r29
    41fa:	cf 93       	push	r28
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62

	ULTSONIC_u16OvfCounter++;
    4200:	80 91 a7 01 	lds	r24, 0x01A7
    4204:	90 91 a8 01 	lds	r25, 0x01A8
    4208:	01 96       	adiw	r24, 0x01	; 1
    420a:	90 93 a8 01 	sts	0x01A8, r25
    420e:	80 93 a7 01 	sts	0x01A7, r24
}
    4212:	cf 91       	pop	r28
    4214:	df 91       	pop	r29
    4216:	08 95       	ret

00004218 <main>:
static uint8 Main_u8CarDirection;
static uint8 Main_u8MotorSpeed = 1u;

/*It is the main*/
void main(void)
{
    4218:	df 93       	push	r29
    421a:	cf 93       	push	r28
    421c:	00 d0       	rcall	.+0      	; 0x421e <main+0x6>
    421e:	00 d0       	rcall	.+0      	; 0x4220 <main+0x8>
    4220:	0f 92       	push	r0
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
	/*Initialize needed peripherals*/
	PORT_voidInit();
    4226:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <PORT_voidInit>
	USART_voidInit();
    422a:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <USART_voidInit>

	/*Enable Global Interrupt*/
	GIE_voidEnable();
    422e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <GIE_voidEnable>

	/*Initialize Timer 0*/
	TIMER0_2_CFG_t Local_stTimer0;
	Local_stTimer0.ClkSelect = TIMER0_u8SYS_CLK_BY_8;
    4232:	82 e0       	ldi	r24, 0x02	; 2
    4234:	89 83       	std	Y+1, r24	; 0x01
	Local_stTimer0.OCMode = OC_DISCONNECTED;
    4236:	1b 82       	std	Y+3, r1	; 0x03
	Local_stTimer0.WGM = CTC;
    4238:	82 e0       	ldi	r24, 0x02	; 2
    423a:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_u8Init(&Local_stTimer0);
    423c:	ce 01       	movw	r24, r28
    423e:	01 96       	adiw	r24, 0x01	; 1
    4240:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <TIMER0_u8Init>
	TIMER0_voidSetCompValue(250);
    4244:	8a ef       	ldi	r24, 0xFA	; 250
    4246:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <TIMER0_voidSetCompValue>
	TIMERS_u8SetCallBack(TIMER0_COMP, Main_voidTimer0ISR);
    424a:	25 e3       	ldi	r18, 0x35	; 53
    424c:	32 e2       	ldi	r19, 0x22	; 34
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	b9 01       	movw	r22, r18
    4252:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <TIMERS_u8SetCallBack>
	TIMERS_u8IntDisable(TIMER0_COMP);
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <TIMERS_u8IntDisable>

	/*Initialize motors' pins*/
	Main_stMotor1.Pin1 = DIO_u8PIN0;
    425c:	10 92 b3 01 	sts	0x01B3, r1
	Main_stMotor1.Pin2 = DIO_u8PIN1;
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	80 93 b4 01 	sts	0x01B4, r24
	Main_stMotor1.Port = DIO_u8PORTC;
    4266:	82 e0       	ldi	r24, 0x02	; 2
    4268:	80 93 b2 01 	sts	0x01B2, r24

	Main_stMotor2.Pin1 = DIO_u8PIN2;
    426c:	82 e0       	ldi	r24, 0x02	; 2
    426e:	80 93 b0 01 	sts	0x01B0, r24
	Main_stMotor2.Pin2 = DIO_u8PIN3;
    4272:	83 e0       	ldi	r24, 0x03	; 3
    4274:	80 93 b1 01 	sts	0x01B1, r24
	Main_stMotor2.Port = DIO_u8PORTC;
    4278:	82 e0       	ldi	r24, 0x02	; 2
    427a:	80 93 af 01 	sts	0x01AF, r24

	while(1)
	{
		/*Receive Character message from usart with asynchronous function*/
		USART_u8ReceiveBufferAsynch(&Main_u8ReceivedData, 1, Main_voidReceiveNotificFunc);
    427e:	8c ea       	ldi	r24, 0xAC	; 172
    4280:	91 e0       	ldi	r25, 0x01	; 1
    4282:	25 e8       	ldi	r18, 0x85	; 133
    4284:	31 e2       	ldi	r19, 0x21	; 33
    4286:	61 e0       	ldi	r22, 0x01	; 1
    4288:	a9 01       	movw	r20, r18
    428a:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <USART_u8ReceiveBufferAsynch>
		/*Switch the char which received then take its corresponding order*/
		switch(Main_u8ReceivedData)
    428e:	80 91 ac 01 	lds	r24, 0x01AC
    4292:	28 2f       	mov	r18, r24
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	3d 83       	std	Y+5, r19	; 0x05
    4298:	2c 83       	std	Y+4, r18	; 0x04
    429a:	8c 81       	ldd	r24, Y+4	; 0x04
    429c:	9d 81       	ldd	r25, Y+5	; 0x05
    429e:	86 34       	cpi	r24, 0x46	; 70
    42a0:	91 05       	cpc	r25, r1
    42a2:	b1 f0       	breq	.+44     	; 0x42d0 <main+0xb8>
    42a4:	2c 81       	ldd	r18, Y+4	; 0x04
    42a6:	3d 81       	ldd	r19, Y+5	; 0x05
    42a8:	27 34       	cpi	r18, 0x47	; 71
    42aa:	31 05       	cpc	r19, r1
    42ac:	34 f4       	brge	.+12     	; 0x42ba <main+0xa2>
    42ae:	8c 81       	ldd	r24, Y+4	; 0x04
    42b0:	9d 81       	ldd	r25, Y+5	; 0x05
    42b2:	82 34       	cpi	r24, 0x42	; 66
    42b4:	91 05       	cpc	r25, r1
    42b6:	91 f0       	breq	.+36     	; 0x42dc <main+0xc4>
    42b8:	e2 cf       	rjmp	.-60     	; 0x427e <main+0x66>
    42ba:	2c 81       	ldd	r18, Y+4	; 0x04
    42bc:	3d 81       	ldd	r19, Y+5	; 0x05
    42be:	2c 34       	cpi	r18, 0x4C	; 76
    42c0:	31 05       	cpc	r19, r1
    42c2:	e9 f0       	breq	.+58     	; 0x42fe <main+0xe6>
    42c4:	8c 81       	ldd	r24, Y+4	; 0x04
    42c6:	9d 81       	ldd	r25, Y+5	; 0x05
    42c8:	82 35       	cpi	r24, 0x52	; 82
    42ca:	91 05       	cpc	r25, r1
    42cc:	91 f0       	breq	.+36     	; 0x42f2 <main+0xda>
    42ce:	d7 cf       	rjmp	.-82     	; 0x427e <main+0x66>
		{
		case 'F':
			Main_voidMove('F', 50);
    42d0:	86 e4       	ldi	r24, 0x46	; 70
    42d2:	62 e3       	ldi	r22, 0x32	; 50
    42d4:	70 e0       	ldi	r23, 0x00	; 0
    42d6:	0e 94 8c 21 	call	0x4318	; 0x4318 <Main_voidMove>
    42da:	d1 cf       	rjmp	.-94     	; 0x427e <main+0x66>
			break;

		case 'B':
			DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN7, DIO_u8PIN_HIGH);
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	67 e0       	ldi	r22, 0x07	; 7
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 07 0c 	call	0x180e	; 0x180e <DIO_u8SetPinValue>
			Main_voidMove('B', 50);
    42e6:	82 e4       	ldi	r24, 0x42	; 66
    42e8:	62 e3       	ldi	r22, 0x32	; 50
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	0e 94 8c 21 	call	0x4318	; 0x4318 <Main_voidMove>
    42f0:	c6 cf       	rjmp	.-116    	; 0x427e <main+0x66>
			break;

		case 'R':
			Main_voidMove('R', 50);
    42f2:	82 e5       	ldi	r24, 0x52	; 82
    42f4:	62 e3       	ldi	r22, 0x32	; 50
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	0e 94 8c 21 	call	0x4318	; 0x4318 <Main_voidMove>
    42fc:	c0 cf       	rjmp	.-128    	; 0x427e <main+0x66>
			break;

		case 'L':
			Main_voidMove('L', 50);
    42fe:	8c e4       	ldi	r24, 0x4C	; 76
    4300:	62 e3       	ldi	r22, 0x32	; 50
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	0e 94 8c 21 	call	0x4318	; 0x4318 <Main_voidMove>
    4308:	ba cf       	rjmp	.-140    	; 0x427e <main+0x66>

0000430a <Main_voidReceiveNotificFunc>:



/*USART Receive ISR*/
void Main_voidReceiveNotificFunc(void)
{
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
}
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <Main_voidMove>:

void Main_voidMove(uint8 Copy_u8Direction, uint16 Copy_u16Duration)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    4320:	61 97       	sbiw	r28, 0x11	; 17
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	8f 87       	std	Y+15, r24	; 0x0f
    432e:	79 8b       	std	Y+17, r23	; 0x11
    4330:	68 8b       	std	Y+16, r22	; 0x10
	Main_u8CarDirection = Copy_u8Direction;
    4332:	8f 85       	ldd	r24, Y+15	; 0x0f
    4334:	80 93 ae 01 	sts	0x01AE, r24
	TIMERS_u8IntEnable(TIMER0_COMP);
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <TIMERS_u8IntEnable>
	_delay_ms(Copy_u16Duration);
    433e:	88 89       	ldd	r24, Y+16	; 0x10
    4340:	99 89       	ldd	r25, Y+17	; 0x11
    4342:	cc 01       	movw	r24, r24
    4344:	a0 e0       	ldi	r26, 0x00	; 0
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	bc 01       	movw	r22, r24
    434a:	cd 01       	movw	r24, r26
    434c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	8b 87       	std	Y+11, r24	; 0x0b
    4356:	9c 87       	std	Y+12, r25	; 0x0c
    4358:	ad 87       	std	Y+13, r26	; 0x0d
    435a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    435c:	6b 85       	ldd	r22, Y+11	; 0x0b
    435e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4360:	8d 85       	ldd	r24, Y+13	; 0x0d
    4362:	9e 85       	ldd	r25, Y+14	; 0x0e
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	4a ef       	ldi	r20, 0xFA	; 250
    436a:	54 e4       	ldi	r21, 0x44	; 68
    436c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	8f 83       	std	Y+7, r24	; 0x07
    4376:	98 87       	std	Y+8, r25	; 0x08
    4378:	a9 87       	std	Y+9, r26	; 0x09
    437a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    437c:	6f 81       	ldd	r22, Y+7	; 0x07
    437e:	78 85       	ldd	r23, Y+8	; 0x08
    4380:	89 85       	ldd	r24, Y+9	; 0x09
    4382:	9a 85       	ldd	r25, Y+10	; 0x0a
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	40 e8       	ldi	r20, 0x80	; 128
    438a:	5f e3       	ldi	r21, 0x3F	; 63
    438c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4390:	88 23       	and	r24, r24
    4392:	2c f4       	brge	.+10     	; 0x439e <Main_voidMove+0x86>
		__ticks = 1;
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	9e 83       	std	Y+6, r25	; 0x06
    439a:	8d 83       	std	Y+5, r24	; 0x05
    439c:	3f c0       	rjmp	.+126    	; 0x441c <Main_voidMove+0x104>
	else if (__tmp > 65535)
    439e:	6f 81       	ldd	r22, Y+7	; 0x07
    43a0:	78 85       	ldd	r23, Y+8	; 0x08
    43a2:	89 85       	ldd	r24, Y+9	; 0x09
    43a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	3f ef       	ldi	r19, 0xFF	; 255
    43aa:	4f e7       	ldi	r20, 0x7F	; 127
    43ac:	57 e4       	ldi	r21, 0x47	; 71
    43ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43b2:	18 16       	cp	r1, r24
    43b4:	4c f5       	brge	.+82     	; 0x4408 <Main_voidMove+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    43bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	40 e2       	ldi	r20, 0x20	; 32
    43c4:	51 e4       	ldi	r21, 0x41	; 65
    43c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	bc 01       	movw	r22, r24
    43d0:	cd 01       	movw	r24, r26
    43d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	9e 83       	std	Y+6, r25	; 0x06
    43dc:	8d 83       	std	Y+5, r24	; 0x05
    43de:	0f c0       	rjmp	.+30     	; 0x43fe <Main_voidMove+0xe6>
    43e0:	88 ec       	ldi	r24, 0xC8	; 200
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	9c 83       	std	Y+4, r25	; 0x04
    43e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43e8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ea:	9c 81       	ldd	r25, Y+4	; 0x04
    43ec:	01 97       	sbiw	r24, 0x01	; 1
    43ee:	f1 f7       	brne	.-4      	; 0x43ec <Main_voidMove+0xd4>
    43f0:	9c 83       	std	Y+4, r25	; 0x04
    43f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	9e 83       	std	Y+6, r25	; 0x06
    43fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4400:	9e 81       	ldd	r25, Y+6	; 0x06
    4402:	00 97       	sbiw	r24, 0x00	; 0
    4404:	69 f7       	brne	.-38     	; 0x43e0 <Main_voidMove+0xc8>
    4406:	14 c0       	rjmp	.+40     	; 0x4430 <Main_voidMove+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4408:	6f 81       	ldd	r22, Y+7	; 0x07
    440a:	78 85       	ldd	r23, Y+8	; 0x08
    440c:	89 85       	ldd	r24, Y+9	; 0x09
    440e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	9e 83       	std	Y+6, r25	; 0x06
    441a:	8d 83       	std	Y+5, r24	; 0x05
    441c:	8d 81       	ldd	r24, Y+5	; 0x05
    441e:	9e 81       	ldd	r25, Y+6	; 0x06
    4420:	9a 83       	std	Y+2, r25	; 0x02
    4422:	89 83       	std	Y+1, r24	; 0x01
    4424:	89 81       	ldd	r24, Y+1	; 0x01
    4426:	9a 81       	ldd	r25, Y+2	; 0x02
    4428:	01 97       	sbiw	r24, 0x01	; 1
    442a:	f1 f7       	brne	.-4      	; 0x4428 <Main_voidMove+0x110>
    442c:	9a 83       	std	Y+2, r25	; 0x02
    442e:	89 83       	std	Y+1, r24	; 0x01
	Main_voidStop();
    4430:	0e 94 23 22 	call	0x4446	; 0x4446 <Main_voidStop>
}
    4434:	61 96       	adiw	r28, 0x11	; 17
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	f8 94       	cli
    443a:	de bf       	out	0x3e, r29	; 62
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	cd bf       	out	0x3d, r28	; 61
    4440:	cf 91       	pop	r28
    4442:	df 91       	pop	r29
    4444:	08 95       	ret

00004446 <Main_voidStop>:

void Main_voidStop(void)
{
    4446:	df 93       	push	r29
    4448:	cf 93       	push	r28
    444a:	cd b7       	in	r28, 0x3d	; 61
    444c:	de b7       	in	r29, 0x3e	; 62
	TIMERS_u8IntDisable(TIMER0_COMP);
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <TIMERS_u8IntDisable>
	MOTOR_u8Stop(&Main_stMotor1);
    4454:	82 eb       	ldi	r24, 0xB2	; 178
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <MOTOR_u8Stop>
	MOTOR_u8Stop(&Main_stMotor2);
    445c:	8f ea       	ldi	r24, 0xAF	; 175
    445e:	91 e0       	ldi	r25, 0x01	; 1
    4460:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <MOTOR_u8Stop>
}
    4464:	cf 91       	pop	r28
    4466:	df 91       	pop	r29
    4468:	08 95       	ret

0000446a <Main_voidTimer0ISR>:

void Main_voidTimer0ISR()
{
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
	static uint8 Local_u8Counter = 0u;

	Local_u8Counter++;
    4472:	80 91 ad 01 	lds	r24, 0x01AD
    4476:	8f 5f       	subi	r24, 0xFF	; 255
    4478:	80 93 ad 01 	sts	0x01AD, r24

	if(Local_u8Counter == Main_u8MotorSpeed)
    447c:	90 91 ad 01 	lds	r25, 0x01AD
    4480:	80 91 6e 01 	lds	r24, 0x016E
    4484:	98 17       	cp	r25, r24
    4486:	a1 f5       	brne	.+104    	; 0x44f0 <Main_voidTimer0ISR+0x86>
	{
		if(Main_u8CarDirection == 'F')
    4488:	80 91 ae 01 	lds	r24, 0x01AE
    448c:	86 34       	cpi	r24, 0x46	; 70
    448e:	49 f4       	brne	.+18     	; 0x44a2 <Main_voidTimer0ISR+0x38>
		{
			MOTOR_u8RotateCCW(&Main_stMotor1);
    4490:	82 eb       	ldi	r24, 0xB2	; 178
    4492:	91 e0       	ldi	r25, 0x01	; 1
    4494:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <MOTOR_u8RotateCCW>
			MOTOR_u8RotateCCW(&Main_stMotor2);
    4498:	8f ea       	ldi	r24, 0xAF	; 175
    449a:	91 e0       	ldi	r25, 0x01	; 1
    449c:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <MOTOR_u8RotateCCW>
    44a0:	35 c0       	rjmp	.+106    	; 0x450c <Main_voidTimer0ISR+0xa2>
		}
		else if(Main_u8CarDirection == 'B')
    44a2:	80 91 ae 01 	lds	r24, 0x01AE
    44a6:	82 34       	cpi	r24, 0x42	; 66
    44a8:	49 f4       	brne	.+18     	; 0x44bc <Main_voidTimer0ISR+0x52>
		{
			MOTOR_u8RotateCW(&Main_stMotor1);
    44aa:	82 eb       	ldi	r24, 0xB2	; 178
    44ac:	91 e0       	ldi	r25, 0x01	; 1
    44ae:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <MOTOR_u8RotateCW>
			MOTOR_u8RotateCW(&Main_stMotor2);
    44b2:	8f ea       	ldi	r24, 0xAF	; 175
    44b4:	91 e0       	ldi	r25, 0x01	; 1
    44b6:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <MOTOR_u8RotateCW>
    44ba:	28 c0       	rjmp	.+80     	; 0x450c <Main_voidTimer0ISR+0xa2>
		}
		else if(Main_u8CarDirection == 'R')
    44bc:	80 91 ae 01 	lds	r24, 0x01AE
    44c0:	82 35       	cpi	r24, 0x52	; 82
    44c2:	49 f4       	brne	.+18     	; 0x44d6 <Main_voidTimer0ISR+0x6c>
		{
			MOTOR_u8RotateCW(&Main_stMotor2);
    44c4:	8f ea       	ldi	r24, 0xAF	; 175
    44c6:	91 e0       	ldi	r25, 0x01	; 1
    44c8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <MOTOR_u8RotateCW>
			MOTOR_u8RotateCCW(&Main_stMotor1);
    44cc:	82 eb       	ldi	r24, 0xB2	; 178
    44ce:	91 e0       	ldi	r25, 0x01	; 1
    44d0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <MOTOR_u8RotateCCW>
    44d4:	1b c0       	rjmp	.+54     	; 0x450c <Main_voidTimer0ISR+0xa2>
		}
		else if(Main_u8CarDirection == 'L')
    44d6:	80 91 ae 01 	lds	r24, 0x01AE
    44da:	8c 34       	cpi	r24, 0x4C	; 76
    44dc:	b9 f4       	brne	.+46     	; 0x450c <Main_voidTimer0ISR+0xa2>
		{
			MOTOR_u8RotateCCW(&Main_stMotor2);
    44de:	8f ea       	ldi	r24, 0xAF	; 175
    44e0:	91 e0       	ldi	r25, 0x01	; 1
    44e2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <MOTOR_u8RotateCCW>
			MOTOR_u8RotateCW(&Main_stMotor1);
    44e6:	82 eb       	ldi	r24, 0xB2	; 178
    44e8:	91 e0       	ldi	r25, 0x01	; 1
    44ea:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <MOTOR_u8RotateCW>
    44ee:	0e c0       	rjmp	.+28     	; 0x450c <Main_voidTimer0ISR+0xa2>
		}
	}
	else if(Local_u8Counter == 20u)
    44f0:	80 91 ad 01 	lds	r24, 0x01AD
    44f4:	84 31       	cpi	r24, 0x14	; 20
    44f6:	51 f4       	brne	.+20     	; 0x450c <Main_voidTimer0ISR+0xa2>
	{
		MOTOR_u8Stop(&Main_stMotor1);
    44f8:	82 eb       	ldi	r24, 0xB2	; 178
    44fa:	91 e0       	ldi	r25, 0x01	; 1
    44fc:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <MOTOR_u8Stop>
		MOTOR_u8Stop(&Main_stMotor2);
    4500:	8f ea       	ldi	r24, 0xAF	; 175
    4502:	91 e0       	ldi	r25, 0x01	; 1
    4504:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <MOTOR_u8Stop>
		Local_u8Counter = 0u;
    4508:	10 92 ad 01 	sts	0x01AD, r1
	}

}
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <__divmodsi4>:
    4512:	97 fb       	bst	r25, 7
    4514:	09 2e       	mov	r0, r25
    4516:	05 26       	eor	r0, r21
    4518:	0e d0       	rcall	.+28     	; 0x4536 <__divmodsi4_neg1>
    451a:	57 fd       	sbrc	r21, 7
    451c:	04 d0       	rcall	.+8      	; 0x4526 <__divmodsi4_neg2>
    451e:	14 d0       	rcall	.+40     	; 0x4548 <__udivmodsi4>
    4520:	0a d0       	rcall	.+20     	; 0x4536 <__divmodsi4_neg1>
    4522:	00 1c       	adc	r0, r0
    4524:	38 f4       	brcc	.+14     	; 0x4534 <__divmodsi4_exit>

00004526 <__divmodsi4_neg2>:
    4526:	50 95       	com	r21
    4528:	40 95       	com	r20
    452a:	30 95       	com	r19
    452c:	21 95       	neg	r18
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	4f 4f       	sbci	r20, 0xFF	; 255
    4532:	5f 4f       	sbci	r21, 0xFF	; 255

00004534 <__divmodsi4_exit>:
    4534:	08 95       	ret

00004536 <__divmodsi4_neg1>:
    4536:	f6 f7       	brtc	.-4      	; 0x4534 <__divmodsi4_exit>
    4538:	90 95       	com	r25
    453a:	80 95       	com	r24
    453c:	70 95       	com	r23
    453e:	61 95       	neg	r22
    4540:	7f 4f       	sbci	r23, 0xFF	; 255
    4542:	8f 4f       	sbci	r24, 0xFF	; 255
    4544:	9f 4f       	sbci	r25, 0xFF	; 255
    4546:	08 95       	ret

00004548 <__udivmodsi4>:
    4548:	a1 e2       	ldi	r26, 0x21	; 33
    454a:	1a 2e       	mov	r1, r26
    454c:	aa 1b       	sub	r26, r26
    454e:	bb 1b       	sub	r27, r27
    4550:	fd 01       	movw	r30, r26
    4552:	0d c0       	rjmp	.+26     	; 0x456e <__udivmodsi4_ep>

00004554 <__udivmodsi4_loop>:
    4554:	aa 1f       	adc	r26, r26
    4556:	bb 1f       	adc	r27, r27
    4558:	ee 1f       	adc	r30, r30
    455a:	ff 1f       	adc	r31, r31
    455c:	a2 17       	cp	r26, r18
    455e:	b3 07       	cpc	r27, r19
    4560:	e4 07       	cpc	r30, r20
    4562:	f5 07       	cpc	r31, r21
    4564:	20 f0       	brcs	.+8      	; 0x456e <__udivmodsi4_ep>
    4566:	a2 1b       	sub	r26, r18
    4568:	b3 0b       	sbc	r27, r19
    456a:	e4 0b       	sbc	r30, r20
    456c:	f5 0b       	sbc	r31, r21

0000456e <__udivmodsi4_ep>:
    456e:	66 1f       	adc	r22, r22
    4570:	77 1f       	adc	r23, r23
    4572:	88 1f       	adc	r24, r24
    4574:	99 1f       	adc	r25, r25
    4576:	1a 94       	dec	r1
    4578:	69 f7       	brne	.-38     	; 0x4554 <__udivmodsi4_loop>
    457a:	60 95       	com	r22
    457c:	70 95       	com	r23
    457e:	80 95       	com	r24
    4580:	90 95       	com	r25
    4582:	9b 01       	movw	r18, r22
    4584:	ac 01       	movw	r20, r24
    4586:	bd 01       	movw	r22, r26
    4588:	cf 01       	movw	r24, r30
    458a:	08 95       	ret

0000458c <__prologue_saves__>:
    458c:	2f 92       	push	r2
    458e:	3f 92       	push	r3
    4590:	4f 92       	push	r4
    4592:	5f 92       	push	r5
    4594:	6f 92       	push	r6
    4596:	7f 92       	push	r7
    4598:	8f 92       	push	r8
    459a:	9f 92       	push	r9
    459c:	af 92       	push	r10
    459e:	bf 92       	push	r11
    45a0:	cf 92       	push	r12
    45a2:	df 92       	push	r13
    45a4:	ef 92       	push	r14
    45a6:	ff 92       	push	r15
    45a8:	0f 93       	push	r16
    45aa:	1f 93       	push	r17
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
    45b4:	ca 1b       	sub	r28, r26
    45b6:	db 0b       	sbc	r29, r27
    45b8:	0f b6       	in	r0, 0x3f	; 63
    45ba:	f8 94       	cli
    45bc:	de bf       	out	0x3e, r29	; 62
    45be:	0f be       	out	0x3f, r0	; 63
    45c0:	cd bf       	out	0x3d, r28	; 61
    45c2:	09 94       	ijmp

000045c4 <__epilogue_restores__>:
    45c4:	2a 88       	ldd	r2, Y+18	; 0x12
    45c6:	39 88       	ldd	r3, Y+17	; 0x11
    45c8:	48 88       	ldd	r4, Y+16	; 0x10
    45ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    45cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    45ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    45d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    45d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    45d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    45d6:	b9 84       	ldd	r11, Y+9	; 0x09
    45d8:	c8 84       	ldd	r12, Y+8	; 0x08
    45da:	df 80       	ldd	r13, Y+7	; 0x07
    45dc:	ee 80       	ldd	r14, Y+6	; 0x06
    45de:	fd 80       	ldd	r15, Y+5	; 0x05
    45e0:	0c 81       	ldd	r16, Y+4	; 0x04
    45e2:	1b 81       	ldd	r17, Y+3	; 0x03
    45e4:	aa 81       	ldd	r26, Y+2	; 0x02
    45e6:	b9 81       	ldd	r27, Y+1	; 0x01
    45e8:	ce 0f       	add	r28, r30
    45ea:	d1 1d       	adc	r29, r1
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	f8 94       	cli
    45f0:	de bf       	out	0x3e, r29	; 62
    45f2:	0f be       	out	0x3f, r0	; 63
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	ed 01       	movw	r28, r26
    45f8:	08 95       	ret

000045fa <_exit>:
    45fa:	f8 94       	cli

000045fc <__stop_program>:
    45fc:	ff cf       	rjmp	.-2      	; 0x45fc <__stop_program>
